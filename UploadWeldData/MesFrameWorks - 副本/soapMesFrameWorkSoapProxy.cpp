/* soapMesFrameWorkSoapProxy.cpp
   Generated by gSOAP 2.8.74 for MesFrameWork.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapMesFrameWorkSoapProxy.h"

MesFrameWorkSoapProxy::MesFrameWorkSoapProxy() : soap(SOAP_IO_DEFAULT)
{	MesFrameWorkSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

MesFrameWorkSoapProxy::MesFrameWorkSoapProxy(const MesFrameWorkSoapProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

MesFrameWorkSoapProxy::MesFrameWorkSoapProxy(const struct soap &_soap) : soap(_soap)
{ }

MesFrameWorkSoapProxy::MesFrameWorkSoapProxy(const struct soap &_soap, const char *soap_endpoint_url) : soap(_soap)
{
	soap_endpoint = soap_endpoint_url;
}

MesFrameWorkSoapProxy::MesFrameWorkSoapProxy(const char *soap_endpoint_url) : soap(SOAP_IO_DEFAULT)
{	MesFrameWorkSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = soap_endpoint_url;
}

MesFrameWorkSoapProxy::MesFrameWorkSoapProxy(soap_mode iomode) : soap(iomode)
{	MesFrameWorkSoapProxy_init(iomode, iomode);
}

MesFrameWorkSoapProxy::MesFrameWorkSoapProxy(const char *soap_endpoint_url, soap_mode iomode) : soap(iomode)
{	MesFrameWorkSoapProxy_init(iomode, iomode);
	soap_endpoint = soap_endpoint_url;
}

MesFrameWorkSoapProxy::MesFrameWorkSoapProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	MesFrameWorkSoapProxy_init(imode, omode);
}

MesFrameWorkSoapProxy::~MesFrameWorkSoapProxy()
{
	this->destroy();
	}

void MesFrameWorkSoapProxy::MesFrameWorkSoapProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        { "SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL },
        { "SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL },
        { "xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL },
        { "xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL },
        { "ns1", "http://device.service.moresoft.com/", NULL, NULL },
        { NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

MesFrameWorkSoapProxy *MesFrameWorkSoapProxy::copy()
{	MesFrameWorkSoapProxy *dup = SOAP_NEW_UNMANAGED(MesFrameWorkSoapProxy(*(struct soap*)this));
	return dup;
}

MesFrameWorkSoapProxy& MesFrameWorkSoapProxy::operator=(const MesFrameWorkSoapProxy& rhs)
{	soap_done(this);
	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void MesFrameWorkSoapProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void MesFrameWorkSoapProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	MesFrameWorkSoapProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void MesFrameWorkSoapProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *MesFrameWorkSoapProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *MesFrameWorkSoapProxy::soap_fault()
{	return this->fault;
}

const char *MesFrameWorkSoapProxy::soap_fault_subcode()
{	return ::soap_fault_subcode(this);
}

const char *MesFrameWorkSoapProxy::soap_fault_string()
{	return ::soap_fault_string(this);
}

const char *MesFrameWorkSoapProxy::soap_fault_detail()
{	return ::soap_fault_detail(this);
}

int MesFrameWorkSoapProxy::soap_close_socket()
{	return ::soap_closesock(this);
}

int MesFrameWorkSoapProxy::soap_force_close_socket()
{	return ::soap_force_closesock(this);
}

void MesFrameWorkSoapProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void MesFrameWorkSoapProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *MesFrameWorkSoapProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int MesFrameWorkSoapProxy::GetString(const char *soap_endpoint_url, const char *soap_action, _ns1__GetString *ns1__GetString, _ns1__GetStringResponse &ns1__GetStringResponse)
{
	struct soap *soap = this;
	struct __ns1__GetString soap_tmp___ns1__GetString;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://172.20.1.7:9012/MesFrameWork.asmx";
	if (soap_action == NULL)
		soap_action = "http://device.service.moresoft.com/GetString";
	soap_tmp___ns1__GetString.ns1__GetString = ns1__GetString;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetString(soap, &soap_tmp___ns1__GetString);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetString(soap, &soap_tmp___ns1__GetString, "-ns1:GetString", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetString(soap, &soap_tmp___ns1__GetString, "-ns1:GetString", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__GetStringResponse*>(&ns1__GetStringResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetStringResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetStringResponse.soap_get(soap, "ns1:GetStringResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MesFrameWorkSoapProxy::DxTestDataUpload(const char *soap_endpoint_url, const char *soap_action, _ns1__DxTestDataUpload *ns1__DxTestDataUpload, _ns1__DxTestDataUploadResponse &ns1__DxTestDataUploadResponse)
{
	struct soap *soap = this;
	struct __ns1__DxTestDataUpload soap_tmp___ns1__DxTestDataUpload;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://172.20.1.7:9012/MesFrameWork.asmx";
	if (soap_action == NULL)
		soap_action = "http://device.service.moresoft.com/DxTestDataUpload";
	soap_tmp___ns1__DxTestDataUpload.ns1__DxTestDataUpload = ns1__DxTestDataUpload;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DxTestDataUpload(soap, &soap_tmp___ns1__DxTestDataUpload);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DxTestDataUpload(soap, &soap_tmp___ns1__DxTestDataUpload, "-ns1:DxTestDataUpload", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DxTestDataUpload(soap, &soap_tmp___ns1__DxTestDataUpload, "-ns1:DxTestDataUpload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__DxTestDataUploadResponse*>(&ns1__DxTestDataUploadResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DxTestDataUploadResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DxTestDataUploadResponse.soap_get(soap, "ns1:DxTestDataUploadResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MesFrameWorkSoapProxy::Device_USCOREParameters(const char *soap_endpoint_url, const char *soap_action, _ns1__Device_USCOREParameters *ns1__Device_USCOREParameters, _ns1__Device_USCOREParametersResponse &ns1__Device_USCOREParametersResponse)
{
	struct soap *soap = this;
	struct __ns1__Device_USCOREParameters soap_tmp___ns1__Device_USCOREParameters;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://172.20.1.7:9012/MesFrameWork.asmx";
	if (soap_action == NULL)
		soap_action = "http://device.service.moresoft.com/Device_Parameters";
	soap_tmp___ns1__Device_USCOREParameters.ns1__Device_USCOREParameters = ns1__Device_USCOREParameters;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__Device_USCOREParameters(soap, &soap_tmp___ns1__Device_USCOREParameters);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Device_USCOREParameters(soap, &soap_tmp___ns1__Device_USCOREParameters, "-ns1:Device_Parameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Device_USCOREParameters(soap, &soap_tmp___ns1__Device_USCOREParameters, "-ns1:Device_Parameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__Device_USCOREParametersResponse*>(&ns1__Device_USCOREParametersResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__Device_USCOREParametersResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Device_USCOREParametersResponse.soap_get(soap, "ns1:Device_ParametersResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MesFrameWorkSoapProxy::DSDataCreateJSON(const char *soap_endpoint_url, const char *soap_action, _ns1__DSDataCreateJSON *ns1__DSDataCreateJSON, _ns1__DSDataCreateJSONResponse &ns1__DSDataCreateJSONResponse)
{
	struct soap *soap = this;
	struct __ns1__DSDataCreateJSON soap_tmp___ns1__DSDataCreateJSON;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://172.20.1.7:9012/MesFrameWork.asmx";
	if (soap_action == NULL)
		soap_action = "http://device.service.moresoft.com/DSDataCreateJSON";
	soap_tmp___ns1__DSDataCreateJSON.ns1__DSDataCreateJSON = ns1__DSDataCreateJSON;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DSDataCreateJSON(soap, &soap_tmp___ns1__DSDataCreateJSON);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DSDataCreateJSON(soap, &soap_tmp___ns1__DSDataCreateJSON, "-ns1:DSDataCreateJSON", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DSDataCreateJSON(soap, &soap_tmp___ns1__DSDataCreateJSON, "-ns1:DSDataCreateJSON", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__DSDataCreateJSONResponse*>(&ns1__DSDataCreateJSONResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DSDataCreateJSONResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DSDataCreateJSONResponse.soap_get(soap, "ns1:DSDataCreateJSONResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MesFrameWorkSoapProxy::DxDataUploadJson(const char *soap_endpoint_url, const char *soap_action, _ns1__DxDataUploadJson *ns1__DxDataUploadJson, _ns1__DxDataUploadJsonResponse &ns1__DxDataUploadJsonResponse)
{
	struct soap *soap = this;
	struct __ns1__DxDataUploadJson soap_tmp___ns1__DxDataUploadJson;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://172.20.1.7:9012/MesFrameWork.asmx";
	if (soap_action == NULL)
		soap_action = "http://device.service.moresoft.com/DxDataUploadJson";
	soap_tmp___ns1__DxDataUploadJson.ns1__DxDataUploadJson = ns1__DxDataUploadJson;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DxDataUploadJson(soap, &soap_tmp___ns1__DxDataUploadJson);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DxDataUploadJson(soap, &soap_tmp___ns1__DxDataUploadJson, "-ns1:DxDataUploadJson", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DxDataUploadJson(soap, &soap_tmp___ns1__DxDataUploadJson, "-ns1:DxDataUploadJson", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__DxDataUploadJsonResponse*>(&ns1__DxDataUploadJsonResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DxDataUploadJsonResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DxDataUploadJsonResponse.soap_get(soap, "ns1:DxDataUploadJsonResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MesFrameWorkSoapProxy::GetString_(const char *soap_endpoint_url, const char *soap_action, _ns1__GetString *ns1__GetString, _ns1__GetStringResponse &ns1__GetStringResponse)
{
	struct soap *soap = this;
	struct __ns1__GetString_ soap_tmp___ns1__GetString_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://172.20.1.7:9012/MesFrameWork.asmx";
	if (soap_action == NULL)
		soap_action = "http://device.service.moresoft.com/GetString";
	soap_tmp___ns1__GetString_.ns1__GetString = ns1__GetString;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__GetString_(soap, &soap_tmp___ns1__GetString_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetString_(soap, &soap_tmp___ns1__GetString_, "-ns1:GetString", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetString_(soap, &soap_tmp___ns1__GetString_, "-ns1:GetString", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__GetStringResponse*>(&ns1__GetStringResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__GetStringResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__GetStringResponse.soap_get(soap, "ns1:GetStringResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MesFrameWorkSoapProxy::DxTestDataUpload_(const char *soap_endpoint_url, const char *soap_action, _ns1__DxTestDataUpload *ns1__DxTestDataUpload, _ns1__DxTestDataUploadResponse &ns1__DxTestDataUploadResponse)
{
	struct soap *soap = this;
	struct __ns1__DxTestDataUpload_ soap_tmp___ns1__DxTestDataUpload_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://172.20.1.7:9012/MesFrameWork.asmx";
	if (soap_action == NULL)
		soap_action = "http://device.service.moresoft.com/DxTestDataUpload";
	soap_tmp___ns1__DxTestDataUpload_.ns1__DxTestDataUpload = ns1__DxTestDataUpload;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DxTestDataUpload_(soap, &soap_tmp___ns1__DxTestDataUpload_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DxTestDataUpload_(soap, &soap_tmp___ns1__DxTestDataUpload_, "-ns1:DxTestDataUpload", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DxTestDataUpload_(soap, &soap_tmp___ns1__DxTestDataUpload_, "-ns1:DxTestDataUpload", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__DxTestDataUploadResponse*>(&ns1__DxTestDataUploadResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DxTestDataUploadResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DxTestDataUploadResponse.soap_get(soap, "ns1:DxTestDataUploadResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MesFrameWorkSoapProxy::Device_USCOREParameters_(const char *soap_endpoint_url, const char *soap_action, _ns1__Device_USCOREParameters *ns1__Device_USCOREParameters, _ns1__Device_USCOREParametersResponse &ns1__Device_USCOREParametersResponse)
{
	struct soap *soap = this;
	struct __ns1__Device_USCOREParameters_ soap_tmp___ns1__Device_USCOREParameters_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://172.20.1.7:9012/MesFrameWork.asmx";
	if (soap_action == NULL)
		soap_action = "http://device.service.moresoft.com/Device_Parameters";
	soap_tmp___ns1__Device_USCOREParameters_.ns1__Device_USCOREParameters = ns1__Device_USCOREParameters;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__Device_USCOREParameters_(soap, &soap_tmp___ns1__Device_USCOREParameters_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Device_USCOREParameters_(soap, &soap_tmp___ns1__Device_USCOREParameters_, "-ns1:Device_Parameters", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Device_USCOREParameters_(soap, &soap_tmp___ns1__Device_USCOREParameters_, "-ns1:Device_Parameters", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__Device_USCOREParametersResponse*>(&ns1__Device_USCOREParametersResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__Device_USCOREParametersResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__Device_USCOREParametersResponse.soap_get(soap, "ns1:Device_ParametersResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MesFrameWorkSoapProxy::DSDataCreateJSON_(const char *soap_endpoint_url, const char *soap_action, _ns1__DSDataCreateJSON *ns1__DSDataCreateJSON, _ns1__DSDataCreateJSONResponse &ns1__DSDataCreateJSONResponse)
{
	struct soap *soap = this;
	struct __ns1__DSDataCreateJSON_ soap_tmp___ns1__DSDataCreateJSON_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://172.20.1.7:9012/MesFrameWork.asmx";
	if (soap_action == NULL)
		soap_action = "http://device.service.moresoft.com/DSDataCreateJSON";
	soap_tmp___ns1__DSDataCreateJSON_.ns1__DSDataCreateJSON = ns1__DSDataCreateJSON;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DSDataCreateJSON_(soap, &soap_tmp___ns1__DSDataCreateJSON_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DSDataCreateJSON_(soap, &soap_tmp___ns1__DSDataCreateJSON_, "-ns1:DSDataCreateJSON", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DSDataCreateJSON_(soap, &soap_tmp___ns1__DSDataCreateJSON_, "-ns1:DSDataCreateJSON", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__DSDataCreateJSONResponse*>(&ns1__DSDataCreateJSONResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DSDataCreateJSONResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DSDataCreateJSONResponse.soap_get(soap, "ns1:DSDataCreateJSONResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int MesFrameWorkSoapProxy::DxDataUploadJson_(const char *soap_endpoint_url, const char *soap_action, _ns1__DxDataUploadJson *ns1__DxDataUploadJson, _ns1__DxDataUploadJsonResponse &ns1__DxDataUploadJsonResponse)
{
	struct soap *soap = this;
	struct __ns1__DxDataUploadJson_ soap_tmp___ns1__DxDataUploadJson_;
	if (soap_endpoint_url != NULL)
		soap_endpoint = soap_endpoint_url;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://172.20.1.7:9012/MesFrameWork.asmx";
	if (soap_action == NULL)
		soap_action = "http://device.service.moresoft.com/DxDataUploadJson";
	soap_tmp___ns1__DxDataUploadJson_.ns1__DxDataUploadJson = ns1__DxDataUploadJson;
	soap_begin(soap);
	soap->encodingStyle = NULL; /* use SOAP literal style */
	soap_serializeheader(soap);
	soap_serialize___ns1__DxDataUploadJson_(soap, &soap_tmp___ns1__DxDataUploadJson_);
	if (soap_begin_count(soap))
		return soap->error;
	if ((soap->mode & SOAP_IO_LENGTH))
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DxDataUploadJson_(soap, &soap_tmp___ns1__DxDataUploadJson_, "-ns1:DxDataUploadJson", "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DxDataUploadJson_(soap, &soap_tmp___ns1__DxDataUploadJson_, "-ns1:DxDataUploadJson", "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!static_cast<_ns1__DxDataUploadJsonResponse*>(&ns1__DxDataUploadJsonResponse)) // NULL ref?
		return soap_closesock(soap);
	ns1__DxDataUploadJsonResponse.soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__DxDataUploadJsonResponse.soap_get(soap, "ns1:DxDataUploadJsonResponse", NULL);
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
