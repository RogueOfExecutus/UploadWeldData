/* soapC.cpp
   Generated by gSOAP 2.8.74 for MesFrameWork.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.74 2019-01-02 03:24:08 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, ""))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
	}
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code == NULL)
		soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason == NULL)
		soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", "");
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
				return NULL;
		}
		return (const char**)(void*)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)(void*)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_subcode(struct soap *soap)
{
	const char **s = soap_faultsubcode(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2 && soap->fault->SOAP_ENV__Reason)
		return (const char**)(void*)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)(void*)&soap->fault->faultstring;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_string(struct soap *soap)
{
	const char **s = soap_faultstring(soap);
	return s ? *s : NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault == NULL)
		return NULL;
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
			soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		return (const char**)(void*)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
		soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
	return (const char**)(void*)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_fault_detail(struct soap *soap)
{
	const char **s = soap_faultdetail(soap);
	return s ? *s : NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if ((soap->error && soap->error != SOAP_TAG_MISMATCH) || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTo_ns1__DxDataUploadJson:
		return soap_in_PointerTo_ns1__DxDataUploadJson(soap, NULL, NULL, "ns1:DxDataUploadJson");
	case SOAP_TYPE_PointerTo_ns1__DSDataCreateJSON:
		return soap_in_PointerTo_ns1__DSDataCreateJSON(soap, NULL, NULL, "ns1:DSDataCreateJSON");
	case SOAP_TYPE_PointerTo_ns1__Device_USCOREParameters:
		return soap_in_PointerTo_ns1__Device_USCOREParameters(soap, NULL, NULL, "ns1:Device_Parameters");
	case SOAP_TYPE_PointerTo_ns1__DxTestDataUpload:
		return soap_in_PointerTo_ns1__DxTestDataUpload(soap, NULL, NULL, "ns1:DxTestDataUpload");
	case SOAP_TYPE_PointerTo_ns1__GetString:
		return soap_in_PointerTo_ns1__GetString(soap, NULL, NULL, "ns1:GetString");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:DxDataUploadJsonResponse"))
		{	*type = SOAP_TYPE__ns1__DxDataUploadJsonResponse;
			return soap_in__ns1__DxDataUploadJsonResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DxDataUploadJson"))
		{	*type = SOAP_TYPE__ns1__DxDataUploadJson;
			return soap_in__ns1__DxDataUploadJson(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DSDataCreateJSONResponse"))
		{	*type = SOAP_TYPE__ns1__DSDataCreateJSONResponse;
			return soap_in__ns1__DSDataCreateJSONResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DSDataCreateJSON"))
		{	*type = SOAP_TYPE__ns1__DSDataCreateJSON;
			return soap_in__ns1__DSDataCreateJSON(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Device_ParametersResponse"))
		{	*type = SOAP_TYPE__ns1__Device_USCOREParametersResponse;
			return soap_in__ns1__Device_USCOREParametersResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:Device_Parameters"))
		{	*type = SOAP_TYPE__ns1__Device_USCOREParameters;
			return soap_in__ns1__Device_USCOREParameters(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DxTestDataUploadResponse"))
		{	*type = SOAP_TYPE__ns1__DxTestDataUploadResponse;
			return soap_in__ns1__DxTestDataUploadResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:DxTestDataUpload"))
		{	*type = SOAP_TYPE__ns1__DxTestDataUpload;
			return soap_in__ns1__DxTestDataUpload(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetStringResponse"))
		{	*type = SOAP_TYPE__ns1__GetStringResponse;
			return soap_in__ns1__GetStringResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:GetString"))
		{	*type = SOAP_TYPE__ns1__GetString;
			return soap_in__ns1__GetString(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level = %u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other && !soap->fignore)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && !soap->fignore && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body && soap_ignore(soap))
				return soap->error;
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, SOAP_MULTIREFTAG, pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE__ns1__DxDataUploadJsonResponse:
		return ((_ns1__DxDataUploadJsonResponse *)ptr)->soap_out(soap, "ns1:DxDataUploadJsonResponse", id, "");
	case SOAP_TYPE__ns1__DxDataUploadJson:
		return ((_ns1__DxDataUploadJson *)ptr)->soap_out(soap, "ns1:DxDataUploadJson", id, "");
	case SOAP_TYPE__ns1__DSDataCreateJSONResponse:
		return ((_ns1__DSDataCreateJSONResponse *)ptr)->soap_out(soap, "ns1:DSDataCreateJSONResponse", id, "");
	case SOAP_TYPE__ns1__DSDataCreateJSON:
		return ((_ns1__DSDataCreateJSON *)ptr)->soap_out(soap, "ns1:DSDataCreateJSON", id, "");
	case SOAP_TYPE__ns1__Device_USCOREParametersResponse:
		return ((_ns1__Device_USCOREParametersResponse *)ptr)->soap_out(soap, "ns1:Device_ParametersResponse", id, "");
	case SOAP_TYPE__ns1__Device_USCOREParameters:
		return ((_ns1__Device_USCOREParameters *)ptr)->soap_out(soap, "ns1:Device_Parameters", id, "");
	case SOAP_TYPE__ns1__DxTestDataUploadResponse:
		return ((_ns1__DxTestDataUploadResponse *)ptr)->soap_out(soap, "ns1:DxTestDataUploadResponse", id, "");
	case SOAP_TYPE__ns1__DxTestDataUpload:
		return ((_ns1__DxTestDataUpload *)ptr)->soap_out(soap, "ns1:DxTestDataUpload", id, "");
	case SOAP_TYPE__ns1__GetStringResponse:
		return ((_ns1__GetStringResponse *)ptr)->soap_out(soap, "ns1:GetStringResponse", id, "");
	case SOAP_TYPE__ns1__GetString:
		return ((_ns1__GetString *)ptr)->soap_out(soap, "ns1:GetString", id, "");
	case SOAP_TYPE_PointerTo_ns1__DxDataUploadJson:
		return soap_out_PointerTo_ns1__DxDataUploadJson(soap, tag, id, (_ns1__DxDataUploadJson *const*)ptr, "ns1:DxDataUploadJson");
	case SOAP_TYPE_PointerTo_ns1__DSDataCreateJSON:
		return soap_out_PointerTo_ns1__DSDataCreateJSON(soap, tag, id, (_ns1__DSDataCreateJSON *const*)ptr, "ns1:DSDataCreateJSON");
	case SOAP_TYPE_PointerTo_ns1__Device_USCOREParameters:
		return soap_out_PointerTo_ns1__Device_USCOREParameters(soap, tag, id, (_ns1__Device_USCOREParameters *const*)ptr, "ns1:Device_Parameters");
	case SOAP_TYPE_PointerTo_ns1__DxTestDataUpload:
		return soap_out_PointerTo_ns1__DxTestDataUpload(soap, tag, id, (_ns1__DxTestDataUpload *const*)ptr, "ns1:DxTestDataUpload");
	case SOAP_TYPE_PointerTo_ns1__GetString:
		return soap_out_PointerTo_ns1__GetString(soap, tag, id, (_ns1__GetString *const*)ptr, "ns1:GetString");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)(void*)&ptr, "xsd:string");
	case 0:
		return SOAP_OK;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_putelement '%s' failed for type %d in soapC.cpp\n", tag ? tag : "", type));
	return soap_element_empty(soap, tag); /* unknown type to serialize */
}
#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE__ns1__DxDataUploadJsonResponse:
		((_ns1__DxDataUploadJsonResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DxDataUploadJson:
		((_ns1__DxDataUploadJson *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DSDataCreateJSONResponse:
		((_ns1__DSDataCreateJSONResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DSDataCreateJSON:
		((_ns1__DSDataCreateJSON *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Device_USCOREParametersResponse:
		((_ns1__Device_USCOREParametersResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__Device_USCOREParameters:
		((_ns1__Device_USCOREParameters *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DxTestDataUploadResponse:
		((_ns1__DxTestDataUploadResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__DxTestDataUpload:
		((_ns1__DxTestDataUpload *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetStringResponse:
		((_ns1__GetStringResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__GetString:
		((_ns1__GetString *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__DxDataUploadJson_:
		soap_serialize___ns1__DxDataUploadJson_(soap, (const struct __ns1__DxDataUploadJson_ *)ptr);
		break;
	case SOAP_TYPE___ns1__DSDataCreateJSON_:
		soap_serialize___ns1__DSDataCreateJSON_(soap, (const struct __ns1__DSDataCreateJSON_ *)ptr);
		break;
	case SOAP_TYPE___ns1__Device_USCOREParameters_:
		soap_serialize___ns1__Device_USCOREParameters_(soap, (const struct __ns1__Device_USCOREParameters_ *)ptr);
		break;
	case SOAP_TYPE___ns1__DxTestDataUpload_:
		soap_serialize___ns1__DxTestDataUpload_(soap, (const struct __ns1__DxTestDataUpload_ *)ptr);
		break;
	case SOAP_TYPE___ns1__GetString_:
		soap_serialize___ns1__GetString_(soap, (const struct __ns1__GetString_ *)ptr);
		break;
	case SOAP_TYPE___ns1__DxDataUploadJson:
		soap_serialize___ns1__DxDataUploadJson(soap, (const struct __ns1__DxDataUploadJson *)ptr);
		break;
	case SOAP_TYPE___ns1__DSDataCreateJSON:
		soap_serialize___ns1__DSDataCreateJSON(soap, (const struct __ns1__DSDataCreateJSON *)ptr);
		break;
	case SOAP_TYPE___ns1__Device_USCOREParameters:
		soap_serialize___ns1__Device_USCOREParameters(soap, (const struct __ns1__Device_USCOREParameters *)ptr);
		break;
	case SOAP_TYPE___ns1__DxTestDataUpload:
		soap_serialize___ns1__DxTestDataUpload(soap, (const struct __ns1__DxTestDataUpload *)ptr);
		break;
	case SOAP_TYPE___ns1__GetString:
		soap_serialize___ns1__GetString(soap, (const struct __ns1__GetString *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DxDataUploadJson:
		soap_serialize_PointerTo_ns1__DxDataUploadJson(soap, (_ns1__DxDataUploadJson *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DSDataCreateJSON:
		soap_serialize_PointerTo_ns1__DSDataCreateJSON(soap, (_ns1__DSDataCreateJSON *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__Device_USCOREParameters:
		soap_serialize_PointerTo_ns1__Device_USCOREParameters(soap, (_ns1__Device_USCOREParameters *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__DxTestDataUpload:
		soap_serialize_PointerTo_ns1__DxTestDataUpload(soap, (_ns1__DxTestDataUpload *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns1__GetString:
		soap_serialize_PointerTo_ns1__GetString(soap, (_ns1__GetString *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)(void*)&ptr);
		break;
	}
}
#ifdef __cplusplus
}
#endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap *soap, const void *ptr, int type)
{(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	return NULL;
}
#ifdef __cplusplus
}
#endif

#ifdef __cplusplus
extern "C" {
#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void *ptr, int type)
{(void)ptr; (void)type; /* appease -Wall -Werror */
}
#ifdef __cplusplus
}
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetString:
		return (void*)soap_instantiate__ns1__GetString(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__GetStringResponse:
		return (void*)soap_instantiate__ns1__GetStringResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DxTestDataUpload:
		return (void*)soap_instantiate__ns1__DxTestDataUpload(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DxTestDataUploadResponse:
		return (void*)soap_instantiate__ns1__DxTestDataUploadResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Device_USCOREParameters:
		return (void*)soap_instantiate__ns1__Device_USCOREParameters(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__Device_USCOREParametersResponse:
		return (void*)soap_instantiate__ns1__Device_USCOREParametersResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DSDataCreateJSON:
		return (void*)soap_instantiate__ns1__DSDataCreateJSON(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DSDataCreateJSONResponse:
		return (void*)soap_instantiate__ns1__DSDataCreateJSONResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DxDataUploadJson:
		return (void*)soap_instantiate__ns1__DxDataUploadJson(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__DxDataUploadJsonResponse:
		return (void*)soap_instantiate__ns1__DxDataUploadJsonResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetString:
		return (void*)soap_instantiate___ns1__GetString(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DxTestDataUpload:
		return (void*)soap_instantiate___ns1__DxTestDataUpload(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Device_USCOREParameters:
		return (void*)soap_instantiate___ns1__Device_USCOREParameters(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DSDataCreateJSON:
		return (void*)soap_instantiate___ns1__DSDataCreateJSON(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DxDataUploadJson:
		return (void*)soap_instantiate___ns1__DxDataUploadJson(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetString_:
		return (void*)soap_instantiate___ns1__GetString_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DxTestDataUpload_:
		return (void*)soap_instantiate___ns1__DxTestDataUpload_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Device_USCOREParameters_:
		return (void*)soap_instantiate___ns1__Device_USCOREParameters_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DSDataCreateJSON_:
		return (void*)soap_instantiate___ns1__DSDataCreateJSON_(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DxDataUploadJson_:
		return (void*)soap_instantiate___ns1__DxDataUploadJson_(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist *p)
{
	(void)soap; /* appease -Wall -Werror */
	if (!p->ptr)
		return SOAP_OK;
	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<std::string*>(p->ptr), std::string);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<std::string*>(p->ptr), std::string);
		break;
	case SOAP_TYPE__ns1__GetString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetString*>(p->ptr), _ns1__GetString);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetString*>(p->ptr), _ns1__GetString);
		break;
	case SOAP_TYPE__ns1__GetStringResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__GetStringResponse*>(p->ptr), _ns1__GetStringResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__GetStringResponse*>(p->ptr), _ns1__GetStringResponse);
		break;
	case SOAP_TYPE__ns1__DxTestDataUpload:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__DxTestDataUpload*>(p->ptr), _ns1__DxTestDataUpload);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__DxTestDataUpload*>(p->ptr), _ns1__DxTestDataUpload);
		break;
	case SOAP_TYPE__ns1__DxTestDataUploadResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__DxTestDataUploadResponse*>(p->ptr), _ns1__DxTestDataUploadResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__DxTestDataUploadResponse*>(p->ptr), _ns1__DxTestDataUploadResponse);
		break;
	case SOAP_TYPE__ns1__Device_USCOREParameters:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__Device_USCOREParameters*>(p->ptr), _ns1__Device_USCOREParameters);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__Device_USCOREParameters*>(p->ptr), _ns1__Device_USCOREParameters);
		break;
	case SOAP_TYPE__ns1__Device_USCOREParametersResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__Device_USCOREParametersResponse*>(p->ptr), _ns1__Device_USCOREParametersResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__Device_USCOREParametersResponse*>(p->ptr), _ns1__Device_USCOREParametersResponse);
		break;
	case SOAP_TYPE__ns1__DSDataCreateJSON:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__DSDataCreateJSON*>(p->ptr), _ns1__DSDataCreateJSON);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__DSDataCreateJSON*>(p->ptr), _ns1__DSDataCreateJSON);
		break;
	case SOAP_TYPE__ns1__DSDataCreateJSONResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__DSDataCreateJSONResponse*>(p->ptr), _ns1__DSDataCreateJSONResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__DSDataCreateJSONResponse*>(p->ptr), _ns1__DSDataCreateJSONResponse);
		break;
	case SOAP_TYPE__ns1__DxDataUploadJson:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__DxDataUploadJson*>(p->ptr), _ns1__DxDataUploadJson);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__DxDataUploadJson*>(p->ptr), _ns1__DxDataUploadJson);
		break;
	case SOAP_TYPE__ns1__DxDataUploadJsonResponse:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<_ns1__DxDataUploadJsonResponse*>(p->ptr), _ns1__DxDataUploadJsonResponse);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<_ns1__DxDataUploadJsonResponse*>(p->ptr), _ns1__DxDataUploadJsonResponse);
		break;
	case SOAP_TYPE___ns1__GetString:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__GetString*>(p->ptr), struct __ns1__GetString);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__GetString*>(p->ptr), struct __ns1__GetString);
		break;
	case SOAP_TYPE___ns1__DxTestDataUpload:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__DxTestDataUpload*>(p->ptr), struct __ns1__DxTestDataUpload);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__DxTestDataUpload*>(p->ptr), struct __ns1__DxTestDataUpload);
		break;
	case SOAP_TYPE___ns1__Device_USCOREParameters:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__Device_USCOREParameters*>(p->ptr), struct __ns1__Device_USCOREParameters);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__Device_USCOREParameters*>(p->ptr), struct __ns1__Device_USCOREParameters);
		break;
	case SOAP_TYPE___ns1__DSDataCreateJSON:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__DSDataCreateJSON*>(p->ptr), struct __ns1__DSDataCreateJSON);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__DSDataCreateJSON*>(p->ptr), struct __ns1__DSDataCreateJSON);
		break;
	case SOAP_TYPE___ns1__DxDataUploadJson:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__DxDataUploadJson*>(p->ptr), struct __ns1__DxDataUploadJson);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__DxDataUploadJson*>(p->ptr), struct __ns1__DxDataUploadJson);
		break;
	case SOAP_TYPE___ns1__GetString_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__GetString_*>(p->ptr), struct __ns1__GetString_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__GetString_*>(p->ptr), struct __ns1__GetString_);
		break;
	case SOAP_TYPE___ns1__DxTestDataUpload_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__DxTestDataUpload_*>(p->ptr), struct __ns1__DxTestDataUpload_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__DxTestDataUpload_*>(p->ptr), struct __ns1__DxTestDataUpload_);
		break;
	case SOAP_TYPE___ns1__Device_USCOREParameters_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__Device_USCOREParameters_*>(p->ptr), struct __ns1__Device_USCOREParameters_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__Device_USCOREParameters_*>(p->ptr), struct __ns1__Device_USCOREParameters_);
		break;
	case SOAP_TYPE___ns1__DSDataCreateJSON_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__DSDataCreateJSON_*>(p->ptr), struct __ns1__DSDataCreateJSON_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__DSDataCreateJSON_*>(p->ptr), struct __ns1__DSDataCreateJSON_);
		break;
	case SOAP_TYPE___ns1__DxDataUploadJson_:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct __ns1__DxDataUploadJson_*>(p->ptr), struct __ns1__DxDataUploadJson_);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct __ns1__DxDataUploadJson_*>(p->ptr), struct __ns1__DxDataUploadJson_);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Header*>(p->ptr), struct SOAP_ENV__Header);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Code*>(p->ptr), struct SOAP_ENV__Code);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Detail*>(p->ptr), struct SOAP_ENV__Detail);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Reason*>(p->ptr), struct SOAP_ENV__Reason);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		else
			SOAP_DELETE_ARRAY(soap, static_cast<struct SOAP_ENV__Fault*>(p->ptr), struct SOAP_ENV__Fault);
		break;
#endif
	default:
		return SOAP_ERR;
	}
	return SOAP_OK;
}

#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int t, int b)
{
	(void)t; (void)b; /* appease -Wall -Werror */
	return 0;
}
#ifdef WIN32
#pragma warning(pop)
#endif

#ifndef WITH_NOIDREF
#ifdef WIN32
#pragma warning(push)
// do not warn on switch w/o cases
#pragma warning(disable:4065)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap *soap, int t, int tt, void *p, size_t index, const void *q, void **x)
{
	(void)soap; (void)t; (void)p; (void)index; (void)q; (void)x; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__string:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy std::string type=%d location=%p object=%p\n", t, p, q));
		*(std::string*)p = *(std::string*)q;
		break;
	case SOAP_TYPE__ns1__GetString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetString type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetString*)p = *(_ns1__GetString*)q;
		break;
	case SOAP_TYPE__ns1__GetStringResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__GetStringResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__GetStringResponse*)p = *(_ns1__GetStringResponse*)q;
		break;
	case SOAP_TYPE__ns1__DxTestDataUpload:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__DxTestDataUpload type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__DxTestDataUpload*)p = *(_ns1__DxTestDataUpload*)q;
		break;
	case SOAP_TYPE__ns1__DxTestDataUploadResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__DxTestDataUploadResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__DxTestDataUploadResponse*)p = *(_ns1__DxTestDataUploadResponse*)q;
		break;
	case SOAP_TYPE__ns1__Device_USCOREParameters:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__Device_USCOREParameters type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__Device_USCOREParameters*)p = *(_ns1__Device_USCOREParameters*)q;
		break;
	case SOAP_TYPE__ns1__Device_USCOREParametersResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__Device_USCOREParametersResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__Device_USCOREParametersResponse*)p = *(_ns1__Device_USCOREParametersResponse*)q;
		break;
	case SOAP_TYPE__ns1__DSDataCreateJSON:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__DSDataCreateJSON type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__DSDataCreateJSON*)p = *(_ns1__DSDataCreateJSON*)q;
		break;
	case SOAP_TYPE__ns1__DSDataCreateJSONResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__DSDataCreateJSONResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__DSDataCreateJSONResponse*)p = *(_ns1__DSDataCreateJSONResponse*)q;
		break;
	case SOAP_TYPE__ns1__DxDataUploadJson:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__DxDataUploadJson type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__DxDataUploadJson*)p = *(_ns1__DxDataUploadJson*)q;
		break;
	case SOAP_TYPE__ns1__DxDataUploadJsonResponse:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy _ns1__DxDataUploadJsonResponse type=%d location=%p object=%p\n", t, p, q));
		*(_ns1__DxDataUploadJsonResponse*)p = *(_ns1__DxDataUploadJsonResponse*)q;
		break;
	case SOAP_TYPE___ns1__GetString:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__GetString type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__GetString*)p = *(struct __ns1__GetString*)q;
		break;
	case SOAP_TYPE___ns1__DxTestDataUpload:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__DxTestDataUpload type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__DxTestDataUpload*)p = *(struct __ns1__DxTestDataUpload*)q;
		break;
	case SOAP_TYPE___ns1__Device_USCOREParameters:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__Device_USCOREParameters type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__Device_USCOREParameters*)p = *(struct __ns1__Device_USCOREParameters*)q;
		break;
	case SOAP_TYPE___ns1__DSDataCreateJSON:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__DSDataCreateJSON type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__DSDataCreateJSON*)p = *(struct __ns1__DSDataCreateJSON*)q;
		break;
	case SOAP_TYPE___ns1__DxDataUploadJson:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__DxDataUploadJson type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__DxDataUploadJson*)p = *(struct __ns1__DxDataUploadJson*)q;
		break;
	case SOAP_TYPE___ns1__GetString_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__GetString_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__GetString_*)p = *(struct __ns1__GetString_*)q;
		break;
	case SOAP_TYPE___ns1__DxTestDataUpload_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__DxTestDataUpload_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__DxTestDataUpload_*)p = *(struct __ns1__DxTestDataUpload_*)q;
		break;
	case SOAP_TYPE___ns1__Device_USCOREParameters_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__Device_USCOREParameters_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__Device_USCOREParameters_*)p = *(struct __ns1__Device_USCOREParameters_*)q;
		break;
	case SOAP_TYPE___ns1__DSDataCreateJSON_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__DSDataCreateJSON_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__DSDataCreateJSON_*)p = *(struct __ns1__DSDataCreateJSON_*)q;
		break;
	case SOAP_TYPE___ns1__DxDataUploadJson_:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct __ns1__DxDataUploadJson_ type=%d location=%p object=%p\n", t, p, q));
		*(struct __ns1__DxDataUploadJson_*)p = *(struct __ns1__DxDataUploadJson_*)q;
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Header type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Code type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Detail type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Reason type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copy struct SOAP_ENV__Fault type=%d location=%p object=%p\n", t, p, q));
		*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
		break;
#endif
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", t, tt));
	}
}
#ifdef WIN32
#pragma warning(pop)
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{
	a = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return a;
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n)
{
	char *a = static_cast<char *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char)));
	for (char *p = a; p && n--; ++p)
		soap_default_byte(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	if (soap_out_byte(soap, tag ? tag : "byte", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{
	a = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return a;
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n)
{
	int *a = static_cast<int *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(int)));
	for (int *p = a; p && n--; ++p)
		soap_default_int(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	if (soap_out_int(soap, tag ? tag : "int", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && *soap->href != '#')
	{	char *t;
		s = (std::string*)soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1, NULL)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType, soap_instantiate, soap_fbase), 0, SOAP_TYPE_std__string, SOAP_TYPE_std__string, sizeof(std::string), 0, soap_finsert, NULL);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	std::string *p;
	size_t k = sizeof(std::string);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, std::string);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, std::string, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated std::string location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	if (soap_out_std__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__DxDataUploadJsonResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DxDataUploadJsonResponse::DxDataUploadJsonResult = NULL;
	/* transient soap skipped */
}

void _ns1__DxDataUploadJsonResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxDataUploadJsonResponse::DxDataUploadJsonResult);
#endif
}

int _ns1__DxDataUploadJsonResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DxDataUploadJsonResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DxDataUploadJsonResponse(struct soap *soap, const char *tag, int id, const _ns1__DxDataUploadJsonResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DxDataUploadJsonResponse), type))
		return soap->error;
	if (a->DxDataUploadJsonResult)
		soap_element_result(soap, "ns1:DxDataUploadJsonResult");
	if (soap_out_PointerTostd__string(soap, "ns1:DxDataUploadJsonResult", -1, &a->_ns1__DxDataUploadJsonResponse::DxDataUploadJsonResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__DxDataUploadJsonResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__DxDataUploadJsonResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DxDataUploadJsonResponse * SOAP_FMAC4 soap_in__ns1__DxDataUploadJsonResponse(struct soap *soap, const char *tag, _ns1__DxDataUploadJsonResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DxDataUploadJsonResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DxDataUploadJsonResponse, sizeof(_ns1__DxDataUploadJsonResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__DxDataUploadJsonResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__DxDataUploadJsonResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_DxDataUploadJsonResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DxDataUploadJsonResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:DxDataUploadJsonResult", &a->_ns1__DxDataUploadJsonResponse::DxDataUploadJsonResult, "xsd:string"))
				{	soap_flag_DxDataUploadJsonResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:DxDataUploadJsonResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DxDataUploadJsonResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DxDataUploadJsonResponse, SOAP_TYPE__ns1__DxDataUploadJsonResponse, sizeof(_ns1__DxDataUploadJsonResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__DxDataUploadJsonResponse * SOAP_FMAC2 soap_instantiate__ns1__DxDataUploadJsonResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DxDataUploadJsonResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__DxDataUploadJsonResponse *p;
	size_t k = sizeof(_ns1__DxDataUploadJsonResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__DxDataUploadJsonResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__DxDataUploadJsonResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__DxDataUploadJsonResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__DxDataUploadJsonResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__DxDataUploadJsonResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__DxDataUploadJsonResponse(soap, tag ? tag : "ns1:DxDataUploadJsonResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DxDataUploadJsonResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DxDataUploadJsonResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DxDataUploadJsonResponse * SOAP_FMAC4 soap_get__ns1__DxDataUploadJsonResponse(struct soap *soap, _ns1__DxDataUploadJsonResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DxDataUploadJsonResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__DxDataUploadJson::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DxDataUploadJson::jsonText = NULL;
	/* transient soap skipped */
}

void _ns1__DxDataUploadJson::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxDataUploadJson::jsonText);
#endif
}

int _ns1__DxDataUploadJson::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DxDataUploadJson(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DxDataUploadJson(struct soap *soap, const char *tag, int id, const _ns1__DxDataUploadJson *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DxDataUploadJson), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:jsonText", -1, &a->_ns1__DxDataUploadJson::jsonText, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__DxDataUploadJson::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__DxDataUploadJson(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DxDataUploadJson * SOAP_FMAC4 soap_in__ns1__DxDataUploadJson(struct soap *soap, const char *tag, _ns1__DxDataUploadJson *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DxDataUploadJson*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DxDataUploadJson, sizeof(_ns1__DxDataUploadJson), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__DxDataUploadJson)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__DxDataUploadJson *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_jsonText1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_jsonText1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:jsonText", &a->_ns1__DxDataUploadJson::jsonText, "xsd:string"))
				{	soap_flag_jsonText1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DxDataUploadJson *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DxDataUploadJson, SOAP_TYPE__ns1__DxDataUploadJson, sizeof(_ns1__DxDataUploadJson), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__DxDataUploadJson * SOAP_FMAC2 soap_instantiate__ns1__DxDataUploadJson(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DxDataUploadJson(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__DxDataUploadJson *p;
	size_t k = sizeof(_ns1__DxDataUploadJson);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__DxDataUploadJson, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__DxDataUploadJson);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__DxDataUploadJson, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__DxDataUploadJson location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__DxDataUploadJson::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__DxDataUploadJson(soap, tag ? tag : "ns1:DxDataUploadJson", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DxDataUploadJson::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DxDataUploadJson(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DxDataUploadJson * SOAP_FMAC4 soap_get__ns1__DxDataUploadJson(struct soap *soap, _ns1__DxDataUploadJson *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DxDataUploadJson(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__DSDataCreateJSONResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DSDataCreateJSONResponse::DSDataCreateJSONResult = NULL;
	/* transient soap skipped */
}

void _ns1__DSDataCreateJSONResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSONResponse::DSDataCreateJSONResult);
#endif
}

int _ns1__DSDataCreateJSONResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DSDataCreateJSONResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DSDataCreateJSONResponse(struct soap *soap, const char *tag, int id, const _ns1__DSDataCreateJSONResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DSDataCreateJSONResponse), type))
		return soap->error;
	if (a->DSDataCreateJSONResult)
		soap_element_result(soap, "ns1:DSDataCreateJSONResult");
	if (soap_out_PointerTostd__string(soap, "ns1:DSDataCreateJSONResult", -1, &a->_ns1__DSDataCreateJSONResponse::DSDataCreateJSONResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__DSDataCreateJSONResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__DSDataCreateJSONResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DSDataCreateJSONResponse * SOAP_FMAC4 soap_in__ns1__DSDataCreateJSONResponse(struct soap *soap, const char *tag, _ns1__DSDataCreateJSONResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DSDataCreateJSONResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DSDataCreateJSONResponse, sizeof(_ns1__DSDataCreateJSONResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__DSDataCreateJSONResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__DSDataCreateJSONResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_DSDataCreateJSONResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DSDataCreateJSONResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:DSDataCreateJSONResult", &a->_ns1__DSDataCreateJSONResponse::DSDataCreateJSONResult, "xsd:string"))
				{	soap_flag_DSDataCreateJSONResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:DSDataCreateJSONResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DSDataCreateJSONResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DSDataCreateJSONResponse, SOAP_TYPE__ns1__DSDataCreateJSONResponse, sizeof(_ns1__DSDataCreateJSONResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__DSDataCreateJSONResponse * SOAP_FMAC2 soap_instantiate__ns1__DSDataCreateJSONResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DSDataCreateJSONResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__DSDataCreateJSONResponse *p;
	size_t k = sizeof(_ns1__DSDataCreateJSONResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__DSDataCreateJSONResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__DSDataCreateJSONResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__DSDataCreateJSONResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__DSDataCreateJSONResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__DSDataCreateJSONResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__DSDataCreateJSONResponse(soap, tag ? tag : "ns1:DSDataCreateJSONResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DSDataCreateJSONResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DSDataCreateJSONResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DSDataCreateJSONResponse * SOAP_FMAC4 soap_get__ns1__DSDataCreateJSONResponse(struct soap *soap, _ns1__DSDataCreateJSONResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DSDataCreateJSONResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__DSDataCreateJSON::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__DSDataCreateJSON::M_USCOREFLAG);
	this->_ns1__DSDataCreateJSON::M_USCOREDEVICE_USCORESN = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREWORKSTATION_USCORESN = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREEMP_USCORENO = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREAREA = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREMO = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREMODEL = NULL;
	this->_ns1__DSDataCreateJSON::M_USCORECONTAINER_USCORESN = NULL;
	this->_ns1__DSDataCreateJSON::M_USCORESN = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREUNION_USCORESN = NULL;
	this->_ns1__DSDataCreateJSON::M_USCORELEVEL = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREEC_USCOREFLAG = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREITEMVALUE = NULL;
	this->_ns1__DSDataCreateJSON::M_USCORETEST_USCORETIME = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREDECRIPTION = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREROUTE = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREGROUP = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORECODE = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORELEVEL = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORESTATUS = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREITEM_USCORETYPE = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREPOLAR = NULL;
	this->_ns1__DSDataCreateJSON::CONTROL_USCORETYPE = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREMARK1 = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREMARK2 = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREMARK3 = NULL;
	this->_ns1__DSDataCreateJSON::M_USCOREMARK4 = NULL;
	/* transient soap skipped */
}

void _ns1__DSDataCreateJSON::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREDEVICE_USCORESN);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREWORKSTATION_USCORESN);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREEMP_USCORENO);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREAREA);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREMO);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREMODEL);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCORECONTAINER_USCORESN);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCORESN);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREUNION_USCORESN);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCORELEVEL);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREEC_USCOREFLAG);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREITEMVALUE);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCORETEST_USCORETIME);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREDECRIPTION);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREROUTE);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREGROUP);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORECODE);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORELEVEL);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORESTATUS);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREITEM_USCORETYPE);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREPOLAR);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::CONTROL_USCORETYPE);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREMARK1);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREMARK2);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREMARK3);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DSDataCreateJSON::M_USCOREMARK4);
#endif
}

int _ns1__DSDataCreateJSON::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DSDataCreateJSON(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DSDataCreateJSON(struct soap *soap, const char *tag, int id, const _ns1__DSDataCreateJSON *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DSDataCreateJSON), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:M_FLAG", -1, &a->_ns1__DSDataCreateJSON::M_USCOREFLAG, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_DEVICE_SN", -1, &a->_ns1__DSDataCreateJSON::M_USCOREDEVICE_USCORESN, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_WORKSTATION_SN", -1, &a->_ns1__DSDataCreateJSON::M_USCOREWORKSTATION_USCORESN, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_EMP_NO", -1, &a->_ns1__DSDataCreateJSON::M_USCOREEMP_USCORENO, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_AREA", -1, &a->_ns1__DSDataCreateJSON::M_USCOREAREA, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_MO", -1, &a->_ns1__DSDataCreateJSON::M_USCOREMO, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_MODEL", -1, &a->_ns1__DSDataCreateJSON::M_USCOREMODEL, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_CONTAINER_SN", -1, &a->_ns1__DSDataCreateJSON::M_USCORECONTAINER_USCORESN, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_SN", -1, &a->_ns1__DSDataCreateJSON::M_USCORESN, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_UNION_SN", -1, &a->_ns1__DSDataCreateJSON::M_USCOREUNION_USCORESN, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_LEVEL", -1, &a->_ns1__DSDataCreateJSON::M_USCORELEVEL, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_EC_FLAG", -1, &a->_ns1__DSDataCreateJSON::M_USCOREEC_USCOREFLAG, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_ITEMVALUE", -1, &a->_ns1__DSDataCreateJSON::M_USCOREITEMVALUE, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_TEST_TIME", -1, &a->_ns1__DSDataCreateJSON::M_USCORETEST_USCORETIME, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_DECRIPTION", -1, &a->_ns1__DSDataCreateJSON::M_USCOREDECRIPTION, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_ROUTE", -1, &a->_ns1__DSDataCreateJSON::M_USCOREROUTE, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_GROUP", -1, &a->_ns1__DSDataCreateJSON::M_USCOREGROUP, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_ERROR_CODE", -1, &a->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORECODE, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_ERROR_LEVEL", -1, &a->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORELEVEL, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_ERROR_STATUS", -1, &a->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORESTATUS, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_ITEM_TYPE", -1, &a->_ns1__DSDataCreateJSON::M_USCOREITEM_USCORETYPE, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_POLAR", -1, &a->_ns1__DSDataCreateJSON::M_USCOREPOLAR, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:CONTROL_TYPE", -1, &a->_ns1__DSDataCreateJSON::CONTROL_USCORETYPE, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_MARK1", -1, &a->_ns1__DSDataCreateJSON::M_USCOREMARK1, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_MARK2", -1, &a->_ns1__DSDataCreateJSON::M_USCOREMARK2, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_MARK3", -1, &a->_ns1__DSDataCreateJSON::M_USCOREMARK3, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_MARK4", -1, &a->_ns1__DSDataCreateJSON::M_USCOREMARK4, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__DSDataCreateJSON::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__DSDataCreateJSON(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DSDataCreateJSON * SOAP_FMAC4 soap_in__ns1__DSDataCreateJSON(struct soap *soap, const char *tag, _ns1__DSDataCreateJSON *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DSDataCreateJSON*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DSDataCreateJSON, sizeof(_ns1__DSDataCreateJSON), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__DSDataCreateJSON)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__DSDataCreateJSON *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_M_USCOREFLAG1 = 1;
	size_t soap_flag_M_USCOREDEVICE_USCORESN1 = 1;
	size_t soap_flag_M_USCOREWORKSTATION_USCORESN1 = 1;
	size_t soap_flag_M_USCOREEMP_USCORENO1 = 1;
	size_t soap_flag_M_USCOREAREA1 = 1;
	size_t soap_flag_M_USCOREMO1 = 1;
	size_t soap_flag_M_USCOREMODEL1 = 1;
	size_t soap_flag_M_USCORECONTAINER_USCORESN1 = 1;
	size_t soap_flag_M_USCORESN1 = 1;
	size_t soap_flag_M_USCOREUNION_USCORESN1 = 1;
	size_t soap_flag_M_USCORELEVEL1 = 1;
	size_t soap_flag_M_USCOREEC_USCOREFLAG1 = 1;
	size_t soap_flag_M_USCOREITEMVALUE1 = 1;
	size_t soap_flag_M_USCORETEST_USCORETIME1 = 1;
	size_t soap_flag_M_USCOREDECRIPTION1 = 1;
	size_t soap_flag_M_USCOREROUTE1 = 1;
	size_t soap_flag_M_USCOREGROUP1 = 1;
	size_t soap_flag_M_USCOREERROR_USCORECODE1 = 1;
	size_t soap_flag_M_USCOREERROR_USCORELEVEL1 = 1;
	size_t soap_flag_M_USCOREERROR_USCORESTATUS1 = 1;
	size_t soap_flag_M_USCOREITEM_USCORETYPE1 = 1;
	size_t soap_flag_M_USCOREPOLAR1 = 1;
	size_t soap_flag_CONTROL_USCORETYPE1 = 1;
	size_t soap_flag_M_USCOREMARK11 = 1;
	size_t soap_flag_M_USCOREMARK21 = 1;
	size_t soap_flag_M_USCOREMARK31 = 1;
	size_t soap_flag_M_USCOREMARK41 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_M_USCOREFLAG1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "ns1:M_FLAG", &a->_ns1__DSDataCreateJSON::M_USCOREFLAG, "xsd:int"))
				{	soap_flag_M_USCOREFLAG1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREDEVICE_USCORESN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_DEVICE_SN", &a->_ns1__DSDataCreateJSON::M_USCOREDEVICE_USCORESN, "xsd:string"))
				{	soap_flag_M_USCOREDEVICE_USCORESN1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREWORKSTATION_USCORESN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_WORKSTATION_SN", &a->_ns1__DSDataCreateJSON::M_USCOREWORKSTATION_USCORESN, "xsd:string"))
				{	soap_flag_M_USCOREWORKSTATION_USCORESN1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREEMP_USCORENO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_EMP_NO", &a->_ns1__DSDataCreateJSON::M_USCOREEMP_USCORENO, "xsd:string"))
				{	soap_flag_M_USCOREEMP_USCORENO1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREAREA1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_AREA", &a->_ns1__DSDataCreateJSON::M_USCOREAREA, "xsd:string"))
				{	soap_flag_M_USCOREAREA1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREMO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_MO", &a->_ns1__DSDataCreateJSON::M_USCOREMO, "xsd:string"))
				{	soap_flag_M_USCOREMO1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREMODEL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_MODEL", &a->_ns1__DSDataCreateJSON::M_USCOREMODEL, "xsd:string"))
				{	soap_flag_M_USCOREMODEL1--;
					continue;
				}
			}
			if (soap_flag_M_USCORECONTAINER_USCORESN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_CONTAINER_SN", &a->_ns1__DSDataCreateJSON::M_USCORECONTAINER_USCORESN, "xsd:string"))
				{	soap_flag_M_USCORECONTAINER_USCORESN1--;
					continue;
				}
			}
			if (soap_flag_M_USCORESN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_SN", &a->_ns1__DSDataCreateJSON::M_USCORESN, "xsd:string"))
				{	soap_flag_M_USCORESN1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREUNION_USCORESN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_UNION_SN", &a->_ns1__DSDataCreateJSON::M_USCOREUNION_USCORESN, "xsd:string"))
				{	soap_flag_M_USCOREUNION_USCORESN1--;
					continue;
				}
			}
			if (soap_flag_M_USCORELEVEL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_LEVEL", &a->_ns1__DSDataCreateJSON::M_USCORELEVEL, "xsd:string"))
				{	soap_flag_M_USCORELEVEL1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREEC_USCOREFLAG1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_EC_FLAG", &a->_ns1__DSDataCreateJSON::M_USCOREEC_USCOREFLAG, "xsd:string"))
				{	soap_flag_M_USCOREEC_USCOREFLAG1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREITEMVALUE1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_ITEMVALUE", &a->_ns1__DSDataCreateJSON::M_USCOREITEMVALUE, "xsd:string"))
				{	soap_flag_M_USCOREITEMVALUE1--;
					continue;
				}
			}
			if (soap_flag_M_USCORETEST_USCORETIME1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_TEST_TIME", &a->_ns1__DSDataCreateJSON::M_USCORETEST_USCORETIME, "xsd:string"))
				{	soap_flag_M_USCORETEST_USCORETIME1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREDECRIPTION1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_DECRIPTION", &a->_ns1__DSDataCreateJSON::M_USCOREDECRIPTION, "xsd:string"))
				{	soap_flag_M_USCOREDECRIPTION1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREROUTE1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_ROUTE", &a->_ns1__DSDataCreateJSON::M_USCOREROUTE, "xsd:string"))
				{	soap_flag_M_USCOREROUTE1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREGROUP1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_GROUP", &a->_ns1__DSDataCreateJSON::M_USCOREGROUP, "xsd:string"))
				{	soap_flag_M_USCOREGROUP1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREERROR_USCORECODE1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_ERROR_CODE", &a->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORECODE, "xsd:string"))
				{	soap_flag_M_USCOREERROR_USCORECODE1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREERROR_USCORELEVEL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_ERROR_LEVEL", &a->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORELEVEL, "xsd:string"))
				{	soap_flag_M_USCOREERROR_USCORELEVEL1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREERROR_USCORESTATUS1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_ERROR_STATUS", &a->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORESTATUS, "xsd:string"))
				{	soap_flag_M_USCOREERROR_USCORESTATUS1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREITEM_USCORETYPE1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_ITEM_TYPE", &a->_ns1__DSDataCreateJSON::M_USCOREITEM_USCORETYPE, "xsd:string"))
				{	soap_flag_M_USCOREITEM_USCORETYPE1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREPOLAR1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_POLAR", &a->_ns1__DSDataCreateJSON::M_USCOREPOLAR, "xsd:string"))
				{	soap_flag_M_USCOREPOLAR1--;
					continue;
				}
			}
			if (soap_flag_CONTROL_USCORETYPE1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:CONTROL_TYPE", &a->_ns1__DSDataCreateJSON::CONTROL_USCORETYPE, "xsd:string"))
				{	soap_flag_CONTROL_USCORETYPE1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREMARK11 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_MARK1", &a->_ns1__DSDataCreateJSON::M_USCOREMARK1, "xsd:string"))
				{	soap_flag_M_USCOREMARK11--;
					continue;
				}
			}
			if (soap_flag_M_USCOREMARK21 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_MARK2", &a->_ns1__DSDataCreateJSON::M_USCOREMARK2, "xsd:string"))
				{	soap_flag_M_USCOREMARK21--;
					continue;
				}
			}
			if (soap_flag_M_USCOREMARK31 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_MARK3", &a->_ns1__DSDataCreateJSON::M_USCOREMARK3, "xsd:string"))
				{	soap_flag_M_USCOREMARK31--;
					continue;
				}
			}
			if (soap_flag_M_USCOREMARK41 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_MARK4", &a->_ns1__DSDataCreateJSON::M_USCOREMARK4, "xsd:string"))
				{	soap_flag_M_USCOREMARK41--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_M_USCOREFLAG1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__DSDataCreateJSON *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DSDataCreateJSON, SOAP_TYPE__ns1__DSDataCreateJSON, sizeof(_ns1__DSDataCreateJSON), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__DSDataCreateJSON * SOAP_FMAC2 soap_instantiate__ns1__DSDataCreateJSON(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DSDataCreateJSON(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__DSDataCreateJSON *p;
	size_t k = sizeof(_ns1__DSDataCreateJSON);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__DSDataCreateJSON, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__DSDataCreateJSON);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__DSDataCreateJSON, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__DSDataCreateJSON location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__DSDataCreateJSON::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__DSDataCreateJSON(soap, tag ? tag : "ns1:DSDataCreateJSON", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DSDataCreateJSON::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DSDataCreateJSON(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DSDataCreateJSON * SOAP_FMAC4 soap_get__ns1__DSDataCreateJSON(struct soap *soap, _ns1__DSDataCreateJSON *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DSDataCreateJSON(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__Device_USCOREParametersResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Device_USCOREParametersResponse::Device_USCOREParametersResult = NULL;
	/* transient soap skipped */
}

void _ns1__Device_USCOREParametersResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Device_USCOREParametersResponse::Device_USCOREParametersResult);
#endif
}

int _ns1__Device_USCOREParametersResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Device_USCOREParametersResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Device_USCOREParametersResponse(struct soap *soap, const char *tag, int id, const _ns1__Device_USCOREParametersResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Device_USCOREParametersResponse), type))
		return soap->error;
	if (a->Device_USCOREParametersResult)
		soap_element_result(soap, "ns1:Device_ParametersResult");
	if (soap_out_PointerTostd__string(soap, "ns1:Device_ParametersResult", -1, &a->_ns1__Device_USCOREParametersResponse::Device_USCOREParametersResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__Device_USCOREParametersResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__Device_USCOREParametersResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Device_USCOREParametersResponse * SOAP_FMAC4 soap_in__ns1__Device_USCOREParametersResponse(struct soap *soap, const char *tag, _ns1__Device_USCOREParametersResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Device_USCOREParametersResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Device_USCOREParametersResponse, sizeof(_ns1__Device_USCOREParametersResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__Device_USCOREParametersResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__Device_USCOREParametersResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_Device_USCOREParametersResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_Device_USCOREParametersResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:Device_ParametersResult", &a->_ns1__Device_USCOREParametersResponse::Device_USCOREParametersResult, "xsd:string"))
				{	soap_flag_Device_USCOREParametersResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:Device_ParametersResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Device_USCOREParametersResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Device_USCOREParametersResponse, SOAP_TYPE__ns1__Device_USCOREParametersResponse, sizeof(_ns1__Device_USCOREParametersResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__Device_USCOREParametersResponse * SOAP_FMAC2 soap_instantiate__ns1__Device_USCOREParametersResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Device_USCOREParametersResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__Device_USCOREParametersResponse *p;
	size_t k = sizeof(_ns1__Device_USCOREParametersResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__Device_USCOREParametersResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__Device_USCOREParametersResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__Device_USCOREParametersResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__Device_USCOREParametersResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__Device_USCOREParametersResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__Device_USCOREParametersResponse(soap, tag ? tag : "ns1:Device_ParametersResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Device_USCOREParametersResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Device_USCOREParametersResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Device_USCOREParametersResponse * SOAP_FMAC4 soap_get__ns1__Device_USCOREParametersResponse(struct soap *soap, _ns1__Device_USCOREParametersResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Device_USCOREParametersResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__Device_USCOREParameters::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__Device_USCOREParameters::M_USCOREDEVICE_USCORESN = NULL;
	this->_ns1__Device_USCOREParameters::M_USCOREEMP_USCORENO = NULL;
	this->_ns1__Device_USCOREParameters::M_USCOREMO = NULL;
	this->_ns1__Device_USCOREParameters::M_USCOREITEM_USCOREVALUE = NULL;
	this->_ns1__Device_USCOREParameters::M_USCOREY_USCOREN = NULL;
	this->_ns1__Device_USCOREParameters::M_USCOREPROCDUCE_USCORETIME = NULL;
	/* transient soap skipped */
}

void _ns1__Device_USCOREParameters::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Device_USCOREParameters::M_USCOREDEVICE_USCORESN);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Device_USCOREParameters::M_USCOREEMP_USCORENO);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Device_USCOREParameters::M_USCOREMO);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Device_USCOREParameters::M_USCOREITEM_USCOREVALUE);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Device_USCOREParameters::M_USCOREY_USCOREN);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__Device_USCOREParameters::M_USCOREPROCDUCE_USCORETIME);
#endif
}

int _ns1__Device_USCOREParameters::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__Device_USCOREParameters(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Device_USCOREParameters(struct soap *soap, const char *tag, int id, const _ns1__Device_USCOREParameters *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__Device_USCOREParameters), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_DEVICE_SN", -1, &a->_ns1__Device_USCOREParameters::M_USCOREDEVICE_USCORESN, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_EMP_NO", -1, &a->_ns1__Device_USCOREParameters::M_USCOREEMP_USCORENO, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_MO", -1, &a->_ns1__Device_USCOREParameters::M_USCOREMO, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_ITEM_VALUE", -1, &a->_ns1__Device_USCOREParameters::M_USCOREITEM_USCOREVALUE, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_Y_N", -1, &a->_ns1__Device_USCOREParameters::M_USCOREY_USCOREN, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_PROCDUCE_TIME", -1, &a->_ns1__Device_USCOREParameters::M_USCOREPROCDUCE_USCORETIME, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__Device_USCOREParameters::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__Device_USCOREParameters(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__Device_USCOREParameters * SOAP_FMAC4 soap_in__ns1__Device_USCOREParameters(struct soap *soap, const char *tag, _ns1__Device_USCOREParameters *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__Device_USCOREParameters*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__Device_USCOREParameters, sizeof(_ns1__Device_USCOREParameters), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__Device_USCOREParameters)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__Device_USCOREParameters *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_M_USCOREDEVICE_USCORESN1 = 1;
	size_t soap_flag_M_USCOREEMP_USCORENO1 = 1;
	size_t soap_flag_M_USCOREMO1 = 1;
	size_t soap_flag_M_USCOREITEM_USCOREVALUE1 = 1;
	size_t soap_flag_M_USCOREY_USCOREN1 = 1;
	size_t soap_flag_M_USCOREPROCDUCE_USCORETIME1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_M_USCOREDEVICE_USCORESN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_DEVICE_SN", &a->_ns1__Device_USCOREParameters::M_USCOREDEVICE_USCORESN, "xsd:string"))
				{	soap_flag_M_USCOREDEVICE_USCORESN1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREEMP_USCORENO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_EMP_NO", &a->_ns1__Device_USCOREParameters::M_USCOREEMP_USCORENO, "xsd:string"))
				{	soap_flag_M_USCOREEMP_USCORENO1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREMO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_MO", &a->_ns1__Device_USCOREParameters::M_USCOREMO, "xsd:string"))
				{	soap_flag_M_USCOREMO1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREITEM_USCOREVALUE1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_ITEM_VALUE", &a->_ns1__Device_USCOREParameters::M_USCOREITEM_USCOREVALUE, "xsd:string"))
				{	soap_flag_M_USCOREITEM_USCOREVALUE1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREY_USCOREN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_Y_N", &a->_ns1__Device_USCOREParameters::M_USCOREY_USCOREN, "xsd:string"))
				{	soap_flag_M_USCOREY_USCOREN1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREPROCDUCE_USCORETIME1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_PROCDUCE_TIME", &a->_ns1__Device_USCOREParameters::M_USCOREPROCDUCE_USCORETIME, "xsd:string"))
				{	soap_flag_M_USCOREPROCDUCE_USCORETIME1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__Device_USCOREParameters *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__Device_USCOREParameters, SOAP_TYPE__ns1__Device_USCOREParameters, sizeof(_ns1__Device_USCOREParameters), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__Device_USCOREParameters * SOAP_FMAC2 soap_instantiate__ns1__Device_USCOREParameters(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__Device_USCOREParameters(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__Device_USCOREParameters *p;
	size_t k = sizeof(_ns1__Device_USCOREParameters);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__Device_USCOREParameters, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__Device_USCOREParameters);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__Device_USCOREParameters, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__Device_USCOREParameters location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__Device_USCOREParameters::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__Device_USCOREParameters(soap, tag ? tag : "ns1:Device_Parameters", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__Device_USCOREParameters::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__Device_USCOREParameters(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__Device_USCOREParameters * SOAP_FMAC4 soap_get__ns1__Device_USCOREParameters(struct soap *soap, _ns1__Device_USCOREParameters *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__Device_USCOREParameters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__DxTestDataUploadResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__DxTestDataUploadResponse::DxTestDataUploadResult = NULL;
	/* transient soap skipped */
}

void _ns1__DxTestDataUploadResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUploadResponse::DxTestDataUploadResult);
#endif
}

int _ns1__DxTestDataUploadResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DxTestDataUploadResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DxTestDataUploadResponse(struct soap *soap, const char *tag, int id, const _ns1__DxTestDataUploadResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DxTestDataUploadResponse), type))
		return soap->error;
	if (a->DxTestDataUploadResult)
		soap_element_result(soap, "ns1:DxTestDataUploadResult");
	if (soap_out_PointerTostd__string(soap, "ns1:DxTestDataUploadResult", -1, &a->_ns1__DxTestDataUploadResponse::DxTestDataUploadResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__DxTestDataUploadResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__DxTestDataUploadResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DxTestDataUploadResponse * SOAP_FMAC4 soap_in__ns1__DxTestDataUploadResponse(struct soap *soap, const char *tag, _ns1__DxTestDataUploadResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DxTestDataUploadResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DxTestDataUploadResponse, sizeof(_ns1__DxTestDataUploadResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__DxTestDataUploadResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__DxTestDataUploadResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_DxTestDataUploadResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DxTestDataUploadResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:DxTestDataUploadResult", &a->_ns1__DxTestDataUploadResponse::DxTestDataUploadResult, "xsd:string"))
				{	soap_flag_DxTestDataUploadResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:DxTestDataUploadResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__DxTestDataUploadResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DxTestDataUploadResponse, SOAP_TYPE__ns1__DxTestDataUploadResponse, sizeof(_ns1__DxTestDataUploadResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__DxTestDataUploadResponse * SOAP_FMAC2 soap_instantiate__ns1__DxTestDataUploadResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DxTestDataUploadResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__DxTestDataUploadResponse *p;
	size_t k = sizeof(_ns1__DxTestDataUploadResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__DxTestDataUploadResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__DxTestDataUploadResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__DxTestDataUploadResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__DxTestDataUploadResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__DxTestDataUploadResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__DxTestDataUploadResponse(soap, tag ? tag : "ns1:DxTestDataUploadResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DxTestDataUploadResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DxTestDataUploadResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DxTestDataUploadResponse * SOAP_FMAC4 soap_get__ns1__DxTestDataUploadResponse(struct soap *soap, _ns1__DxTestDataUploadResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DxTestDataUploadResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__DxTestDataUpload::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->_ns1__DxTestDataUpload::M_USCOREFLAG);
	this->_ns1__DxTestDataUpload::M_USCOREDEVICE_USCORESN = NULL;
	this->_ns1__DxTestDataUpload::M_USCOREWORKSTATION_USCORESN = NULL;
	this->_ns1__DxTestDataUpload::M_USCOREEMP_USCORENO = NULL;
	this->_ns1__DxTestDataUpload::M_USCOREMO = NULL;
	this->_ns1__DxTestDataUpload::M_USCORECONTAINER_USCORESN = NULL;
	this->_ns1__DxTestDataUpload::M_USCORESN = NULL;
	this->_ns1__DxTestDataUpload::M_USCOREUNION_USCORESN = NULL;
	this->_ns1__DxTestDataUpload::M_USCORELEVEL = NULL;
	this->_ns1__DxTestDataUpload::M_USCOREEC_USCOREFLAG = NULL;
	this->_ns1__DxTestDataUpload::M_USCOREITEMVALUE = NULL;
	this->_ns1__DxTestDataUpload::M_USCORETEST_USCORETIME = NULL;
	this->_ns1__DxTestDataUpload::M_USCOREDECRIPTION = NULL;
	/* transient soap skipped */
}

void _ns1__DxTestDataUpload::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUpload::M_USCOREDEVICE_USCORESN);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUpload::M_USCOREWORKSTATION_USCORESN);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUpload::M_USCOREEMP_USCORENO);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUpload::M_USCOREMO);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUpload::M_USCORECONTAINER_USCORESN);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUpload::M_USCORESN);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUpload::M_USCOREUNION_USCORESN);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUpload::M_USCORELEVEL);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUpload::M_USCOREEC_USCOREFLAG);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUpload::M_USCOREITEMVALUE);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUpload::M_USCORETEST_USCORETIME);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__DxTestDataUpload::M_USCOREDECRIPTION);
#endif
}

int _ns1__DxTestDataUpload::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__DxTestDataUpload(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DxTestDataUpload(struct soap *soap, const char *tag, int id, const _ns1__DxTestDataUpload *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__DxTestDataUpload), type))
		return soap->error;
	if (soap_out_int(soap, "ns1:M_FLAG", -1, &a->_ns1__DxTestDataUpload::M_USCOREFLAG, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_DEVICE_SN", -1, &a->_ns1__DxTestDataUpload::M_USCOREDEVICE_USCORESN, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_WORKSTATION_SN", -1, &a->_ns1__DxTestDataUpload::M_USCOREWORKSTATION_USCORESN, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_EMP_NO", -1, &a->_ns1__DxTestDataUpload::M_USCOREEMP_USCORENO, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_MO", -1, &a->_ns1__DxTestDataUpload::M_USCOREMO, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_CONTAINER_SN", -1, &a->_ns1__DxTestDataUpload::M_USCORECONTAINER_USCORESN, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_SN", -1, &a->_ns1__DxTestDataUpload::M_USCORESN, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_UNION_SN", -1, &a->_ns1__DxTestDataUpload::M_USCOREUNION_USCORESN, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_LEVEL", -1, &a->_ns1__DxTestDataUpload::M_USCORELEVEL, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_EC_FLAG", -1, &a->_ns1__DxTestDataUpload::M_USCOREEC_USCOREFLAG, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_ITEMVALUE", -1, &a->_ns1__DxTestDataUpload::M_USCOREITEMVALUE, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_TEST_TIME", -1, &a->_ns1__DxTestDataUpload::M_USCORETEST_USCORETIME, ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:M_DECRIPTION", -1, &a->_ns1__DxTestDataUpload::M_USCOREDECRIPTION, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__DxTestDataUpload::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__DxTestDataUpload(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__DxTestDataUpload * SOAP_FMAC4 soap_in__ns1__DxTestDataUpload(struct soap *soap, const char *tag, _ns1__DxTestDataUpload *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__DxTestDataUpload*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__DxTestDataUpload, sizeof(_ns1__DxTestDataUpload), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__DxTestDataUpload)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__DxTestDataUpload *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_M_USCOREFLAG1 = 1;
	size_t soap_flag_M_USCOREDEVICE_USCORESN1 = 1;
	size_t soap_flag_M_USCOREWORKSTATION_USCORESN1 = 1;
	size_t soap_flag_M_USCOREEMP_USCORENO1 = 1;
	size_t soap_flag_M_USCOREMO1 = 1;
	size_t soap_flag_M_USCORECONTAINER_USCORESN1 = 1;
	size_t soap_flag_M_USCORESN1 = 1;
	size_t soap_flag_M_USCOREUNION_USCORESN1 = 1;
	size_t soap_flag_M_USCORELEVEL1 = 1;
	size_t soap_flag_M_USCOREEC_USCOREFLAG1 = 1;
	size_t soap_flag_M_USCOREITEMVALUE1 = 1;
	size_t soap_flag_M_USCORETEST_USCORETIME1 = 1;
	size_t soap_flag_M_USCOREDECRIPTION1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_M_USCOREFLAG1 && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_int(soap, "ns1:M_FLAG", &a->_ns1__DxTestDataUpload::M_USCOREFLAG, "xsd:int"))
				{	soap_flag_M_USCOREFLAG1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREDEVICE_USCORESN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_DEVICE_SN", &a->_ns1__DxTestDataUpload::M_USCOREDEVICE_USCORESN, "xsd:string"))
				{	soap_flag_M_USCOREDEVICE_USCORESN1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREWORKSTATION_USCORESN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_WORKSTATION_SN", &a->_ns1__DxTestDataUpload::M_USCOREWORKSTATION_USCORESN, "xsd:string"))
				{	soap_flag_M_USCOREWORKSTATION_USCORESN1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREEMP_USCORENO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_EMP_NO", &a->_ns1__DxTestDataUpload::M_USCOREEMP_USCORENO, "xsd:string"))
				{	soap_flag_M_USCOREEMP_USCORENO1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREMO1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_MO", &a->_ns1__DxTestDataUpload::M_USCOREMO, "xsd:string"))
				{	soap_flag_M_USCOREMO1--;
					continue;
				}
			}
			if (soap_flag_M_USCORECONTAINER_USCORESN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_CONTAINER_SN", &a->_ns1__DxTestDataUpload::M_USCORECONTAINER_USCORESN, "xsd:string"))
				{	soap_flag_M_USCORECONTAINER_USCORESN1--;
					continue;
				}
			}
			if (soap_flag_M_USCORESN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_SN", &a->_ns1__DxTestDataUpload::M_USCORESN, "xsd:string"))
				{	soap_flag_M_USCORESN1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREUNION_USCORESN1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_UNION_SN", &a->_ns1__DxTestDataUpload::M_USCOREUNION_USCORESN, "xsd:string"))
				{	soap_flag_M_USCOREUNION_USCORESN1--;
					continue;
				}
			}
			if (soap_flag_M_USCORELEVEL1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_LEVEL", &a->_ns1__DxTestDataUpload::M_USCORELEVEL, "xsd:string"))
				{	soap_flag_M_USCORELEVEL1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREEC_USCOREFLAG1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_EC_FLAG", &a->_ns1__DxTestDataUpload::M_USCOREEC_USCOREFLAG, "xsd:string"))
				{	soap_flag_M_USCOREEC_USCOREFLAG1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREITEMVALUE1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_ITEMVALUE", &a->_ns1__DxTestDataUpload::M_USCOREITEMVALUE, "xsd:string"))
				{	soap_flag_M_USCOREITEMVALUE1--;
					continue;
				}
			}
			if (soap_flag_M_USCORETEST_USCORETIME1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_TEST_TIME", &a->_ns1__DxTestDataUpload::M_USCORETEST_USCORETIME, "xsd:string"))
				{	soap_flag_M_USCORETEST_USCORETIME1--;
					continue;
				}
			}
			if (soap_flag_M_USCOREDECRIPTION1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:M_DECRIPTION", &a->_ns1__DxTestDataUpload::M_USCOREDECRIPTION, "xsd:string"))
				{	soap_flag_M_USCOREDECRIPTION1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
		if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_M_USCOREFLAG1 > 0))
		{	soap->error = SOAP_OCCURS;
			return NULL;
		}
	}
	else if ((soap->mode & SOAP_XML_STRICT) && *soap->href != '#')
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	else
	{	a = (_ns1__DxTestDataUpload *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__DxTestDataUpload, SOAP_TYPE__ns1__DxTestDataUpload, sizeof(_ns1__DxTestDataUpload), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__DxTestDataUpload * SOAP_FMAC2 soap_instantiate__ns1__DxTestDataUpload(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__DxTestDataUpload(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__DxTestDataUpload *p;
	size_t k = sizeof(_ns1__DxTestDataUpload);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__DxTestDataUpload, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__DxTestDataUpload);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__DxTestDataUpload, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__DxTestDataUpload location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__DxTestDataUpload::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__DxTestDataUpload(soap, tag ? tag : "ns1:DxTestDataUpload", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__DxTestDataUpload::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__DxTestDataUpload(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__DxTestDataUpload * SOAP_FMAC4 soap_get__ns1__DxTestDataUpload(struct soap *soap, _ns1__DxTestDataUpload *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__DxTestDataUpload(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetStringResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetStringResponse::GetStringResult = NULL;
	/* transient soap skipped */
}

void _ns1__GetStringResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetStringResponse::GetStringResult);
#endif
}

int _ns1__GetStringResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetStringResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStringResponse(struct soap *soap, const char *tag, int id, const _ns1__GetStringResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetStringResponse), type))
		return soap->error;
	if (a->GetStringResult)
		soap_element_result(soap, "ns1:GetStringResult");
	if (soap_out_PointerTostd__string(soap, "ns1:GetStringResult", -1, &a->_ns1__GetStringResponse::GetStringResult, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetStringResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetStringResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetStringResponse * SOAP_FMAC4 soap_in__ns1__GetStringResponse(struct soap *soap, const char *tag, _ns1__GetStringResponse *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetStringResponse*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetStringResponse, sizeof(_ns1__GetStringResponse), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetStringResponse)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetStringResponse *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_GetStringResult1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetStringResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:GetStringResult", &a->_ns1__GetStringResponse::GetStringResult, "xsd:string"))
				{	soap_flag_GetStringResult1--;
					continue;
				}
			}
			soap_check_result(soap, "ns1:GetStringResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetStringResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetStringResponse, SOAP_TYPE__ns1__GetStringResponse, sizeof(_ns1__GetStringResponse), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetStringResponse * SOAP_FMAC2 soap_instantiate__ns1__GetStringResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetStringResponse(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetStringResponse *p;
	size_t k = sizeof(_ns1__GetStringResponse);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetStringResponse, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetStringResponse);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetStringResponse, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetStringResponse location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetStringResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetStringResponse(soap, tag ? tag : "ns1:GetStringResponse", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetStringResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetStringResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetStringResponse * SOAP_FMAC4 soap_get__ns1__GetStringResponse(struct soap *soap, _ns1__GetStringResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetStringResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__GetString::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns1__GetString::strJSON = NULL;
	/* transient soap skipped */
}

void _ns1__GetString::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTostd__string(soap, &this->_ns1__GetString::strJSON);
#endif
}

int _ns1__GetString::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__GetString(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetString(struct soap *soap, const char *tag, int id, const _ns1__GetString *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__GetString), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:strJSON", -1, &a->_ns1__GetString::strJSON, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__GetString::soap_in(struct soap *soap, const char *tag, const char *type)
{
	return soap_in__ns1__GetString(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__GetString * SOAP_FMAC4 soap_in__ns1__GetString(struct soap *soap, const char *tag, _ns1__GetString *a, const char *type)
{
	(void)tag; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__GetString*)soap_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__GetString, sizeof(_ns1__GetString), soap->type, soap->arrayType, soap_instantiate, soap_fbase);
	if (!a)
		return NULL;
	if (soap->alloced && soap->alloced != SOAP_TYPE__ns1__GetString)
	{	soap_revert(soap);
		*soap->id = '\0';
		return (_ns1__GetString *)a->soap_in(soap, tag, type);
	}
	if (soap->alloced)
		a->soap_default(soap);
	size_t soap_flag_strJSON1 = 1;
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_strJSON1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_PointerTostd__string(soap, "ns1:strJSON", &a->_ns1__GetString::strJSON, "xsd:string"))
				{	soap_flag_strJSON1--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__GetString *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__GetString, SOAP_TYPE__ns1__GetString, sizeof(_ns1__GetString), 0, soap_finsert, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 _ns1__GetString * SOAP_FMAC2 soap_instantiate__ns1__GetString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__GetString(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	_ns1__GetString *p;
	size_t k = sizeof(_ns1__GetString);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE__ns1__GetString, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, _ns1__GetString);
		if (p)
			p->soap = soap;
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, _ns1__GetString, n);
		k *= n;
		if (p)
			for (int i = 0; i < n; i++)
				p[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated _ns1__GetString location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

int _ns1__GetString::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	if (soap_out__ns1__GetString(soap, tag ? tag : "ns1:GetString", -2, this, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__GetString::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__GetString(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__GetString * SOAP_FMAC4 soap_get__ns1__GetString(struct soap *soap, _ns1__GetString *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__GetString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->faultcode);
	soap_serialize_string(soap, (char*const*)&a->faultstring);
	soap_serialize_string(soap, (char*const*)&a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Node);
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)(void*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, (char*const*)&a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, (char*const*)&a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, (char*const*)&a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, (char*const*)&a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "faultcode", (char**)&a->faultcode, "xsd:QName"))
				{	soap_flag_faultcode--;
					continue;
				}
			}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultstring", (char**)&a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "faultactor", (char**)&a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Node", (char**)&a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Role", (char**)&a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Fault *p;
	size_t k = sizeof(struct SOAP_ENV__Fault);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Fault);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Fault, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Fault location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Fault(soap, tag ? tag : "SOAP-ENV:Fault", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_string(soap, (char*const*)&a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, (char*const*)&a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in_string(soap, "SOAP-ENV:Text", (char**)&a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Reason *p;
	size_t k = sizeof(struct SOAP_ENV__Reason);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Reason);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Reason, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Reason location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_outliteral(soap, "-any", (char*const*)&a->__any, NULL))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
			{	if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_inliteral(soap, "-any", (char**)&a->__any))
				{	soap_flag___any--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Detail *p;
	size_t k = sizeof(struct SOAP_ENV__Detail);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Detail);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Detail, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Detail location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize__QName(soap, (char*const*)&a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)(void*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
			{	if (soap_in__QName(soap, "SOAP-ENV:Value", (char**)&a->SOAP_ENV__Value, "xsd:QName"))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Code *p;
	size_t k = sizeof(struct SOAP_ENV__Code);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Code);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Code, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Code location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header*)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && *soap->href != '#')
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, soap_finsert, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct SOAP_ENV__Header *p;
	size_t k = sizeof(struct SOAP_ENV__Header);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct SOAP_ENV__Header);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct SOAP_ENV__Header, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct SOAP_ENV__Header location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	if (soap_out_SOAP_ENV__Header(soap, tag ? tag : "SOAP-ENV:Header", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DxDataUploadJson_(struct soap *soap, struct __ns1__DxDataUploadJson_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DxDataUploadJson = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DxDataUploadJson_(struct soap *soap, const struct __ns1__DxDataUploadJson_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__DxDataUploadJson(soap, &a->ns1__DxDataUploadJson);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DxDataUploadJson_(struct soap *soap, const char *tag, int id, const struct __ns1__DxDataUploadJson_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__DxDataUploadJson(soap, "ns1:DxDataUploadJson", -1, &a->ns1__DxDataUploadJson, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DxDataUploadJson_ * SOAP_FMAC4 soap_in___ns1__DxDataUploadJson_(struct soap *soap, const char *tag, struct __ns1__DxDataUploadJson_ *a, const char *type)
{
	size_t soap_flag_ns1__DxDataUploadJson = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__DxDataUploadJson_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DxDataUploadJson_, sizeof(struct __ns1__DxDataUploadJson_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DxDataUploadJson_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DxDataUploadJson && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__DxDataUploadJson(soap, "ns1:DxDataUploadJson", &a->ns1__DxDataUploadJson, ""))
				{	soap_flag_ns1__DxDataUploadJson--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__DxDataUploadJson_ * SOAP_FMAC2 soap_instantiate___ns1__DxDataUploadJson_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DxDataUploadJson_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__DxDataUploadJson_ *p;
	size_t k = sizeof(struct __ns1__DxDataUploadJson_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__DxDataUploadJson_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__DxDataUploadJson_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__DxDataUploadJson_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__DxDataUploadJson_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DxDataUploadJson_(struct soap *soap, const struct __ns1__DxDataUploadJson_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__DxDataUploadJson_(soap, tag ? tag : "-ns1:DxDataUploadJson", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DxDataUploadJson_ * SOAP_FMAC4 soap_get___ns1__DxDataUploadJson_(struct soap *soap, struct __ns1__DxDataUploadJson_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DxDataUploadJson_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DSDataCreateJSON_(struct soap *soap, struct __ns1__DSDataCreateJSON_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DSDataCreateJSON = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DSDataCreateJSON_(struct soap *soap, const struct __ns1__DSDataCreateJSON_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__DSDataCreateJSON(soap, &a->ns1__DSDataCreateJSON);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DSDataCreateJSON_(struct soap *soap, const char *tag, int id, const struct __ns1__DSDataCreateJSON_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__DSDataCreateJSON(soap, "ns1:DSDataCreateJSON", -1, &a->ns1__DSDataCreateJSON, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DSDataCreateJSON_ * SOAP_FMAC4 soap_in___ns1__DSDataCreateJSON_(struct soap *soap, const char *tag, struct __ns1__DSDataCreateJSON_ *a, const char *type)
{
	size_t soap_flag_ns1__DSDataCreateJSON = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__DSDataCreateJSON_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DSDataCreateJSON_, sizeof(struct __ns1__DSDataCreateJSON_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DSDataCreateJSON_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DSDataCreateJSON && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__DSDataCreateJSON(soap, "ns1:DSDataCreateJSON", &a->ns1__DSDataCreateJSON, ""))
				{	soap_flag_ns1__DSDataCreateJSON--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__DSDataCreateJSON_ * SOAP_FMAC2 soap_instantiate___ns1__DSDataCreateJSON_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DSDataCreateJSON_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__DSDataCreateJSON_ *p;
	size_t k = sizeof(struct __ns1__DSDataCreateJSON_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__DSDataCreateJSON_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__DSDataCreateJSON_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__DSDataCreateJSON_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__DSDataCreateJSON_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DSDataCreateJSON_(struct soap *soap, const struct __ns1__DSDataCreateJSON_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__DSDataCreateJSON_(soap, tag ? tag : "-ns1:DSDataCreateJSON", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DSDataCreateJSON_ * SOAP_FMAC4 soap_get___ns1__DSDataCreateJSON_(struct soap *soap, struct __ns1__DSDataCreateJSON_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DSDataCreateJSON_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Device_USCOREParameters_(struct soap *soap, struct __ns1__Device_USCOREParameters_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Device_USCOREParameters = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Device_USCOREParameters_(struct soap *soap, const struct __ns1__Device_USCOREParameters_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Device_USCOREParameters(soap, &a->ns1__Device_USCOREParameters);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Device_USCOREParameters_(struct soap *soap, const char *tag, int id, const struct __ns1__Device_USCOREParameters_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Device_USCOREParameters(soap, "ns1:Device_Parameters", -1, &a->ns1__Device_USCOREParameters, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Device_USCOREParameters_ * SOAP_FMAC4 soap_in___ns1__Device_USCOREParameters_(struct soap *soap, const char *tag, struct __ns1__Device_USCOREParameters_ *a, const char *type)
{
	size_t soap_flag_ns1__Device_USCOREParameters = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Device_USCOREParameters_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Device_USCOREParameters_, sizeof(struct __ns1__Device_USCOREParameters_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Device_USCOREParameters_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Device_USCOREParameters && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__Device_USCOREParameters(soap, "ns1:Device_Parameters", &a->ns1__Device_USCOREParameters, ""))
				{	soap_flag_ns1__Device_USCOREParameters--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__Device_USCOREParameters_ * SOAP_FMAC2 soap_instantiate___ns1__Device_USCOREParameters_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Device_USCOREParameters_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__Device_USCOREParameters_ *p;
	size_t k = sizeof(struct __ns1__Device_USCOREParameters_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__Device_USCOREParameters_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__Device_USCOREParameters_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__Device_USCOREParameters_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__Device_USCOREParameters_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Device_USCOREParameters_(struct soap *soap, const struct __ns1__Device_USCOREParameters_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__Device_USCOREParameters_(soap, tag ? tag : "-ns1:Device_Parameters", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Device_USCOREParameters_ * SOAP_FMAC4 soap_get___ns1__Device_USCOREParameters_(struct soap *soap, struct __ns1__Device_USCOREParameters_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Device_USCOREParameters_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DxTestDataUpload_(struct soap *soap, struct __ns1__DxTestDataUpload_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DxTestDataUpload = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DxTestDataUpload_(struct soap *soap, const struct __ns1__DxTestDataUpload_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__DxTestDataUpload(soap, &a->ns1__DxTestDataUpload);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DxTestDataUpload_(struct soap *soap, const char *tag, int id, const struct __ns1__DxTestDataUpload_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__DxTestDataUpload(soap, "ns1:DxTestDataUpload", -1, &a->ns1__DxTestDataUpload, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DxTestDataUpload_ * SOAP_FMAC4 soap_in___ns1__DxTestDataUpload_(struct soap *soap, const char *tag, struct __ns1__DxTestDataUpload_ *a, const char *type)
{
	size_t soap_flag_ns1__DxTestDataUpload = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__DxTestDataUpload_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DxTestDataUpload_, sizeof(struct __ns1__DxTestDataUpload_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DxTestDataUpload_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DxTestDataUpload && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__DxTestDataUpload(soap, "ns1:DxTestDataUpload", &a->ns1__DxTestDataUpload, ""))
				{	soap_flag_ns1__DxTestDataUpload--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__DxTestDataUpload_ * SOAP_FMAC2 soap_instantiate___ns1__DxTestDataUpload_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DxTestDataUpload_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__DxTestDataUpload_ *p;
	size_t k = sizeof(struct __ns1__DxTestDataUpload_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__DxTestDataUpload_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__DxTestDataUpload_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__DxTestDataUpload_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__DxTestDataUpload_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DxTestDataUpload_(struct soap *soap, const struct __ns1__DxTestDataUpload_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__DxTestDataUpload_(soap, tag ? tag : "-ns1:DxTestDataUpload", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DxTestDataUpload_ * SOAP_FMAC4 soap_get___ns1__DxTestDataUpload_(struct soap *soap, struct __ns1__DxTestDataUpload_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DxTestDataUpload_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetString_(struct soap *soap, struct __ns1__GetString_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetString = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetString_(struct soap *soap, const struct __ns1__GetString_ *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetString(soap, &a->ns1__GetString);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetString_(struct soap *soap, const char *tag, int id, const struct __ns1__GetString_ *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetString(soap, "ns1:GetString", -1, &a->ns1__GetString, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetString_ * SOAP_FMAC4 soap_in___ns1__GetString_(struct soap *soap, const char *tag, struct __ns1__GetString_ *a, const char *type)
{
	size_t soap_flag_ns1__GetString = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetString_*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetString_, sizeof(struct __ns1__GetString_), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetString_(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetString && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetString(soap, "ns1:GetString", &a->ns1__GetString, ""))
				{	soap_flag_ns1__GetString--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__GetString_ * SOAP_FMAC2 soap_instantiate___ns1__GetString_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetString_(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__GetString_ *p;
	size_t k = sizeof(struct __ns1__GetString_);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__GetString_, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__GetString_);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__GetString_, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__GetString_ location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetString_(struct soap *soap, const struct __ns1__GetString_ *a, const char *tag, const char *type)
{
	if (soap_out___ns1__GetString_(soap, tag ? tag : "-ns1:GetString", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetString_ * SOAP_FMAC4 soap_get___ns1__GetString_(struct soap *soap, struct __ns1__GetString_ *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetString_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DxDataUploadJson(struct soap *soap, struct __ns1__DxDataUploadJson *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DxDataUploadJson = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DxDataUploadJson(struct soap *soap, const struct __ns1__DxDataUploadJson *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__DxDataUploadJson(soap, &a->ns1__DxDataUploadJson);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DxDataUploadJson(struct soap *soap, const char *tag, int id, const struct __ns1__DxDataUploadJson *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__DxDataUploadJson(soap, "ns1:DxDataUploadJson", -1, &a->ns1__DxDataUploadJson, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DxDataUploadJson * SOAP_FMAC4 soap_in___ns1__DxDataUploadJson(struct soap *soap, const char *tag, struct __ns1__DxDataUploadJson *a, const char *type)
{
	size_t soap_flag_ns1__DxDataUploadJson = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__DxDataUploadJson*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DxDataUploadJson, sizeof(struct __ns1__DxDataUploadJson), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DxDataUploadJson(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DxDataUploadJson && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__DxDataUploadJson(soap, "ns1:DxDataUploadJson", &a->ns1__DxDataUploadJson, ""))
				{	soap_flag_ns1__DxDataUploadJson--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__DxDataUploadJson * SOAP_FMAC2 soap_instantiate___ns1__DxDataUploadJson(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DxDataUploadJson(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__DxDataUploadJson *p;
	size_t k = sizeof(struct __ns1__DxDataUploadJson);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__DxDataUploadJson, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__DxDataUploadJson);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__DxDataUploadJson, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__DxDataUploadJson location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DxDataUploadJson(struct soap *soap, const struct __ns1__DxDataUploadJson *a, const char *tag, const char *type)
{
	if (soap_out___ns1__DxDataUploadJson(soap, tag ? tag : "-ns1:DxDataUploadJson", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DxDataUploadJson * SOAP_FMAC4 soap_get___ns1__DxDataUploadJson(struct soap *soap, struct __ns1__DxDataUploadJson *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DxDataUploadJson(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DSDataCreateJSON(struct soap *soap, struct __ns1__DSDataCreateJSON *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DSDataCreateJSON = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DSDataCreateJSON(struct soap *soap, const struct __ns1__DSDataCreateJSON *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__DSDataCreateJSON(soap, &a->ns1__DSDataCreateJSON);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DSDataCreateJSON(struct soap *soap, const char *tag, int id, const struct __ns1__DSDataCreateJSON *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__DSDataCreateJSON(soap, "ns1:DSDataCreateJSON", -1, &a->ns1__DSDataCreateJSON, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DSDataCreateJSON * SOAP_FMAC4 soap_in___ns1__DSDataCreateJSON(struct soap *soap, const char *tag, struct __ns1__DSDataCreateJSON *a, const char *type)
{
	size_t soap_flag_ns1__DSDataCreateJSON = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__DSDataCreateJSON*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DSDataCreateJSON, sizeof(struct __ns1__DSDataCreateJSON), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DSDataCreateJSON(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DSDataCreateJSON && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__DSDataCreateJSON(soap, "ns1:DSDataCreateJSON", &a->ns1__DSDataCreateJSON, ""))
				{	soap_flag_ns1__DSDataCreateJSON--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__DSDataCreateJSON * SOAP_FMAC2 soap_instantiate___ns1__DSDataCreateJSON(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DSDataCreateJSON(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__DSDataCreateJSON *p;
	size_t k = sizeof(struct __ns1__DSDataCreateJSON);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__DSDataCreateJSON, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__DSDataCreateJSON);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__DSDataCreateJSON, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__DSDataCreateJSON location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DSDataCreateJSON(struct soap *soap, const struct __ns1__DSDataCreateJSON *a, const char *tag, const char *type)
{
	if (soap_out___ns1__DSDataCreateJSON(soap, tag ? tag : "-ns1:DSDataCreateJSON", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DSDataCreateJSON * SOAP_FMAC4 soap_get___ns1__DSDataCreateJSON(struct soap *soap, struct __ns1__DSDataCreateJSON *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DSDataCreateJSON(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Device_USCOREParameters(struct soap *soap, struct __ns1__Device_USCOREParameters *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__Device_USCOREParameters = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Device_USCOREParameters(struct soap *soap, const struct __ns1__Device_USCOREParameters *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__Device_USCOREParameters(soap, &a->ns1__Device_USCOREParameters);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Device_USCOREParameters(struct soap *soap, const char *tag, int id, const struct __ns1__Device_USCOREParameters *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__Device_USCOREParameters(soap, "ns1:Device_Parameters", -1, &a->ns1__Device_USCOREParameters, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Device_USCOREParameters * SOAP_FMAC4 soap_in___ns1__Device_USCOREParameters(struct soap *soap, const char *tag, struct __ns1__Device_USCOREParameters *a, const char *type)
{
	size_t soap_flag_ns1__Device_USCOREParameters = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__Device_USCOREParameters*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Device_USCOREParameters, sizeof(struct __ns1__Device_USCOREParameters), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Device_USCOREParameters(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__Device_USCOREParameters && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__Device_USCOREParameters(soap, "ns1:Device_Parameters", &a->ns1__Device_USCOREParameters, ""))
				{	soap_flag_ns1__Device_USCOREParameters--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__Device_USCOREParameters * SOAP_FMAC2 soap_instantiate___ns1__Device_USCOREParameters(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Device_USCOREParameters(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__Device_USCOREParameters *p;
	size_t k = sizeof(struct __ns1__Device_USCOREParameters);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__Device_USCOREParameters, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__Device_USCOREParameters);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__Device_USCOREParameters, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__Device_USCOREParameters location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Device_USCOREParameters(struct soap *soap, const struct __ns1__Device_USCOREParameters *a, const char *tag, const char *type)
{
	if (soap_out___ns1__Device_USCOREParameters(soap, tag ? tag : "-ns1:Device_Parameters", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Device_USCOREParameters * SOAP_FMAC4 soap_get___ns1__Device_USCOREParameters(struct soap *soap, struct __ns1__Device_USCOREParameters *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Device_USCOREParameters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DxTestDataUpload(struct soap *soap, struct __ns1__DxTestDataUpload *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__DxTestDataUpload = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DxTestDataUpload(struct soap *soap, const struct __ns1__DxTestDataUpload *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__DxTestDataUpload(soap, &a->ns1__DxTestDataUpload);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DxTestDataUpload(struct soap *soap, const char *tag, int id, const struct __ns1__DxTestDataUpload *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__DxTestDataUpload(soap, "ns1:DxTestDataUpload", -1, &a->ns1__DxTestDataUpload, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DxTestDataUpload * SOAP_FMAC4 soap_in___ns1__DxTestDataUpload(struct soap *soap, const char *tag, struct __ns1__DxTestDataUpload *a, const char *type)
{
	size_t soap_flag_ns1__DxTestDataUpload = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__DxTestDataUpload*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DxTestDataUpload, sizeof(struct __ns1__DxTestDataUpload), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DxTestDataUpload(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__DxTestDataUpload && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__DxTestDataUpload(soap, "ns1:DxTestDataUpload", &a->ns1__DxTestDataUpload, ""))
				{	soap_flag_ns1__DxTestDataUpload--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__DxTestDataUpload * SOAP_FMAC2 soap_instantiate___ns1__DxTestDataUpload(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DxTestDataUpload(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__DxTestDataUpload *p;
	size_t k = sizeof(struct __ns1__DxTestDataUpload);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__DxTestDataUpload, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__DxTestDataUpload);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__DxTestDataUpload, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__DxTestDataUpload location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DxTestDataUpload(struct soap *soap, const struct __ns1__DxTestDataUpload *a, const char *tag, const char *type)
{
	if (soap_out___ns1__DxTestDataUpload(soap, tag ? tag : "-ns1:DxTestDataUpload", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DxTestDataUpload * SOAP_FMAC4 soap_get___ns1__DxTestDataUpload(struct soap *soap, struct __ns1__DxTestDataUpload *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DxTestDataUpload(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetString(struct soap *soap, struct __ns1__GetString *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns1__GetString = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetString(struct soap *soap, const struct __ns1__GetString *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	soap_serialize_PointerTo_ns1__GetString(soap, &a->ns1__GetString);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetString(struct soap *soap, const char *tag, int id, const struct __ns1__GetString *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)a; (void)type; /* appease -Wall -Werror */
	if (soap_out_PointerTo_ns1__GetString(soap, "ns1:GetString", -1, &a->ns1__GetString, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetString * SOAP_FMAC4 soap_in___ns1__GetString(struct soap *soap, const char *tag, struct __ns1__GetString *a, const char *type)
{
	size_t soap_flag_ns1__GetString = 1;
	short soap_flag;
	(void)tag; (void)type; /* appease -Wall -Werror */
	a = (struct __ns1__GetString*)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetString, sizeof(struct __ns1__GetString), NULL, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetString(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns1__GetString && soap->error == SOAP_TAG_MISMATCH)
			{	if (soap_in_PointerTo_ns1__GetString(soap, "ns1:GetString", &a->ns1__GetString, ""))
				{	soap_flag_ns1__GetString--;
					continue;
				}
			}
			if (soap->error == SOAP_TAG_MISMATCH && soap_flag)
			{	soap->error = SOAP_OK;
				break;
			}
			if (soap_flag && soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC1 struct __ns1__GetString * SOAP_FMAC2 soap_instantiate___ns1__GetString(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetString(%p, %d, %s, %s)\n", (void*)soap, n, type?type:"", arrayType?arrayType:""));
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	struct __ns1__GetString *p;
	size_t k = sizeof(struct __ns1__GetString);
	struct soap_clist *cp = soap_link(soap, SOAP_TYPE___ns1__GetString, n, soap_fdelete);
	if (!cp && soap && n != SOAP_NO_LINK_TO_DELETE)
		return NULL;
	if (n < 0)
	{	p = SOAP_NEW(soap, struct __ns1__GetString);
	}
	else
	{	p = SOAP_NEW_ARRAY(soap, struct __ns1__GetString, n);
		k *= n;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated struct __ns1__GetString location=%p n=%d\n", (void*)p, n));
	if (size)
		*size = k;
	if (!p)
		soap->error = SOAP_EOM;
	else if (cp)
		cp->ptr = (void*)p;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetString(struct soap *soap, const struct __ns1__GetString *a, const char *tag, const char *type)
{
	if (soap_out___ns1__GetString(soap, tag ? tag : "-ns1:GetString", -2, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetString * SOAP_FMAC4 soap_get___ns1__GetString(struct soap *soap, struct __ns1__GetString *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag ? tag : "SOAP-ENV:Reason", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag ? tag : "SOAP-ENV:Detail", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	char *mark;
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code, &mark);
	if (id < 0)
		return soap->error;
	(void)soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
	soap_unmark(soap, mark);
	return soap->error;
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag ? tag : "SOAP-ENV:Code", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DxDataUploadJson(struct soap *soap, _ns1__DxDataUploadJson *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DxDataUploadJson))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DxDataUploadJson(struct soap *soap, const char *tag, int id, _ns1__DxDataUploadJson *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DxDataUploadJson, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__DxDataUploadJson ? type : NULL);
}

SOAP_FMAC3 _ns1__DxDataUploadJson ** SOAP_FMAC4 soap_in_PointerTo_ns1__DxDataUploadJson(struct soap *soap, const char *tag, _ns1__DxDataUploadJson **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DxDataUploadJson **)soap_malloc(soap, sizeof(_ns1__DxDataUploadJson *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DxDataUploadJson *)soap_instantiate__ns1__DxDataUploadJson(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__DxDataUploadJson **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DxDataUploadJson, sizeof(_ns1__DxDataUploadJson), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DxDataUploadJson(struct soap *soap, _ns1__DxDataUploadJson *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__DxDataUploadJson(soap, tag ? tag : "ns1:DxDataUploadJson", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__DxDataUploadJson ** SOAP_FMAC4 soap_get_PointerTo_ns1__DxDataUploadJson(struct soap *soap, _ns1__DxDataUploadJson **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DxDataUploadJson(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DSDataCreateJSON(struct soap *soap, _ns1__DSDataCreateJSON *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DSDataCreateJSON))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DSDataCreateJSON(struct soap *soap, const char *tag, int id, _ns1__DSDataCreateJSON *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DSDataCreateJSON, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__DSDataCreateJSON ? type : NULL);
}

SOAP_FMAC3 _ns1__DSDataCreateJSON ** SOAP_FMAC4 soap_in_PointerTo_ns1__DSDataCreateJSON(struct soap *soap, const char *tag, _ns1__DSDataCreateJSON **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DSDataCreateJSON **)soap_malloc(soap, sizeof(_ns1__DSDataCreateJSON *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DSDataCreateJSON *)soap_instantiate__ns1__DSDataCreateJSON(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__DSDataCreateJSON **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DSDataCreateJSON, sizeof(_ns1__DSDataCreateJSON), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DSDataCreateJSON(struct soap *soap, _ns1__DSDataCreateJSON *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__DSDataCreateJSON(soap, tag ? tag : "ns1:DSDataCreateJSON", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__DSDataCreateJSON ** SOAP_FMAC4 soap_get_PointerTo_ns1__DSDataCreateJSON(struct soap *soap, _ns1__DSDataCreateJSON **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DSDataCreateJSON(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Device_USCOREParameters(struct soap *soap, _ns1__Device_USCOREParameters *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__Device_USCOREParameters))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Device_USCOREParameters(struct soap *soap, const char *tag, int id, _ns1__Device_USCOREParameters *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__Device_USCOREParameters, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__Device_USCOREParameters ? type : NULL);
}

SOAP_FMAC3 _ns1__Device_USCOREParameters ** SOAP_FMAC4 soap_in_PointerTo_ns1__Device_USCOREParameters(struct soap *soap, const char *tag, _ns1__Device_USCOREParameters **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__Device_USCOREParameters **)soap_malloc(soap, sizeof(_ns1__Device_USCOREParameters *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__Device_USCOREParameters *)soap_instantiate__ns1__Device_USCOREParameters(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__Device_USCOREParameters **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__Device_USCOREParameters, sizeof(_ns1__Device_USCOREParameters), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Device_USCOREParameters(struct soap *soap, _ns1__Device_USCOREParameters *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__Device_USCOREParameters(soap, tag ? tag : "ns1:Device_Parameters", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__Device_USCOREParameters ** SOAP_FMAC4 soap_get_PointerTo_ns1__Device_USCOREParameters(struct soap *soap, _ns1__Device_USCOREParameters **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__Device_USCOREParameters(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DxTestDataUpload(struct soap *soap, _ns1__DxTestDataUpload *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__DxTestDataUpload))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DxTestDataUpload(struct soap *soap, const char *tag, int id, _ns1__DxTestDataUpload *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__DxTestDataUpload, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__DxTestDataUpload ? type : NULL);
}

SOAP_FMAC3 _ns1__DxTestDataUpload ** SOAP_FMAC4 soap_in_PointerTo_ns1__DxTestDataUpload(struct soap *soap, const char *tag, _ns1__DxTestDataUpload **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__DxTestDataUpload **)soap_malloc(soap, sizeof(_ns1__DxTestDataUpload *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__DxTestDataUpload *)soap_instantiate__ns1__DxTestDataUpload(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__DxTestDataUpload **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__DxTestDataUpload, sizeof(_ns1__DxTestDataUpload), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DxTestDataUpload(struct soap *soap, _ns1__DxTestDataUpload *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__DxTestDataUpload(soap, tag ? tag : "ns1:DxTestDataUpload", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__DxTestDataUpload ** SOAP_FMAC4 soap_get_PointerTo_ns1__DxTestDataUpload(struct soap *soap, _ns1__DxTestDataUpload **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__DxTestDataUpload(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetString(struct soap *soap, _ns1__GetString *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE__ns1__GetString))
		(*a)->soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetString(struct soap *soap, const char *tag, int id, _ns1__GetString *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns1__GetString, NULL);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, (*a)->soap_type() == SOAP_TYPE__ns1__GetString ? type : NULL);
}

SOAP_FMAC3 _ns1__GetString ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetString(struct soap *soap, const char *tag, _ns1__GetString **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns1__GetString **)soap_malloc(soap, sizeof(_ns1__GetString *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns1__GetString *)soap_instantiate__ns1__GetString(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
		{	*a = NULL;
			return NULL;
		}
	}
	else
	{	a = (_ns1__GetString **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns1__GetString, sizeof(_ns1__GetString), 0, soap_fbase);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetString(struct soap *soap, _ns1__GetString *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTo_ns1__GetString(soap, tag ? tag : "ns1:GetString", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns1__GetString ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetString(struct soap *soap, _ns1__GetString **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns1__GetString(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string, NULL);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	if (soap_out_PointerTostd__string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out__QName(soap, tag ? tag : "QName", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
#ifndef WITH_NOIDREF
	(void)soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{
	a = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1, NULL);
	return a;
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n)
{
	char * *a = static_cast<char * *>(soap_malloc(soap, (n = (n < 0 ? 1 : n)) * sizeof(char *)));
	for (char * *p = a; p && n--; ++p)
		soap_default_string(soap, p);
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	if (soap_out_string(soap, tag ? tag : "string", -2, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
