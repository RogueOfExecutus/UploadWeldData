/* soapH.h
   Generated by gSOAP 2.8.74 for MesFrameWork.h

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);
SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap *soap, struct soap_clist*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fbase(int, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_finsert(struct soap*, int, int, void*, size_t, const void*, void**);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

inline void soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

inline int soap_write_byte(struct soap *soap, char const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_byte(struct soap *soap, const char *URL, char const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_byte(soap, p, "byte", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

inline int soap_read_byte(struct soap *soap, char *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_byte(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_byte(struct soap *soap, const char *URL, char *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_byte(struct soap *soap, char *p)
{
	if (::soap_read_byte(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

inline void soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

inline int soap_write_int(struct soap *soap, int const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_int(struct soap *soap, const char *URL, int const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_int(soap, p, "int", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

inline int soap_read_int(struct soap *soap, int *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_int(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_int(struct soap *soap, const char *URL, int *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_int(struct soap *soap, int *p)
{
	if (::soap_read_int(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE_std__string_DEFINED
#define SOAP_TYPE_std__string_DEFINED

inline void soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);

#define soap_std__string2s(soap, a) ((a).c_str())
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);

#define soap_s2std__string(soap, s, a) soap_s2stdchar((soap), (s), (a), 1, 0, -1, NULL)
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);
SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1)
{
	return soap_instantiate_std__string(soap, n, NULL, NULL, NULL);
}

inline std::string * soap_new_req_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}

inline std::string * soap_new_set_std__string(
	struct soap *soap)
{
	std::string *_p = ::soap_new_std__string(soap);
	if (_p)
	{	::soap_default_std__string(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

inline int soap_write_std__string(struct soap *soap, std::string const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_std__string(struct soap *soap, const char *URL, std::string const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_std__string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

inline int soap_read_std__string(struct soap *soap, std::string *p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_std__string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_std__string(struct soap *soap, const char *URL, std::string *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_std__string(struct soap *soap, std::string *p)
{
	if (::soap_read_std__string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DxDataUploadJsonResponse_DEFINED
#define SOAP_TYPE__ns1__DxDataUploadJsonResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DxDataUploadJsonResponse(struct soap*, const char*, int, const _ns1__DxDataUploadJsonResponse *, const char*);
SOAP_FMAC3 _ns1__DxDataUploadJsonResponse * SOAP_FMAC4 soap_in__ns1__DxDataUploadJsonResponse(struct soap*, const char*, _ns1__DxDataUploadJsonResponse *, const char*);
SOAP_FMAC1 _ns1__DxDataUploadJsonResponse * SOAP_FMAC2 soap_instantiate__ns1__DxDataUploadJsonResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DxDataUploadJsonResponse * soap_new__ns1__DxDataUploadJsonResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DxDataUploadJsonResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DxDataUploadJsonResponse * soap_new_req__ns1__DxDataUploadJsonResponse(
	struct soap *soap)
{
	_ns1__DxDataUploadJsonResponse *_p = ::soap_new__ns1__DxDataUploadJsonResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DxDataUploadJsonResponse * soap_new_set__ns1__DxDataUploadJsonResponse(
	struct soap *soap,
	std::string *DxDataUploadJsonResult)
{
	_ns1__DxDataUploadJsonResponse *_p = ::soap_new__ns1__DxDataUploadJsonResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DxDataUploadJsonResponse::DxDataUploadJsonResult = DxDataUploadJsonResult;
	}
	return _p;
}

inline int soap_write__ns1__DxDataUploadJsonResponse(struct soap *soap, _ns1__DxDataUploadJsonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxDataUploadJsonResponse", p->soap_type() == SOAP_TYPE__ns1__DxDataUploadJsonResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DxDataUploadJsonResponse(struct soap *soap, const char *URL, _ns1__DxDataUploadJsonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxDataUploadJsonResponse", p->soap_type() == SOAP_TYPE__ns1__DxDataUploadJsonResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__DxDataUploadJsonResponse(struct soap *soap, const char *URL, _ns1__DxDataUploadJsonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxDataUploadJsonResponse", p->soap_type() == SOAP_TYPE__ns1__DxDataUploadJsonResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DxDataUploadJsonResponse(struct soap *soap, const char *URL, _ns1__DxDataUploadJsonResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxDataUploadJsonResponse", p->soap_type() == SOAP_TYPE__ns1__DxDataUploadJsonResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DxDataUploadJsonResponse * SOAP_FMAC4 soap_get__ns1__DxDataUploadJsonResponse(struct soap*, _ns1__DxDataUploadJsonResponse *, const char*, const char*);

inline int soap_read__ns1__DxDataUploadJsonResponse(struct soap *soap, _ns1__DxDataUploadJsonResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__DxDataUploadJsonResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DxDataUploadJsonResponse(struct soap *soap, const char *URL, _ns1__DxDataUploadJsonResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__DxDataUploadJsonResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DxDataUploadJsonResponse(struct soap *soap, _ns1__DxDataUploadJsonResponse *p)
{
	if (::soap_read__ns1__DxDataUploadJsonResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DxDataUploadJson_DEFINED
#define SOAP_TYPE__ns1__DxDataUploadJson_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DxDataUploadJson(struct soap*, const char*, int, const _ns1__DxDataUploadJson *, const char*);
SOAP_FMAC3 _ns1__DxDataUploadJson * SOAP_FMAC4 soap_in__ns1__DxDataUploadJson(struct soap*, const char*, _ns1__DxDataUploadJson *, const char*);
SOAP_FMAC1 _ns1__DxDataUploadJson * SOAP_FMAC2 soap_instantiate__ns1__DxDataUploadJson(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DxDataUploadJson * soap_new__ns1__DxDataUploadJson(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DxDataUploadJson(soap, n, NULL, NULL, NULL);
}

inline _ns1__DxDataUploadJson * soap_new_req__ns1__DxDataUploadJson(
	struct soap *soap)
{
	_ns1__DxDataUploadJson *_p = ::soap_new__ns1__DxDataUploadJson(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DxDataUploadJson * soap_new_set__ns1__DxDataUploadJson(
	struct soap *soap,
	std::string *jsonText)
{
	_ns1__DxDataUploadJson *_p = ::soap_new__ns1__DxDataUploadJson(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DxDataUploadJson::jsonText = jsonText;
	}
	return _p;
}

inline int soap_write__ns1__DxDataUploadJson(struct soap *soap, _ns1__DxDataUploadJson const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxDataUploadJson", p->soap_type() == SOAP_TYPE__ns1__DxDataUploadJson ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DxDataUploadJson(struct soap *soap, const char *URL, _ns1__DxDataUploadJson const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxDataUploadJson", p->soap_type() == SOAP_TYPE__ns1__DxDataUploadJson ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__DxDataUploadJson(struct soap *soap, const char *URL, _ns1__DxDataUploadJson const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxDataUploadJson", p->soap_type() == SOAP_TYPE__ns1__DxDataUploadJson ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DxDataUploadJson(struct soap *soap, const char *URL, _ns1__DxDataUploadJson const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxDataUploadJson", p->soap_type() == SOAP_TYPE__ns1__DxDataUploadJson ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DxDataUploadJson * SOAP_FMAC4 soap_get__ns1__DxDataUploadJson(struct soap*, _ns1__DxDataUploadJson *, const char*, const char*);

inline int soap_read__ns1__DxDataUploadJson(struct soap *soap, _ns1__DxDataUploadJson *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__DxDataUploadJson(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DxDataUploadJson(struct soap *soap, const char *URL, _ns1__DxDataUploadJson *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__DxDataUploadJson(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DxDataUploadJson(struct soap *soap, _ns1__DxDataUploadJson *p)
{
	if (::soap_read__ns1__DxDataUploadJson(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DSDataCreateJSONResponse_DEFINED
#define SOAP_TYPE__ns1__DSDataCreateJSONResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DSDataCreateJSONResponse(struct soap*, const char*, int, const _ns1__DSDataCreateJSONResponse *, const char*);
SOAP_FMAC3 _ns1__DSDataCreateJSONResponse * SOAP_FMAC4 soap_in__ns1__DSDataCreateJSONResponse(struct soap*, const char*, _ns1__DSDataCreateJSONResponse *, const char*);
SOAP_FMAC1 _ns1__DSDataCreateJSONResponse * SOAP_FMAC2 soap_instantiate__ns1__DSDataCreateJSONResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DSDataCreateJSONResponse * soap_new__ns1__DSDataCreateJSONResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DSDataCreateJSONResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DSDataCreateJSONResponse * soap_new_req__ns1__DSDataCreateJSONResponse(
	struct soap *soap)
{
	_ns1__DSDataCreateJSONResponse *_p = ::soap_new__ns1__DSDataCreateJSONResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DSDataCreateJSONResponse * soap_new_set__ns1__DSDataCreateJSONResponse(
	struct soap *soap,
	std::string *DSDataCreateJSONResult)
{
	_ns1__DSDataCreateJSONResponse *_p = ::soap_new__ns1__DSDataCreateJSONResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DSDataCreateJSONResponse::DSDataCreateJSONResult = DSDataCreateJSONResult;
	}
	return _p;
}

inline int soap_write__ns1__DSDataCreateJSONResponse(struct soap *soap, _ns1__DSDataCreateJSONResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DSDataCreateJSONResponse", p->soap_type() == SOAP_TYPE__ns1__DSDataCreateJSONResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DSDataCreateJSONResponse(struct soap *soap, const char *URL, _ns1__DSDataCreateJSONResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DSDataCreateJSONResponse", p->soap_type() == SOAP_TYPE__ns1__DSDataCreateJSONResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__DSDataCreateJSONResponse(struct soap *soap, const char *URL, _ns1__DSDataCreateJSONResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DSDataCreateJSONResponse", p->soap_type() == SOAP_TYPE__ns1__DSDataCreateJSONResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DSDataCreateJSONResponse(struct soap *soap, const char *URL, _ns1__DSDataCreateJSONResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DSDataCreateJSONResponse", p->soap_type() == SOAP_TYPE__ns1__DSDataCreateJSONResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DSDataCreateJSONResponse * SOAP_FMAC4 soap_get__ns1__DSDataCreateJSONResponse(struct soap*, _ns1__DSDataCreateJSONResponse *, const char*, const char*);

inline int soap_read__ns1__DSDataCreateJSONResponse(struct soap *soap, _ns1__DSDataCreateJSONResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__DSDataCreateJSONResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DSDataCreateJSONResponse(struct soap *soap, const char *URL, _ns1__DSDataCreateJSONResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__DSDataCreateJSONResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DSDataCreateJSONResponse(struct soap *soap, _ns1__DSDataCreateJSONResponse *p)
{
	if (::soap_read__ns1__DSDataCreateJSONResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DSDataCreateJSON_DEFINED
#define SOAP_TYPE__ns1__DSDataCreateJSON_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DSDataCreateJSON(struct soap*, const char*, int, const _ns1__DSDataCreateJSON *, const char*);
SOAP_FMAC3 _ns1__DSDataCreateJSON * SOAP_FMAC4 soap_in__ns1__DSDataCreateJSON(struct soap*, const char*, _ns1__DSDataCreateJSON *, const char*);
SOAP_FMAC1 _ns1__DSDataCreateJSON * SOAP_FMAC2 soap_instantiate__ns1__DSDataCreateJSON(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DSDataCreateJSON * soap_new__ns1__DSDataCreateJSON(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DSDataCreateJSON(soap, n, NULL, NULL, NULL);
}

inline _ns1__DSDataCreateJSON * soap_new_req__ns1__DSDataCreateJSON(
	struct soap *soap,
	int M_USCOREFLAG)
{
	_ns1__DSDataCreateJSON *_p = ::soap_new__ns1__DSDataCreateJSON(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DSDataCreateJSON::M_USCOREFLAG = M_USCOREFLAG;
	}
	return _p;
}

inline _ns1__DSDataCreateJSON * soap_new_set__ns1__DSDataCreateJSON(
	struct soap *soap,
	int M_USCOREFLAG,
	std::string *M_USCOREDEVICE_USCORESN,
	std::string *M_USCOREWORKSTATION_USCORESN,
	std::string *M_USCOREEMP_USCORENO,
	std::string *M_USCOREAREA,
	std::string *M_USCOREMO,
	std::string *M_USCOREMODEL,
	std::string *M_USCORECONTAINER_USCORESN,
	std::string *M_USCORESN,
	std::string *M_USCOREUNION_USCORESN,
	std::string *M_USCORELEVEL,
	std::string *M_USCOREEC_USCOREFLAG,
	std::string *M_USCOREITEMVALUE,
	std::string *M_USCORETEST_USCORETIME,
	std::string *M_USCOREDECRIPTION,
	std::string *M_USCOREROUTE,
	std::string *M_USCOREGROUP,
	std::string *M_USCOREERROR_USCORECODE,
	std::string *M_USCOREERROR_USCORELEVEL,
	std::string *M_USCOREERROR_USCORESTATUS,
	std::string *M_USCOREITEM_USCORETYPE,
	std::string *M_USCOREPOLAR,
	std::string *CONTROL_USCORETYPE,
	std::string *M_USCOREMARK1,
	std::string *M_USCOREMARK2,
	std::string *M_USCOREMARK3,
	std::string *M_USCOREMARK4)
{
	_ns1__DSDataCreateJSON *_p = ::soap_new__ns1__DSDataCreateJSON(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DSDataCreateJSON::M_USCOREFLAG = M_USCOREFLAG;
		_p->_ns1__DSDataCreateJSON::M_USCOREDEVICE_USCORESN = M_USCOREDEVICE_USCORESN;
		_p->_ns1__DSDataCreateJSON::M_USCOREWORKSTATION_USCORESN = M_USCOREWORKSTATION_USCORESN;
		_p->_ns1__DSDataCreateJSON::M_USCOREEMP_USCORENO = M_USCOREEMP_USCORENO;
		_p->_ns1__DSDataCreateJSON::M_USCOREAREA = M_USCOREAREA;
		_p->_ns1__DSDataCreateJSON::M_USCOREMO = M_USCOREMO;
		_p->_ns1__DSDataCreateJSON::M_USCOREMODEL = M_USCOREMODEL;
		_p->_ns1__DSDataCreateJSON::M_USCORECONTAINER_USCORESN = M_USCORECONTAINER_USCORESN;
		_p->_ns1__DSDataCreateJSON::M_USCORESN = M_USCORESN;
		_p->_ns1__DSDataCreateJSON::M_USCOREUNION_USCORESN = M_USCOREUNION_USCORESN;
		_p->_ns1__DSDataCreateJSON::M_USCORELEVEL = M_USCORELEVEL;
		_p->_ns1__DSDataCreateJSON::M_USCOREEC_USCOREFLAG = M_USCOREEC_USCOREFLAG;
		_p->_ns1__DSDataCreateJSON::M_USCOREITEMVALUE = M_USCOREITEMVALUE;
		_p->_ns1__DSDataCreateJSON::M_USCORETEST_USCORETIME = M_USCORETEST_USCORETIME;
		_p->_ns1__DSDataCreateJSON::M_USCOREDECRIPTION = M_USCOREDECRIPTION;
		_p->_ns1__DSDataCreateJSON::M_USCOREROUTE = M_USCOREROUTE;
		_p->_ns1__DSDataCreateJSON::M_USCOREGROUP = M_USCOREGROUP;
		_p->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORECODE = M_USCOREERROR_USCORECODE;
		_p->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORELEVEL = M_USCOREERROR_USCORELEVEL;
		_p->_ns1__DSDataCreateJSON::M_USCOREERROR_USCORESTATUS = M_USCOREERROR_USCORESTATUS;
		_p->_ns1__DSDataCreateJSON::M_USCOREITEM_USCORETYPE = M_USCOREITEM_USCORETYPE;
		_p->_ns1__DSDataCreateJSON::M_USCOREPOLAR = M_USCOREPOLAR;
		_p->_ns1__DSDataCreateJSON::CONTROL_USCORETYPE = CONTROL_USCORETYPE;
		_p->_ns1__DSDataCreateJSON::M_USCOREMARK1 = M_USCOREMARK1;
		_p->_ns1__DSDataCreateJSON::M_USCOREMARK2 = M_USCOREMARK2;
		_p->_ns1__DSDataCreateJSON::M_USCOREMARK3 = M_USCOREMARK3;
		_p->_ns1__DSDataCreateJSON::M_USCOREMARK4 = M_USCOREMARK4;
	}
	return _p;
}

inline int soap_write__ns1__DSDataCreateJSON(struct soap *soap, _ns1__DSDataCreateJSON const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DSDataCreateJSON", p->soap_type() == SOAP_TYPE__ns1__DSDataCreateJSON ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DSDataCreateJSON(struct soap *soap, const char *URL, _ns1__DSDataCreateJSON const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DSDataCreateJSON", p->soap_type() == SOAP_TYPE__ns1__DSDataCreateJSON ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__DSDataCreateJSON(struct soap *soap, const char *URL, _ns1__DSDataCreateJSON const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DSDataCreateJSON", p->soap_type() == SOAP_TYPE__ns1__DSDataCreateJSON ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DSDataCreateJSON(struct soap *soap, const char *URL, _ns1__DSDataCreateJSON const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DSDataCreateJSON", p->soap_type() == SOAP_TYPE__ns1__DSDataCreateJSON ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DSDataCreateJSON * SOAP_FMAC4 soap_get__ns1__DSDataCreateJSON(struct soap*, _ns1__DSDataCreateJSON *, const char*, const char*);

inline int soap_read__ns1__DSDataCreateJSON(struct soap *soap, _ns1__DSDataCreateJSON *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__DSDataCreateJSON(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DSDataCreateJSON(struct soap *soap, const char *URL, _ns1__DSDataCreateJSON *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__DSDataCreateJSON(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DSDataCreateJSON(struct soap *soap, _ns1__DSDataCreateJSON *p)
{
	if (::soap_read__ns1__DSDataCreateJSON(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Device_USCOREParametersResponse_DEFINED
#define SOAP_TYPE__ns1__Device_USCOREParametersResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Device_USCOREParametersResponse(struct soap*, const char*, int, const _ns1__Device_USCOREParametersResponse *, const char*);
SOAP_FMAC3 _ns1__Device_USCOREParametersResponse * SOAP_FMAC4 soap_in__ns1__Device_USCOREParametersResponse(struct soap*, const char*, _ns1__Device_USCOREParametersResponse *, const char*);
SOAP_FMAC1 _ns1__Device_USCOREParametersResponse * SOAP_FMAC2 soap_instantiate__ns1__Device_USCOREParametersResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Device_USCOREParametersResponse * soap_new__ns1__Device_USCOREParametersResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Device_USCOREParametersResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__Device_USCOREParametersResponse * soap_new_req__ns1__Device_USCOREParametersResponse(
	struct soap *soap)
{
	_ns1__Device_USCOREParametersResponse *_p = ::soap_new__ns1__Device_USCOREParametersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Device_USCOREParametersResponse * soap_new_set__ns1__Device_USCOREParametersResponse(
	struct soap *soap,
	std::string *Device_USCOREParametersResult)
{
	_ns1__Device_USCOREParametersResponse *_p = ::soap_new__ns1__Device_USCOREParametersResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Device_USCOREParametersResponse::Device_USCOREParametersResult = Device_USCOREParametersResult;
	}
	return _p;
}

inline int soap_write__ns1__Device_USCOREParametersResponse(struct soap *soap, _ns1__Device_USCOREParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Device_ParametersResponse", p->soap_type() == SOAP_TYPE__ns1__Device_USCOREParametersResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Device_USCOREParametersResponse(struct soap *soap, const char *URL, _ns1__Device_USCOREParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Device_ParametersResponse", p->soap_type() == SOAP_TYPE__ns1__Device_USCOREParametersResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__Device_USCOREParametersResponse(struct soap *soap, const char *URL, _ns1__Device_USCOREParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Device_ParametersResponse", p->soap_type() == SOAP_TYPE__ns1__Device_USCOREParametersResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Device_USCOREParametersResponse(struct soap *soap, const char *URL, _ns1__Device_USCOREParametersResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Device_ParametersResponse", p->soap_type() == SOAP_TYPE__ns1__Device_USCOREParametersResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Device_USCOREParametersResponse * SOAP_FMAC4 soap_get__ns1__Device_USCOREParametersResponse(struct soap*, _ns1__Device_USCOREParametersResponse *, const char*, const char*);

inline int soap_read__ns1__Device_USCOREParametersResponse(struct soap *soap, _ns1__Device_USCOREParametersResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__Device_USCOREParametersResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Device_USCOREParametersResponse(struct soap *soap, const char *URL, _ns1__Device_USCOREParametersResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__Device_USCOREParametersResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__Device_USCOREParametersResponse(struct soap *soap, _ns1__Device_USCOREParametersResponse *p)
{
	if (::soap_read__ns1__Device_USCOREParametersResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__Device_USCOREParameters_DEFINED
#define SOAP_TYPE__ns1__Device_USCOREParameters_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__Device_USCOREParameters(struct soap*, const char*, int, const _ns1__Device_USCOREParameters *, const char*);
SOAP_FMAC3 _ns1__Device_USCOREParameters * SOAP_FMAC4 soap_in__ns1__Device_USCOREParameters(struct soap*, const char*, _ns1__Device_USCOREParameters *, const char*);
SOAP_FMAC1 _ns1__Device_USCOREParameters * SOAP_FMAC2 soap_instantiate__ns1__Device_USCOREParameters(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__Device_USCOREParameters * soap_new__ns1__Device_USCOREParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__Device_USCOREParameters(soap, n, NULL, NULL, NULL);
}

inline _ns1__Device_USCOREParameters * soap_new_req__ns1__Device_USCOREParameters(
	struct soap *soap)
{
	_ns1__Device_USCOREParameters *_p = ::soap_new__ns1__Device_USCOREParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__Device_USCOREParameters * soap_new_set__ns1__Device_USCOREParameters(
	struct soap *soap,
	std::string *M_USCOREDEVICE_USCORESN,
	std::string *M_USCOREEMP_USCORENO,
	std::string *M_USCOREMO,
	std::string *M_USCOREITEM_USCOREVALUE,
	std::string *M_USCOREY_USCOREN,
	std::string *M_USCOREPROCDUCE_USCORETIME)
{
	_ns1__Device_USCOREParameters *_p = ::soap_new__ns1__Device_USCOREParameters(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__Device_USCOREParameters::M_USCOREDEVICE_USCORESN = M_USCOREDEVICE_USCORESN;
		_p->_ns1__Device_USCOREParameters::M_USCOREEMP_USCORENO = M_USCOREEMP_USCORENO;
		_p->_ns1__Device_USCOREParameters::M_USCOREMO = M_USCOREMO;
		_p->_ns1__Device_USCOREParameters::M_USCOREITEM_USCOREVALUE = M_USCOREITEM_USCOREVALUE;
		_p->_ns1__Device_USCOREParameters::M_USCOREY_USCOREN = M_USCOREY_USCOREN;
		_p->_ns1__Device_USCOREParameters::M_USCOREPROCDUCE_USCORETIME = M_USCOREPROCDUCE_USCORETIME;
	}
	return _p;
}

inline int soap_write__ns1__Device_USCOREParameters(struct soap *soap, _ns1__Device_USCOREParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Device_Parameters", p->soap_type() == SOAP_TYPE__ns1__Device_USCOREParameters ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__Device_USCOREParameters(struct soap *soap, const char *URL, _ns1__Device_USCOREParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Device_Parameters", p->soap_type() == SOAP_TYPE__ns1__Device_USCOREParameters ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__Device_USCOREParameters(struct soap *soap, const char *URL, _ns1__Device_USCOREParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Device_Parameters", p->soap_type() == SOAP_TYPE__ns1__Device_USCOREParameters ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__Device_USCOREParameters(struct soap *soap, const char *URL, _ns1__Device_USCOREParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:Device_Parameters", p->soap_type() == SOAP_TYPE__ns1__Device_USCOREParameters ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__Device_USCOREParameters * SOAP_FMAC4 soap_get__ns1__Device_USCOREParameters(struct soap*, _ns1__Device_USCOREParameters *, const char*, const char*);

inline int soap_read__ns1__Device_USCOREParameters(struct soap *soap, _ns1__Device_USCOREParameters *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__Device_USCOREParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__Device_USCOREParameters(struct soap *soap, const char *URL, _ns1__Device_USCOREParameters *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__Device_USCOREParameters(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__Device_USCOREParameters(struct soap *soap, _ns1__Device_USCOREParameters *p)
{
	if (::soap_read__ns1__Device_USCOREParameters(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DxTestDataUploadResponse_DEFINED
#define SOAP_TYPE__ns1__DxTestDataUploadResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DxTestDataUploadResponse(struct soap*, const char*, int, const _ns1__DxTestDataUploadResponse *, const char*);
SOAP_FMAC3 _ns1__DxTestDataUploadResponse * SOAP_FMAC4 soap_in__ns1__DxTestDataUploadResponse(struct soap*, const char*, _ns1__DxTestDataUploadResponse *, const char*);
SOAP_FMAC1 _ns1__DxTestDataUploadResponse * SOAP_FMAC2 soap_instantiate__ns1__DxTestDataUploadResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DxTestDataUploadResponse * soap_new__ns1__DxTestDataUploadResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DxTestDataUploadResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__DxTestDataUploadResponse * soap_new_req__ns1__DxTestDataUploadResponse(
	struct soap *soap)
{
	_ns1__DxTestDataUploadResponse *_p = ::soap_new__ns1__DxTestDataUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__DxTestDataUploadResponse * soap_new_set__ns1__DxTestDataUploadResponse(
	struct soap *soap,
	std::string *DxTestDataUploadResult)
{
	_ns1__DxTestDataUploadResponse *_p = ::soap_new__ns1__DxTestDataUploadResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DxTestDataUploadResponse::DxTestDataUploadResult = DxTestDataUploadResult;
	}
	return _p;
}

inline int soap_write__ns1__DxTestDataUploadResponse(struct soap *soap, _ns1__DxTestDataUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxTestDataUploadResponse", p->soap_type() == SOAP_TYPE__ns1__DxTestDataUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DxTestDataUploadResponse(struct soap *soap, const char *URL, _ns1__DxTestDataUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxTestDataUploadResponse", p->soap_type() == SOAP_TYPE__ns1__DxTestDataUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__DxTestDataUploadResponse(struct soap *soap, const char *URL, _ns1__DxTestDataUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxTestDataUploadResponse", p->soap_type() == SOAP_TYPE__ns1__DxTestDataUploadResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DxTestDataUploadResponse(struct soap *soap, const char *URL, _ns1__DxTestDataUploadResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxTestDataUploadResponse", p->soap_type() == SOAP_TYPE__ns1__DxTestDataUploadResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DxTestDataUploadResponse * SOAP_FMAC4 soap_get__ns1__DxTestDataUploadResponse(struct soap*, _ns1__DxTestDataUploadResponse *, const char*, const char*);

inline int soap_read__ns1__DxTestDataUploadResponse(struct soap *soap, _ns1__DxTestDataUploadResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__DxTestDataUploadResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DxTestDataUploadResponse(struct soap *soap, const char *URL, _ns1__DxTestDataUploadResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__DxTestDataUploadResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DxTestDataUploadResponse(struct soap *soap, _ns1__DxTestDataUploadResponse *p)
{
	if (::soap_read__ns1__DxTestDataUploadResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__DxTestDataUpload_DEFINED
#define SOAP_TYPE__ns1__DxTestDataUpload_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__DxTestDataUpload(struct soap*, const char*, int, const _ns1__DxTestDataUpload *, const char*);
SOAP_FMAC3 _ns1__DxTestDataUpload * SOAP_FMAC4 soap_in__ns1__DxTestDataUpload(struct soap*, const char*, _ns1__DxTestDataUpload *, const char*);
SOAP_FMAC1 _ns1__DxTestDataUpload * SOAP_FMAC2 soap_instantiate__ns1__DxTestDataUpload(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__DxTestDataUpload * soap_new__ns1__DxTestDataUpload(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__DxTestDataUpload(soap, n, NULL, NULL, NULL);
}

inline _ns1__DxTestDataUpload * soap_new_req__ns1__DxTestDataUpload(
	struct soap *soap,
	int M_USCOREFLAG)
{
	_ns1__DxTestDataUpload *_p = ::soap_new__ns1__DxTestDataUpload(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DxTestDataUpload::M_USCOREFLAG = M_USCOREFLAG;
	}
	return _p;
}

inline _ns1__DxTestDataUpload * soap_new_set__ns1__DxTestDataUpload(
	struct soap *soap,
	int M_USCOREFLAG,
	std::string *M_USCOREDEVICE_USCORESN,
	std::string *M_USCOREWORKSTATION_USCORESN,
	std::string *M_USCOREEMP_USCORENO,
	std::string *M_USCOREMO,
	std::string *M_USCORECONTAINER_USCORESN,
	std::string *M_USCORESN,
	std::string *M_USCOREUNION_USCORESN,
	std::string *M_USCORELEVEL,
	std::string *M_USCOREEC_USCOREFLAG,
	std::string *M_USCOREITEMVALUE,
	std::string *M_USCORETEST_USCORETIME,
	std::string *M_USCOREDECRIPTION)
{
	_ns1__DxTestDataUpload *_p = ::soap_new__ns1__DxTestDataUpload(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__DxTestDataUpload::M_USCOREFLAG = M_USCOREFLAG;
		_p->_ns1__DxTestDataUpload::M_USCOREDEVICE_USCORESN = M_USCOREDEVICE_USCORESN;
		_p->_ns1__DxTestDataUpload::M_USCOREWORKSTATION_USCORESN = M_USCOREWORKSTATION_USCORESN;
		_p->_ns1__DxTestDataUpload::M_USCOREEMP_USCORENO = M_USCOREEMP_USCORENO;
		_p->_ns1__DxTestDataUpload::M_USCOREMO = M_USCOREMO;
		_p->_ns1__DxTestDataUpload::M_USCORECONTAINER_USCORESN = M_USCORECONTAINER_USCORESN;
		_p->_ns1__DxTestDataUpload::M_USCORESN = M_USCORESN;
		_p->_ns1__DxTestDataUpload::M_USCOREUNION_USCORESN = M_USCOREUNION_USCORESN;
		_p->_ns1__DxTestDataUpload::M_USCORELEVEL = M_USCORELEVEL;
		_p->_ns1__DxTestDataUpload::M_USCOREEC_USCOREFLAG = M_USCOREEC_USCOREFLAG;
		_p->_ns1__DxTestDataUpload::M_USCOREITEMVALUE = M_USCOREITEMVALUE;
		_p->_ns1__DxTestDataUpload::M_USCORETEST_USCORETIME = M_USCORETEST_USCORETIME;
		_p->_ns1__DxTestDataUpload::M_USCOREDECRIPTION = M_USCOREDECRIPTION;
	}
	return _p;
}

inline int soap_write__ns1__DxTestDataUpload(struct soap *soap, _ns1__DxTestDataUpload const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxTestDataUpload", p->soap_type() == SOAP_TYPE__ns1__DxTestDataUpload ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__DxTestDataUpload(struct soap *soap, const char *URL, _ns1__DxTestDataUpload const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxTestDataUpload", p->soap_type() == SOAP_TYPE__ns1__DxTestDataUpload ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__DxTestDataUpload(struct soap *soap, const char *URL, _ns1__DxTestDataUpload const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxTestDataUpload", p->soap_type() == SOAP_TYPE__ns1__DxTestDataUpload ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__DxTestDataUpload(struct soap *soap, const char *URL, _ns1__DxTestDataUpload const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:DxTestDataUpload", p->soap_type() == SOAP_TYPE__ns1__DxTestDataUpload ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__DxTestDataUpload * SOAP_FMAC4 soap_get__ns1__DxTestDataUpload(struct soap*, _ns1__DxTestDataUpload *, const char*, const char*);

inline int soap_read__ns1__DxTestDataUpload(struct soap *soap, _ns1__DxTestDataUpload *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__DxTestDataUpload(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__DxTestDataUpload(struct soap *soap, const char *URL, _ns1__DxTestDataUpload *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__DxTestDataUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__DxTestDataUpload(struct soap *soap, _ns1__DxTestDataUpload *p)
{
	if (::soap_read__ns1__DxTestDataUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetStringResponse_DEFINED
#define SOAP_TYPE__ns1__GetStringResponse_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetStringResponse(struct soap*, const char*, int, const _ns1__GetStringResponse *, const char*);
SOAP_FMAC3 _ns1__GetStringResponse * SOAP_FMAC4 soap_in__ns1__GetStringResponse(struct soap*, const char*, _ns1__GetStringResponse *, const char*);
SOAP_FMAC1 _ns1__GetStringResponse * SOAP_FMAC2 soap_instantiate__ns1__GetStringResponse(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetStringResponse * soap_new__ns1__GetStringResponse(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetStringResponse(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetStringResponse * soap_new_req__ns1__GetStringResponse(
	struct soap *soap)
{
	_ns1__GetStringResponse *_p = ::soap_new__ns1__GetStringResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetStringResponse * soap_new_set__ns1__GetStringResponse(
	struct soap *soap,
	std::string *GetStringResult)
{
	_ns1__GetStringResponse *_p = ::soap_new__ns1__GetStringResponse(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetStringResponse::GetStringResult = GetStringResult;
	}
	return _p;
}

inline int soap_write__ns1__GetStringResponse(struct soap *soap, _ns1__GetStringResponse const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStringResponse", p->soap_type() == SOAP_TYPE__ns1__GetStringResponse ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetStringResponse(struct soap *soap, const char *URL, _ns1__GetStringResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStringResponse", p->soap_type() == SOAP_TYPE__ns1__GetStringResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetStringResponse(struct soap *soap, const char *URL, _ns1__GetStringResponse const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStringResponse", p->soap_type() == SOAP_TYPE__ns1__GetStringResponse ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetStringResponse(struct soap *soap, const char *URL, _ns1__GetStringResponse const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetStringResponse", p->soap_type() == SOAP_TYPE__ns1__GetStringResponse ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetStringResponse * SOAP_FMAC4 soap_get__ns1__GetStringResponse(struct soap*, _ns1__GetStringResponse *, const char*, const char*);

inline int soap_read__ns1__GetStringResponse(struct soap *soap, _ns1__GetStringResponse *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetStringResponse(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetStringResponse(struct soap *soap, const char *URL, _ns1__GetStringResponse *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetStringResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetStringResponse(struct soap *soap, _ns1__GetStringResponse *p)
{
	if (::soap_read__ns1__GetStringResponse(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__ns1__GetString_DEFINED
#define SOAP_TYPE__ns1__GetString_DEFINED
SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__GetString(struct soap*, const char*, int, const _ns1__GetString *, const char*);
SOAP_FMAC3 _ns1__GetString * SOAP_FMAC4 soap_in__ns1__GetString(struct soap*, const char*, _ns1__GetString *, const char*);
SOAP_FMAC1 _ns1__GetString * SOAP_FMAC2 soap_instantiate__ns1__GetString(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__GetString * soap_new__ns1__GetString(struct soap *soap, int n = -1)
{
	return soap_instantiate__ns1__GetString(soap, n, NULL, NULL, NULL);
}

inline _ns1__GetString * soap_new_req__ns1__GetString(
	struct soap *soap)
{
	_ns1__GetString *_p = ::soap_new__ns1__GetString(soap);
	if (_p)
	{	_p->soap_default(soap);
	}
	return _p;
}

inline _ns1__GetString * soap_new_set__ns1__GetString(
	struct soap *soap,
	std::string *strJSON)
{
	_ns1__GetString *_p = ::soap_new__ns1__GetString(soap);
	if (_p)
	{	_p->soap_default(soap);
		_p->_ns1__GetString::strJSON = strJSON;
	}
	return _p;
}

inline int soap_write__ns1__GetString(struct soap *soap, _ns1__GetString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetString", p->soap_type() == SOAP_TYPE__ns1__GetString ? "" : NULL) || soap_end_send(soap))
		return soap->error;
	return SOAP_OK;
}

inline int soap_PUT__ns1__GetString(struct soap *soap, const char *URL, _ns1__GetString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetString", p->soap_type() == SOAP_TYPE__ns1__GetString ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__ns1__GetString(struct soap *soap, const char *URL, _ns1__GetString const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetString", p->soap_type() == SOAP_TYPE__ns1__GetString ? "" : NULL) || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__ns1__GetString(struct soap *soap, const char *URL, _ns1__GetString const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (p->soap_serialize(soap), 0) || p->soap_put(soap, "ns1:GetString", p->soap_type() == SOAP_TYPE__ns1__GetString ? "" : NULL) || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 _ns1__GetString * SOAP_FMAC4 soap_get__ns1__GetString(struct soap*, _ns1__GetString *, const char*, const char*);

inline int soap_read__ns1__GetString(struct soap *soap, _ns1__GetString *p)
{
	if (p)
	{	p->soap_default(soap);
		if (soap_begin_recv(soap) || ::soap_get__ns1__GetString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__ns1__GetString(struct soap *soap, const char *URL, _ns1__GetString *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__ns1__GetString(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__ns1__GetString(struct soap *soap, _ns1__GetString *p)
{
	if (::soap_read__ns1__GetString(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(
	struct soap *soap)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(
	struct soap *soap,
	char *faultcode,
	char *faultstring,
	char *faultactor,
	struct SOAP_ENV__Detail *detail,
	struct SOAP_ENV__Code *SOAP_ENV__Code,
	struct SOAP_ENV__Reason *SOAP_ENV__Reason,
	char *SOAP_ENV__Node,
	char *SOAP_ENV__Role,
	struct SOAP_ENV__Detail *SOAP_ENV__Detail)
{
	struct SOAP_ENV__Fault *_p = ::soap_new_SOAP_ENV__Fault(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Fault(soap, _p);
		_p->faultcode = faultcode;
		_p->faultstring = faultstring;
		_p->faultactor = faultactor;
		_p->detail = detail;
		_p->SOAP_ENV__Code = SOAP_ENV__Code;
		_p->SOAP_ENV__Reason = SOAP_ENV__Reason;
		_p->SOAP_ENV__Node = SOAP_ENV__Node;
		_p->SOAP_ENV__Role = SOAP_ENV__Role;
		_p->SOAP_ENV__Detail = SOAP_ENV__Detail;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_write_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Fault(soap, p), 0) || ::soap_put_SOAP_ENV__Fault(soap, p, "SOAP-ENV:Fault", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

inline int soap_read_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Fault(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Fault(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Fault(struct soap *soap, const char *URL, struct SOAP_ENV__Fault *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p)
{
	if (::soap_read_SOAP_ENV__Fault(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(
	struct soap *soap)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(
	struct soap *soap,
	char *SOAP_ENV__Text)
{
	struct SOAP_ENV__Reason *_p = ::soap_new_SOAP_ENV__Reason(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Reason(soap, _p);
		_p->SOAP_ENV__Text = SOAP_ENV__Text;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_write_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Reason(soap, p), 0) || ::soap_put_SOAP_ENV__Reason(soap, p, "SOAP-ENV:Reason", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

inline int soap_read_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Reason(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Reason(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Reason(struct soap *soap, const char *URL, struct SOAP_ENV__Reason *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p)
{
	if (::soap_read_SOAP_ENV__Reason(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(
	struct soap *soap,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(
	struct soap *soap,
	char *__any,
	int __type,
	void *fault)
{
	struct SOAP_ENV__Detail *_p = ::soap_new_SOAP_ENV__Detail(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Detail(soap, _p);
		_p->__any = __any;
		_p->__type = __type;
		_p->fault = fault;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_write_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Detail(soap, p), 0) || ::soap_put_SOAP_ENV__Detail(soap, p, "SOAP-ENV:Detail", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

inline int soap_read_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Detail(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Detail(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Detail(struct soap *soap, const char *URL, struct SOAP_ENV__Detail *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p)
{
	if (::soap_read_SOAP_ENV__Detail(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(
	struct soap *soap)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(
	struct soap *soap,
	char *SOAP_ENV__Value,
	struct SOAP_ENV__Code *SOAP_ENV__Subcode)
{
	struct SOAP_ENV__Code *_p = ::soap_new_SOAP_ENV__Code(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Code(soap, _p);
		_p->SOAP_ENV__Value = SOAP_ENV__Value;
		_p->SOAP_ENV__Subcode = SOAP_ENV__Subcode;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_write_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Code(soap, p), 0) || ::soap_put_SOAP_ENV__Code(soap, p, "SOAP-ENV:Code", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

inline int soap_read_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Code(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Code(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Code(struct soap *soap, const char *URL, struct SOAP_ENV__Code *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p)
{
	if (::soap_read_SOAP_ENV__Code(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);
SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1)
{
	return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL);
}

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(
	struct soap *soap)
{
	struct SOAP_ENV__Header *_p = ::soap_new_SOAP_ENV__Header(soap);
	if (_p)
	{	::soap_default_SOAP_ENV__Header(soap, _p);
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_write_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize_SOAP_ENV__Header(soap, p), 0) || ::soap_put_SOAP_ENV__Header(soap, p, "SOAP-ENV:Header", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

inline int soap_read_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (p)
	{	::soap_default_SOAP_ENV__Header(soap, p);
		if (soap_begin_recv(soap) || ::soap_get_SOAP_ENV__Header(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_SOAP_ENV__Header(struct soap *soap, const char *URL, struct SOAP_ENV__Header *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p)
{
	if (::soap_read_SOAP_ENV__Header(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

#ifndef SOAP_TYPE___ns1__DxDataUploadJson__DEFINED
#define SOAP_TYPE___ns1__DxDataUploadJson__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DxDataUploadJson_(struct soap*, struct __ns1__DxDataUploadJson_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DxDataUploadJson_(struct soap*, const struct __ns1__DxDataUploadJson_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DxDataUploadJson_(struct soap*, const char*, int, const struct __ns1__DxDataUploadJson_ *, const char*);
SOAP_FMAC3 struct __ns1__DxDataUploadJson_ * SOAP_FMAC4 soap_in___ns1__DxDataUploadJson_(struct soap*, const char*, struct __ns1__DxDataUploadJson_ *, const char*);
SOAP_FMAC1 struct __ns1__DxDataUploadJson_ * SOAP_FMAC2 soap_instantiate___ns1__DxDataUploadJson_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DxDataUploadJson_ * soap_new___ns1__DxDataUploadJson_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DxDataUploadJson_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DxDataUploadJson_ * soap_new_req___ns1__DxDataUploadJson_(
	struct soap *soap)
{
	struct __ns1__DxDataUploadJson_ *_p = ::soap_new___ns1__DxDataUploadJson_(soap);
	if (_p)
	{	::soap_default___ns1__DxDataUploadJson_(soap, _p);
	}
	return _p;
}

inline struct __ns1__DxDataUploadJson_ * soap_new_set___ns1__DxDataUploadJson_(
	struct soap *soap,
	_ns1__DxDataUploadJson *ns1__DxDataUploadJson)
{
	struct __ns1__DxDataUploadJson_ *_p = ::soap_new___ns1__DxDataUploadJson_(soap);
	if (_p)
	{	::soap_default___ns1__DxDataUploadJson_(soap, _p);
		_p->ns1__DxDataUploadJson = ns1__DxDataUploadJson;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DxDataUploadJson_(struct soap*, const struct __ns1__DxDataUploadJson_ *, const char*, const char*);

inline int soap_write___ns1__DxDataUploadJson_(struct soap *soap, struct __ns1__DxDataUploadJson_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__DxDataUploadJson_(soap, p), 0) || ::soap_put___ns1__DxDataUploadJson_(soap, p, "-ns1:DxDataUploadJson", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DxDataUploadJson_(struct soap *soap, const char *URL, struct __ns1__DxDataUploadJson_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DxDataUploadJson_(soap, p), 0) || ::soap_put___ns1__DxDataUploadJson_(soap, p, "-ns1:DxDataUploadJson", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__DxDataUploadJson_(struct soap *soap, const char *URL, struct __ns1__DxDataUploadJson_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DxDataUploadJson_(soap, p), 0) || ::soap_put___ns1__DxDataUploadJson_(soap, p, "-ns1:DxDataUploadJson", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DxDataUploadJson_(struct soap *soap, const char *URL, struct __ns1__DxDataUploadJson_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DxDataUploadJson_(soap, p), 0) || ::soap_put___ns1__DxDataUploadJson_(soap, p, "-ns1:DxDataUploadJson", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DxDataUploadJson_ * SOAP_FMAC4 soap_get___ns1__DxDataUploadJson_(struct soap*, struct __ns1__DxDataUploadJson_ *, const char*, const char*);

inline int soap_read___ns1__DxDataUploadJson_(struct soap *soap, struct __ns1__DxDataUploadJson_ *p)
{
	if (p)
	{	::soap_default___ns1__DxDataUploadJson_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__DxDataUploadJson_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DxDataUploadJson_(struct soap *soap, const char *URL, struct __ns1__DxDataUploadJson_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__DxDataUploadJson_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DxDataUploadJson_(struct soap *soap, struct __ns1__DxDataUploadJson_ *p)
{
	if (::soap_read___ns1__DxDataUploadJson_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DSDataCreateJSON__DEFINED
#define SOAP_TYPE___ns1__DSDataCreateJSON__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DSDataCreateJSON_(struct soap*, struct __ns1__DSDataCreateJSON_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DSDataCreateJSON_(struct soap*, const struct __ns1__DSDataCreateJSON_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DSDataCreateJSON_(struct soap*, const char*, int, const struct __ns1__DSDataCreateJSON_ *, const char*);
SOAP_FMAC3 struct __ns1__DSDataCreateJSON_ * SOAP_FMAC4 soap_in___ns1__DSDataCreateJSON_(struct soap*, const char*, struct __ns1__DSDataCreateJSON_ *, const char*);
SOAP_FMAC1 struct __ns1__DSDataCreateJSON_ * SOAP_FMAC2 soap_instantiate___ns1__DSDataCreateJSON_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DSDataCreateJSON_ * soap_new___ns1__DSDataCreateJSON_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DSDataCreateJSON_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DSDataCreateJSON_ * soap_new_req___ns1__DSDataCreateJSON_(
	struct soap *soap)
{
	struct __ns1__DSDataCreateJSON_ *_p = ::soap_new___ns1__DSDataCreateJSON_(soap);
	if (_p)
	{	::soap_default___ns1__DSDataCreateJSON_(soap, _p);
	}
	return _p;
}

inline struct __ns1__DSDataCreateJSON_ * soap_new_set___ns1__DSDataCreateJSON_(
	struct soap *soap,
	_ns1__DSDataCreateJSON *ns1__DSDataCreateJSON)
{
	struct __ns1__DSDataCreateJSON_ *_p = ::soap_new___ns1__DSDataCreateJSON_(soap);
	if (_p)
	{	::soap_default___ns1__DSDataCreateJSON_(soap, _p);
		_p->ns1__DSDataCreateJSON = ns1__DSDataCreateJSON;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DSDataCreateJSON_(struct soap*, const struct __ns1__DSDataCreateJSON_ *, const char*, const char*);

inline int soap_write___ns1__DSDataCreateJSON_(struct soap *soap, struct __ns1__DSDataCreateJSON_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__DSDataCreateJSON_(soap, p), 0) || ::soap_put___ns1__DSDataCreateJSON_(soap, p, "-ns1:DSDataCreateJSON", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DSDataCreateJSON_(struct soap *soap, const char *URL, struct __ns1__DSDataCreateJSON_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DSDataCreateJSON_(soap, p), 0) || ::soap_put___ns1__DSDataCreateJSON_(soap, p, "-ns1:DSDataCreateJSON", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__DSDataCreateJSON_(struct soap *soap, const char *URL, struct __ns1__DSDataCreateJSON_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DSDataCreateJSON_(soap, p), 0) || ::soap_put___ns1__DSDataCreateJSON_(soap, p, "-ns1:DSDataCreateJSON", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DSDataCreateJSON_(struct soap *soap, const char *URL, struct __ns1__DSDataCreateJSON_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DSDataCreateJSON_(soap, p), 0) || ::soap_put___ns1__DSDataCreateJSON_(soap, p, "-ns1:DSDataCreateJSON", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DSDataCreateJSON_ * SOAP_FMAC4 soap_get___ns1__DSDataCreateJSON_(struct soap*, struct __ns1__DSDataCreateJSON_ *, const char*, const char*);

inline int soap_read___ns1__DSDataCreateJSON_(struct soap *soap, struct __ns1__DSDataCreateJSON_ *p)
{
	if (p)
	{	::soap_default___ns1__DSDataCreateJSON_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__DSDataCreateJSON_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DSDataCreateJSON_(struct soap *soap, const char *URL, struct __ns1__DSDataCreateJSON_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__DSDataCreateJSON_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DSDataCreateJSON_(struct soap *soap, struct __ns1__DSDataCreateJSON_ *p)
{
	if (::soap_read___ns1__DSDataCreateJSON_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Device_USCOREParameters__DEFINED
#define SOAP_TYPE___ns1__Device_USCOREParameters__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Device_USCOREParameters_(struct soap*, struct __ns1__Device_USCOREParameters_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Device_USCOREParameters_(struct soap*, const struct __ns1__Device_USCOREParameters_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Device_USCOREParameters_(struct soap*, const char*, int, const struct __ns1__Device_USCOREParameters_ *, const char*);
SOAP_FMAC3 struct __ns1__Device_USCOREParameters_ * SOAP_FMAC4 soap_in___ns1__Device_USCOREParameters_(struct soap*, const char*, struct __ns1__Device_USCOREParameters_ *, const char*);
SOAP_FMAC1 struct __ns1__Device_USCOREParameters_ * SOAP_FMAC2 soap_instantiate___ns1__Device_USCOREParameters_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Device_USCOREParameters_ * soap_new___ns1__Device_USCOREParameters_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Device_USCOREParameters_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Device_USCOREParameters_ * soap_new_req___ns1__Device_USCOREParameters_(
	struct soap *soap)
{
	struct __ns1__Device_USCOREParameters_ *_p = ::soap_new___ns1__Device_USCOREParameters_(soap);
	if (_p)
	{	::soap_default___ns1__Device_USCOREParameters_(soap, _p);
	}
	return _p;
}

inline struct __ns1__Device_USCOREParameters_ * soap_new_set___ns1__Device_USCOREParameters_(
	struct soap *soap,
	_ns1__Device_USCOREParameters *ns1__Device_USCOREParameters)
{
	struct __ns1__Device_USCOREParameters_ *_p = ::soap_new___ns1__Device_USCOREParameters_(soap);
	if (_p)
	{	::soap_default___ns1__Device_USCOREParameters_(soap, _p);
		_p->ns1__Device_USCOREParameters = ns1__Device_USCOREParameters;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Device_USCOREParameters_(struct soap*, const struct __ns1__Device_USCOREParameters_ *, const char*, const char*);

inline int soap_write___ns1__Device_USCOREParameters_(struct soap *soap, struct __ns1__Device_USCOREParameters_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Device_USCOREParameters_(soap, p), 0) || ::soap_put___ns1__Device_USCOREParameters_(soap, p, "-ns1:Device_Parameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Device_USCOREParameters_(struct soap *soap, const char *URL, struct __ns1__Device_USCOREParameters_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Device_USCOREParameters_(soap, p), 0) || ::soap_put___ns1__Device_USCOREParameters_(soap, p, "-ns1:Device_Parameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Device_USCOREParameters_(struct soap *soap, const char *URL, struct __ns1__Device_USCOREParameters_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Device_USCOREParameters_(soap, p), 0) || ::soap_put___ns1__Device_USCOREParameters_(soap, p, "-ns1:Device_Parameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Device_USCOREParameters_(struct soap *soap, const char *URL, struct __ns1__Device_USCOREParameters_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Device_USCOREParameters_(soap, p), 0) || ::soap_put___ns1__Device_USCOREParameters_(soap, p, "-ns1:Device_Parameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Device_USCOREParameters_ * SOAP_FMAC4 soap_get___ns1__Device_USCOREParameters_(struct soap*, struct __ns1__Device_USCOREParameters_ *, const char*, const char*);

inline int soap_read___ns1__Device_USCOREParameters_(struct soap *soap, struct __ns1__Device_USCOREParameters_ *p)
{
	if (p)
	{	::soap_default___ns1__Device_USCOREParameters_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Device_USCOREParameters_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Device_USCOREParameters_(struct soap *soap, const char *URL, struct __ns1__Device_USCOREParameters_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Device_USCOREParameters_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Device_USCOREParameters_(struct soap *soap, struct __ns1__Device_USCOREParameters_ *p)
{
	if (::soap_read___ns1__Device_USCOREParameters_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DxTestDataUpload__DEFINED
#define SOAP_TYPE___ns1__DxTestDataUpload__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DxTestDataUpload_(struct soap*, struct __ns1__DxTestDataUpload_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DxTestDataUpload_(struct soap*, const struct __ns1__DxTestDataUpload_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DxTestDataUpload_(struct soap*, const char*, int, const struct __ns1__DxTestDataUpload_ *, const char*);
SOAP_FMAC3 struct __ns1__DxTestDataUpload_ * SOAP_FMAC4 soap_in___ns1__DxTestDataUpload_(struct soap*, const char*, struct __ns1__DxTestDataUpload_ *, const char*);
SOAP_FMAC1 struct __ns1__DxTestDataUpload_ * SOAP_FMAC2 soap_instantiate___ns1__DxTestDataUpload_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DxTestDataUpload_ * soap_new___ns1__DxTestDataUpload_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DxTestDataUpload_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DxTestDataUpload_ * soap_new_req___ns1__DxTestDataUpload_(
	struct soap *soap)
{
	struct __ns1__DxTestDataUpload_ *_p = ::soap_new___ns1__DxTestDataUpload_(soap);
	if (_p)
	{	::soap_default___ns1__DxTestDataUpload_(soap, _p);
	}
	return _p;
}

inline struct __ns1__DxTestDataUpload_ * soap_new_set___ns1__DxTestDataUpload_(
	struct soap *soap,
	_ns1__DxTestDataUpload *ns1__DxTestDataUpload)
{
	struct __ns1__DxTestDataUpload_ *_p = ::soap_new___ns1__DxTestDataUpload_(soap);
	if (_p)
	{	::soap_default___ns1__DxTestDataUpload_(soap, _p);
		_p->ns1__DxTestDataUpload = ns1__DxTestDataUpload;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DxTestDataUpload_(struct soap*, const struct __ns1__DxTestDataUpload_ *, const char*, const char*);

inline int soap_write___ns1__DxTestDataUpload_(struct soap *soap, struct __ns1__DxTestDataUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__DxTestDataUpload_(soap, p), 0) || ::soap_put___ns1__DxTestDataUpload_(soap, p, "-ns1:DxTestDataUpload", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DxTestDataUpload_(struct soap *soap, const char *URL, struct __ns1__DxTestDataUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DxTestDataUpload_(soap, p), 0) || ::soap_put___ns1__DxTestDataUpload_(soap, p, "-ns1:DxTestDataUpload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__DxTestDataUpload_(struct soap *soap, const char *URL, struct __ns1__DxTestDataUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DxTestDataUpload_(soap, p), 0) || ::soap_put___ns1__DxTestDataUpload_(soap, p, "-ns1:DxTestDataUpload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DxTestDataUpload_(struct soap *soap, const char *URL, struct __ns1__DxTestDataUpload_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DxTestDataUpload_(soap, p), 0) || ::soap_put___ns1__DxTestDataUpload_(soap, p, "-ns1:DxTestDataUpload", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DxTestDataUpload_ * SOAP_FMAC4 soap_get___ns1__DxTestDataUpload_(struct soap*, struct __ns1__DxTestDataUpload_ *, const char*, const char*);

inline int soap_read___ns1__DxTestDataUpload_(struct soap *soap, struct __ns1__DxTestDataUpload_ *p)
{
	if (p)
	{	::soap_default___ns1__DxTestDataUpload_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__DxTestDataUpload_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DxTestDataUpload_(struct soap *soap, const char *URL, struct __ns1__DxTestDataUpload_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__DxTestDataUpload_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DxTestDataUpload_(struct soap *soap, struct __ns1__DxTestDataUpload_ *p)
{
	if (::soap_read___ns1__DxTestDataUpload_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetString__DEFINED
#define SOAP_TYPE___ns1__GetString__DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetString_(struct soap*, struct __ns1__GetString_ *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetString_(struct soap*, const struct __ns1__GetString_ *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetString_(struct soap*, const char*, int, const struct __ns1__GetString_ *, const char*);
SOAP_FMAC3 struct __ns1__GetString_ * SOAP_FMAC4 soap_in___ns1__GetString_(struct soap*, const char*, struct __ns1__GetString_ *, const char*);
SOAP_FMAC1 struct __ns1__GetString_ * SOAP_FMAC2 soap_instantiate___ns1__GetString_(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetString_ * soap_new___ns1__GetString_(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetString_(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetString_ * soap_new_req___ns1__GetString_(
	struct soap *soap)
{
	struct __ns1__GetString_ *_p = ::soap_new___ns1__GetString_(soap);
	if (_p)
	{	::soap_default___ns1__GetString_(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetString_ * soap_new_set___ns1__GetString_(
	struct soap *soap,
	_ns1__GetString *ns1__GetString)
{
	struct __ns1__GetString_ *_p = ::soap_new___ns1__GetString_(soap);
	if (_p)
	{	::soap_default___ns1__GetString_(soap, _p);
		_p->ns1__GetString = ns1__GetString;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetString_(struct soap*, const struct __ns1__GetString_ *, const char*, const char*);

inline int soap_write___ns1__GetString_(struct soap *soap, struct __ns1__GetString_ const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetString_(soap, p), 0) || ::soap_put___ns1__GetString_(soap, p, "-ns1:GetString", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetString_(struct soap *soap, const char *URL, struct __ns1__GetString_ const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetString_(soap, p), 0) || ::soap_put___ns1__GetString_(soap, p, "-ns1:GetString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetString_(struct soap *soap, const char *URL, struct __ns1__GetString_ const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetString_(soap, p), 0) || ::soap_put___ns1__GetString_(soap, p, "-ns1:GetString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetString_(struct soap *soap, const char *URL, struct __ns1__GetString_ const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetString_(soap, p), 0) || ::soap_put___ns1__GetString_(soap, p, "-ns1:GetString", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetString_ * SOAP_FMAC4 soap_get___ns1__GetString_(struct soap*, struct __ns1__GetString_ *, const char*, const char*);

inline int soap_read___ns1__GetString_(struct soap *soap, struct __ns1__GetString_ *p)
{
	if (p)
	{	::soap_default___ns1__GetString_(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetString_(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetString_(struct soap *soap, const char *URL, struct __ns1__GetString_ *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetString_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetString_(struct soap *soap, struct __ns1__GetString_ *p)
{
	if (::soap_read___ns1__GetString_(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DxDataUploadJson_DEFINED
#define SOAP_TYPE___ns1__DxDataUploadJson_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DxDataUploadJson(struct soap*, struct __ns1__DxDataUploadJson *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DxDataUploadJson(struct soap*, const struct __ns1__DxDataUploadJson *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DxDataUploadJson(struct soap*, const char*, int, const struct __ns1__DxDataUploadJson *, const char*);
SOAP_FMAC3 struct __ns1__DxDataUploadJson * SOAP_FMAC4 soap_in___ns1__DxDataUploadJson(struct soap*, const char*, struct __ns1__DxDataUploadJson *, const char*);
SOAP_FMAC1 struct __ns1__DxDataUploadJson * SOAP_FMAC2 soap_instantiate___ns1__DxDataUploadJson(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DxDataUploadJson * soap_new___ns1__DxDataUploadJson(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DxDataUploadJson(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DxDataUploadJson * soap_new_req___ns1__DxDataUploadJson(
	struct soap *soap)
{
	struct __ns1__DxDataUploadJson *_p = ::soap_new___ns1__DxDataUploadJson(soap);
	if (_p)
	{	::soap_default___ns1__DxDataUploadJson(soap, _p);
	}
	return _p;
}

inline struct __ns1__DxDataUploadJson * soap_new_set___ns1__DxDataUploadJson(
	struct soap *soap,
	_ns1__DxDataUploadJson *ns1__DxDataUploadJson)
{
	struct __ns1__DxDataUploadJson *_p = ::soap_new___ns1__DxDataUploadJson(soap);
	if (_p)
	{	::soap_default___ns1__DxDataUploadJson(soap, _p);
		_p->ns1__DxDataUploadJson = ns1__DxDataUploadJson;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DxDataUploadJson(struct soap*, const struct __ns1__DxDataUploadJson *, const char*, const char*);

inline int soap_write___ns1__DxDataUploadJson(struct soap *soap, struct __ns1__DxDataUploadJson const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__DxDataUploadJson(soap, p), 0) || ::soap_put___ns1__DxDataUploadJson(soap, p, "-ns1:DxDataUploadJson", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DxDataUploadJson(struct soap *soap, const char *URL, struct __ns1__DxDataUploadJson const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DxDataUploadJson(soap, p), 0) || ::soap_put___ns1__DxDataUploadJson(soap, p, "-ns1:DxDataUploadJson", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__DxDataUploadJson(struct soap *soap, const char *URL, struct __ns1__DxDataUploadJson const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DxDataUploadJson(soap, p), 0) || ::soap_put___ns1__DxDataUploadJson(soap, p, "-ns1:DxDataUploadJson", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DxDataUploadJson(struct soap *soap, const char *URL, struct __ns1__DxDataUploadJson const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DxDataUploadJson(soap, p), 0) || ::soap_put___ns1__DxDataUploadJson(soap, p, "-ns1:DxDataUploadJson", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DxDataUploadJson * SOAP_FMAC4 soap_get___ns1__DxDataUploadJson(struct soap*, struct __ns1__DxDataUploadJson *, const char*, const char*);

inline int soap_read___ns1__DxDataUploadJson(struct soap *soap, struct __ns1__DxDataUploadJson *p)
{
	if (p)
	{	::soap_default___ns1__DxDataUploadJson(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__DxDataUploadJson(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DxDataUploadJson(struct soap *soap, const char *URL, struct __ns1__DxDataUploadJson *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__DxDataUploadJson(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DxDataUploadJson(struct soap *soap, struct __ns1__DxDataUploadJson *p)
{
	if (::soap_read___ns1__DxDataUploadJson(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DSDataCreateJSON_DEFINED
#define SOAP_TYPE___ns1__DSDataCreateJSON_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DSDataCreateJSON(struct soap*, struct __ns1__DSDataCreateJSON *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DSDataCreateJSON(struct soap*, const struct __ns1__DSDataCreateJSON *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DSDataCreateJSON(struct soap*, const char*, int, const struct __ns1__DSDataCreateJSON *, const char*);
SOAP_FMAC3 struct __ns1__DSDataCreateJSON * SOAP_FMAC4 soap_in___ns1__DSDataCreateJSON(struct soap*, const char*, struct __ns1__DSDataCreateJSON *, const char*);
SOAP_FMAC1 struct __ns1__DSDataCreateJSON * SOAP_FMAC2 soap_instantiate___ns1__DSDataCreateJSON(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DSDataCreateJSON * soap_new___ns1__DSDataCreateJSON(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DSDataCreateJSON(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DSDataCreateJSON * soap_new_req___ns1__DSDataCreateJSON(
	struct soap *soap)
{
	struct __ns1__DSDataCreateJSON *_p = ::soap_new___ns1__DSDataCreateJSON(soap);
	if (_p)
	{	::soap_default___ns1__DSDataCreateJSON(soap, _p);
	}
	return _p;
}

inline struct __ns1__DSDataCreateJSON * soap_new_set___ns1__DSDataCreateJSON(
	struct soap *soap,
	_ns1__DSDataCreateJSON *ns1__DSDataCreateJSON)
{
	struct __ns1__DSDataCreateJSON *_p = ::soap_new___ns1__DSDataCreateJSON(soap);
	if (_p)
	{	::soap_default___ns1__DSDataCreateJSON(soap, _p);
		_p->ns1__DSDataCreateJSON = ns1__DSDataCreateJSON;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DSDataCreateJSON(struct soap*, const struct __ns1__DSDataCreateJSON *, const char*, const char*);

inline int soap_write___ns1__DSDataCreateJSON(struct soap *soap, struct __ns1__DSDataCreateJSON const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__DSDataCreateJSON(soap, p), 0) || ::soap_put___ns1__DSDataCreateJSON(soap, p, "-ns1:DSDataCreateJSON", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DSDataCreateJSON(struct soap *soap, const char *URL, struct __ns1__DSDataCreateJSON const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DSDataCreateJSON(soap, p), 0) || ::soap_put___ns1__DSDataCreateJSON(soap, p, "-ns1:DSDataCreateJSON", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__DSDataCreateJSON(struct soap *soap, const char *URL, struct __ns1__DSDataCreateJSON const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DSDataCreateJSON(soap, p), 0) || ::soap_put___ns1__DSDataCreateJSON(soap, p, "-ns1:DSDataCreateJSON", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DSDataCreateJSON(struct soap *soap, const char *URL, struct __ns1__DSDataCreateJSON const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DSDataCreateJSON(soap, p), 0) || ::soap_put___ns1__DSDataCreateJSON(soap, p, "-ns1:DSDataCreateJSON", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DSDataCreateJSON * SOAP_FMAC4 soap_get___ns1__DSDataCreateJSON(struct soap*, struct __ns1__DSDataCreateJSON *, const char*, const char*);

inline int soap_read___ns1__DSDataCreateJSON(struct soap *soap, struct __ns1__DSDataCreateJSON *p)
{
	if (p)
	{	::soap_default___ns1__DSDataCreateJSON(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__DSDataCreateJSON(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DSDataCreateJSON(struct soap *soap, const char *URL, struct __ns1__DSDataCreateJSON *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__DSDataCreateJSON(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DSDataCreateJSON(struct soap *soap, struct __ns1__DSDataCreateJSON *p)
{
	if (::soap_read___ns1__DSDataCreateJSON(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__Device_USCOREParameters_DEFINED
#define SOAP_TYPE___ns1__Device_USCOREParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Device_USCOREParameters(struct soap*, struct __ns1__Device_USCOREParameters *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Device_USCOREParameters(struct soap*, const struct __ns1__Device_USCOREParameters *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Device_USCOREParameters(struct soap*, const char*, int, const struct __ns1__Device_USCOREParameters *, const char*);
SOAP_FMAC3 struct __ns1__Device_USCOREParameters * SOAP_FMAC4 soap_in___ns1__Device_USCOREParameters(struct soap*, const char*, struct __ns1__Device_USCOREParameters *, const char*);
SOAP_FMAC1 struct __ns1__Device_USCOREParameters * SOAP_FMAC2 soap_instantiate___ns1__Device_USCOREParameters(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__Device_USCOREParameters * soap_new___ns1__Device_USCOREParameters(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__Device_USCOREParameters(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__Device_USCOREParameters * soap_new_req___ns1__Device_USCOREParameters(
	struct soap *soap)
{
	struct __ns1__Device_USCOREParameters *_p = ::soap_new___ns1__Device_USCOREParameters(soap);
	if (_p)
	{	::soap_default___ns1__Device_USCOREParameters(soap, _p);
	}
	return _p;
}

inline struct __ns1__Device_USCOREParameters * soap_new_set___ns1__Device_USCOREParameters(
	struct soap *soap,
	_ns1__Device_USCOREParameters *ns1__Device_USCOREParameters)
{
	struct __ns1__Device_USCOREParameters *_p = ::soap_new___ns1__Device_USCOREParameters(soap);
	if (_p)
	{	::soap_default___ns1__Device_USCOREParameters(soap, _p);
		_p->ns1__Device_USCOREParameters = ns1__Device_USCOREParameters;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Device_USCOREParameters(struct soap*, const struct __ns1__Device_USCOREParameters *, const char*, const char*);

inline int soap_write___ns1__Device_USCOREParameters(struct soap *soap, struct __ns1__Device_USCOREParameters const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__Device_USCOREParameters(soap, p), 0) || ::soap_put___ns1__Device_USCOREParameters(soap, p, "-ns1:Device_Parameters", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__Device_USCOREParameters(struct soap *soap, const char *URL, struct __ns1__Device_USCOREParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Device_USCOREParameters(soap, p), 0) || ::soap_put___ns1__Device_USCOREParameters(soap, p, "-ns1:Device_Parameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__Device_USCOREParameters(struct soap *soap, const char *URL, struct __ns1__Device_USCOREParameters const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Device_USCOREParameters(soap, p), 0) || ::soap_put___ns1__Device_USCOREParameters(soap, p, "-ns1:Device_Parameters", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__Device_USCOREParameters(struct soap *soap, const char *URL, struct __ns1__Device_USCOREParameters const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__Device_USCOREParameters(soap, p), 0) || ::soap_put___ns1__Device_USCOREParameters(soap, p, "-ns1:Device_Parameters", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__Device_USCOREParameters * SOAP_FMAC4 soap_get___ns1__Device_USCOREParameters(struct soap*, struct __ns1__Device_USCOREParameters *, const char*, const char*);

inline int soap_read___ns1__Device_USCOREParameters(struct soap *soap, struct __ns1__Device_USCOREParameters *p)
{
	if (p)
	{	::soap_default___ns1__Device_USCOREParameters(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__Device_USCOREParameters(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__Device_USCOREParameters(struct soap *soap, const char *URL, struct __ns1__Device_USCOREParameters *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__Device_USCOREParameters(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__Device_USCOREParameters(struct soap *soap, struct __ns1__Device_USCOREParameters *p)
{
	if (::soap_read___ns1__Device_USCOREParameters(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__DxTestDataUpload_DEFINED
#define SOAP_TYPE___ns1__DxTestDataUpload_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DxTestDataUpload(struct soap*, struct __ns1__DxTestDataUpload *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DxTestDataUpload(struct soap*, const struct __ns1__DxTestDataUpload *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DxTestDataUpload(struct soap*, const char*, int, const struct __ns1__DxTestDataUpload *, const char*);
SOAP_FMAC3 struct __ns1__DxTestDataUpload * SOAP_FMAC4 soap_in___ns1__DxTestDataUpload(struct soap*, const char*, struct __ns1__DxTestDataUpload *, const char*);
SOAP_FMAC1 struct __ns1__DxTestDataUpload * SOAP_FMAC2 soap_instantiate___ns1__DxTestDataUpload(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__DxTestDataUpload * soap_new___ns1__DxTestDataUpload(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__DxTestDataUpload(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__DxTestDataUpload * soap_new_req___ns1__DxTestDataUpload(
	struct soap *soap)
{
	struct __ns1__DxTestDataUpload *_p = ::soap_new___ns1__DxTestDataUpload(soap);
	if (_p)
	{	::soap_default___ns1__DxTestDataUpload(soap, _p);
	}
	return _p;
}

inline struct __ns1__DxTestDataUpload * soap_new_set___ns1__DxTestDataUpload(
	struct soap *soap,
	_ns1__DxTestDataUpload *ns1__DxTestDataUpload)
{
	struct __ns1__DxTestDataUpload *_p = ::soap_new___ns1__DxTestDataUpload(soap);
	if (_p)
	{	::soap_default___ns1__DxTestDataUpload(soap, _p);
		_p->ns1__DxTestDataUpload = ns1__DxTestDataUpload;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DxTestDataUpload(struct soap*, const struct __ns1__DxTestDataUpload *, const char*, const char*);

inline int soap_write___ns1__DxTestDataUpload(struct soap *soap, struct __ns1__DxTestDataUpload const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__DxTestDataUpload(soap, p), 0) || ::soap_put___ns1__DxTestDataUpload(soap, p, "-ns1:DxTestDataUpload", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__DxTestDataUpload(struct soap *soap, const char *URL, struct __ns1__DxTestDataUpload const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DxTestDataUpload(soap, p), 0) || ::soap_put___ns1__DxTestDataUpload(soap, p, "-ns1:DxTestDataUpload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__DxTestDataUpload(struct soap *soap, const char *URL, struct __ns1__DxTestDataUpload const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DxTestDataUpload(soap, p), 0) || ::soap_put___ns1__DxTestDataUpload(soap, p, "-ns1:DxTestDataUpload", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__DxTestDataUpload(struct soap *soap, const char *URL, struct __ns1__DxTestDataUpload const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__DxTestDataUpload(soap, p), 0) || ::soap_put___ns1__DxTestDataUpload(soap, p, "-ns1:DxTestDataUpload", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__DxTestDataUpload * SOAP_FMAC4 soap_get___ns1__DxTestDataUpload(struct soap*, struct __ns1__DxTestDataUpload *, const char*, const char*);

inline int soap_read___ns1__DxTestDataUpload(struct soap *soap, struct __ns1__DxTestDataUpload *p)
{
	if (p)
	{	::soap_default___ns1__DxTestDataUpload(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__DxTestDataUpload(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__DxTestDataUpload(struct soap *soap, const char *URL, struct __ns1__DxTestDataUpload *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__DxTestDataUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__DxTestDataUpload(struct soap *soap, struct __ns1__DxTestDataUpload *p)
{
	if (::soap_read___ns1__DxTestDataUpload(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE___ns1__GetString_DEFINED
#define SOAP_TYPE___ns1__GetString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetString(struct soap*, struct __ns1__GetString *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetString(struct soap*, const struct __ns1__GetString *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetString(struct soap*, const char*, int, const struct __ns1__GetString *, const char*);
SOAP_FMAC3 struct __ns1__GetString * SOAP_FMAC4 soap_in___ns1__GetString(struct soap*, const char*, struct __ns1__GetString *, const char*);
SOAP_FMAC1 struct __ns1__GetString * SOAP_FMAC2 soap_instantiate___ns1__GetString(struct soap*, int, const char*, const char*, size_t*);

inline struct __ns1__GetString * soap_new___ns1__GetString(struct soap *soap, int n = -1)
{
	return soap_instantiate___ns1__GetString(soap, n, NULL, NULL, NULL);
}

inline struct __ns1__GetString * soap_new_req___ns1__GetString(
	struct soap *soap)
{
	struct __ns1__GetString *_p = ::soap_new___ns1__GetString(soap);
	if (_p)
	{	::soap_default___ns1__GetString(soap, _p);
	}
	return _p;
}

inline struct __ns1__GetString * soap_new_set___ns1__GetString(
	struct soap *soap,
	_ns1__GetString *ns1__GetString)
{
	struct __ns1__GetString *_p = ::soap_new___ns1__GetString(soap);
	if (_p)
	{	::soap_default___ns1__GetString(soap, _p);
		_p->ns1__GetString = ns1__GetString;
	}
	return _p;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetString(struct soap*, const struct __ns1__GetString *, const char*, const char*);

inline int soap_write___ns1__GetString(struct soap *soap, struct __ns1__GetString const*p)
{
	soap_free_temp(soap);
	if (soap_begin_send(soap) || (::soap_serialize___ns1__GetString(soap, p), 0) || ::soap_put___ns1__GetString(soap, p, "-ns1:GetString", "") || soap_end_send(soap))
			return soap->error;
	return SOAP_OK;
}

inline int soap_PUT___ns1__GetString(struct soap *soap, const char *URL, struct __ns1__GetString const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetString(soap, p), 0) || ::soap_put___ns1__GetString(soap, p, "-ns1:GetString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH___ns1__GetString(struct soap *soap, const char *URL, struct __ns1__GetString const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetString(soap, p), 0) || ::soap_put___ns1__GetString(soap, p, "-ns1:GetString", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send___ns1__GetString(struct soap *soap, const char *URL, struct __ns1__GetString const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (::soap_serialize___ns1__GetString(soap, p), 0) || ::soap_put___ns1__GetString(soap, p, "-ns1:GetString", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 struct __ns1__GetString * SOAP_FMAC4 soap_get___ns1__GetString(struct soap*, struct __ns1__GetString *, const char*, const char*);

inline int soap_read___ns1__GetString(struct soap *soap, struct __ns1__GetString *p)
{
	if (p)
	{	::soap_default___ns1__GetString(soap, p);
		if (soap_begin_recv(soap) || ::soap_get___ns1__GetString(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET___ns1__GetString(struct soap *soap, const char *URL, struct __ns1__GetString *p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read___ns1__GetString(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv___ns1__GetString(struct soap *soap, struct __ns1__GetString *p)
{
	if (::soap_read___ns1__GetString(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DxDataUploadJson_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DxDataUploadJson_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DxDataUploadJson(struct soap*, _ns1__DxDataUploadJson *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DxDataUploadJson(struct soap*, const char *, int, _ns1__DxDataUploadJson *const*, const char *);
SOAP_FMAC3 _ns1__DxDataUploadJson ** SOAP_FMAC4 soap_in_PointerTo_ns1__DxDataUploadJson(struct soap*, const char*, _ns1__DxDataUploadJson **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DxDataUploadJson(struct soap*, _ns1__DxDataUploadJson *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DxDataUploadJson ** SOAP_FMAC4 soap_get_PointerTo_ns1__DxDataUploadJson(struct soap*, _ns1__DxDataUploadJson **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DSDataCreateJSON_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DSDataCreateJSON_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DSDataCreateJSON(struct soap*, _ns1__DSDataCreateJSON *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DSDataCreateJSON(struct soap*, const char *, int, _ns1__DSDataCreateJSON *const*, const char *);
SOAP_FMAC3 _ns1__DSDataCreateJSON ** SOAP_FMAC4 soap_in_PointerTo_ns1__DSDataCreateJSON(struct soap*, const char*, _ns1__DSDataCreateJSON **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DSDataCreateJSON(struct soap*, _ns1__DSDataCreateJSON *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DSDataCreateJSON ** SOAP_FMAC4 soap_get_PointerTo_ns1__DSDataCreateJSON(struct soap*, _ns1__DSDataCreateJSON **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__Device_USCOREParameters_DEFINED
#define SOAP_TYPE_PointerTo_ns1__Device_USCOREParameters_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__Device_USCOREParameters(struct soap*, _ns1__Device_USCOREParameters *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__Device_USCOREParameters(struct soap*, const char *, int, _ns1__Device_USCOREParameters *const*, const char *);
SOAP_FMAC3 _ns1__Device_USCOREParameters ** SOAP_FMAC4 soap_in_PointerTo_ns1__Device_USCOREParameters(struct soap*, const char*, _ns1__Device_USCOREParameters **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__Device_USCOREParameters(struct soap*, _ns1__Device_USCOREParameters *const*, const char*, const char*);
SOAP_FMAC3 _ns1__Device_USCOREParameters ** SOAP_FMAC4 soap_get_PointerTo_ns1__Device_USCOREParameters(struct soap*, _ns1__Device_USCOREParameters **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__DxTestDataUpload_DEFINED
#define SOAP_TYPE_PointerTo_ns1__DxTestDataUpload_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__DxTestDataUpload(struct soap*, _ns1__DxTestDataUpload *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__DxTestDataUpload(struct soap*, const char *, int, _ns1__DxTestDataUpload *const*, const char *);
SOAP_FMAC3 _ns1__DxTestDataUpload ** SOAP_FMAC4 soap_in_PointerTo_ns1__DxTestDataUpload(struct soap*, const char*, _ns1__DxTestDataUpload **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__DxTestDataUpload(struct soap*, _ns1__DxTestDataUpload *const*, const char*, const char*);
SOAP_FMAC3 _ns1__DxTestDataUpload ** SOAP_FMAC4 soap_get_PointerTo_ns1__DxTestDataUpload(struct soap*, _ns1__DxTestDataUpload **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTo_ns1__GetString_DEFINED
#define SOAP_TYPE_PointerTo_ns1__GetString_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns1__GetString(struct soap*, _ns1__GetString *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns1__GetString(struct soap*, const char *, int, _ns1__GetString *const*, const char *);
SOAP_FMAC3 _ns1__GetString ** SOAP_FMAC4 soap_in_PointerTo_ns1__GetString(struct soap*, const char*, _ns1__GetString **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns1__GetString(struct soap*, _ns1__GetString *const*, const char*, const char*);
SOAP_FMAC3 _ns1__GetString ** SOAP_FMAC4 soap_get_PointerTo_ns1__GetString(struct soap*, _ns1__GetString **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostd__string_DEFINED
#define SOAP_TYPE_PointerTostd__string_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

inline void soap_default__QName(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT__QName
	*a = SOAP_DEFAULT__QName;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);

#define soap_instantiate__QName soap_instantiate_string


#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

inline int soap_write__QName(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send__QName(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put__QName(soap, p, "QName", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

inline int soap_read__QName(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get__QName(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET__QName(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv__QName(struct soap *soap, char **p)
{
	if (::soap_read__QName(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

inline void soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n = -1);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

inline int soap_write_string(struct soap *soap, char *const*p)
{
	soap_free_temp(soap);
	if (p)
	{	if (soap_begin_send(soap) || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_PUT_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_PATCH_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_PATCH(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_send_string(struct soap *soap, const char *URL, char *const*p)
{
	soap_free_temp(soap);
	if (soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || ::soap_put_string(soap, p, "string", "") || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

inline int soap_read_string(struct soap *soap, char **p)
{
	if (p)
	{	if (soap_begin_recv(soap) || ::soap_get_string(soap, p, NULL, NULL) == NULL || soap_end_recv(soap))
			return soap->error;
	}
	return SOAP_OK;
}

inline int soap_GET_string(struct soap *soap, const char *URL, char **p)
{
	if (soap_GET(soap, URL, NULL) || ::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

inline int soap_POST_recv_string(struct soap *soap, char **p)
{
	if (::soap_read_string(soap, p) || soap_closesock(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}
#endif

#endif

/* End of soapH.h */
