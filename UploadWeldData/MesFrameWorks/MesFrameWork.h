/* MesFrameWork.h
   Generated by wsdl2h 2.8.74 from http://172.20.1.7:9012/MesFrameWork.asmx?WSDL and mytypemap.dat
   2019-01-08 02:46:07 GMT

   DO NOT INCLUDE THIS FILE DIRECTLY INTO YOUR PROJECT BUILDS
   USE THE soapcpp2-GENERATED SOURCE CODE FILES FOR YOUR PROJECT BUILDS

gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/** @page page_notes Notes

@note HINTS:
 - Run soapcpp2 on MesFrameWork.h to generate the SOAP/XML processing logic.
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Use wsdl2h -c and -s to generate pure C code or C++ code without STL.
 - Use 'typemap.dat' to control namespace bindings and type mappings.
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -R to generate REST operations.
 - Use wsdl2h -Onum to optimize output by removing unused schema components.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Use wsdl2h -d to enable DOM support for xsd:anyType.
 - Use wsdl2h -g to auto-generate readers and writers for root elements.
 - Use wsdl2h -b to auto-generate bi-directional operations (duplex ops).
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2018, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c++,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://device.service.moresoft.com/                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $CONTAINER                                                                 *
 *   std::vector                                                              *
 *                                                                            *
\******************************************************************************/

#include <vector>
template <class T> class std::vector;

/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to typemap.dat to rerun wsdl2h:

ns1 = "http://device.service.moresoft.com/"

*/

#define SOAP_NAMESPACE_OF_ns1	"http://device.service.moresoft.com/"
//gsoap ns1   schema namespace:	http://device.service.moresoft.com/
//gsoap ns1   schema elementForm:	qualified
//gsoap ns1   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Forward Declarations                                                       *
 *                                                                            *
\******************************************************************************/


//  Forward declaration of class _ns1__GetString.
class _ns1__GetString;

//  Forward declaration of class _ns1__GetStringResponse.
class _ns1__GetStringResponse;

//  Forward declaration of class _ns1__DxTestDataUpload.
class _ns1__DxTestDataUpload;

//  Forward declaration of class _ns1__DxTestDataUploadResponse.
class _ns1__DxTestDataUploadResponse;

//  Forward declaration of class _ns1__Device_USCOREParameters.
class _ns1__Device_USCOREParameters;

//  Forward declaration of class _ns1__Device_USCOREParametersResponse.
class _ns1__Device_USCOREParametersResponse;

//  Forward declaration of class _ns1__DSDataCreateJSON.
class _ns1__DSDataCreateJSON;

//  Forward declaration of class _ns1__DSDataCreateJSONResponse.
class _ns1__DSDataCreateJSONResponse;

//  Forward declaration of class _ns1__DxDataUploadJson.
class _ns1__DxDataUploadJson;

//  Forward declaration of class _ns1__DxDataUploadJsonResponse.
class _ns1__DxDataUploadJsonResponse;


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://device.service.moresoft.com/                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://device.service.moresoft.com/                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://device.service.moresoft.com/":GetString
/// @brief "http://device.service.moresoft.com/":GetString is a complexType.
///
/// class _ns1__GetString operations:
/// - _ns1__GetString* soap_new__ns1__GetString(soap*) allocate and default initialize
/// - _ns1__GetString* soap_new__ns1__GetString(soap*, int num) allocate array and default initialize values
/// - _ns1__GetString* soap_new_req__ns1__GetString(soap*, ...) allocate, set required members
/// - _ns1__GetString* soap_new_set__ns1__GetString(soap*, ...) allocate, set all public members
/// - _ns1__GetString::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetString(soap*, _ns1__GetString*) deserialize from a stream
/// - int soap_write__ns1__GetString(soap*, _ns1__GetString*) serialize to a stream
/// - _ns1__GetString* _ns1__GetString::soap_dup(soap*) returns deep copy of _ns1__GetString, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetString::soap_del() deep deletes _ns1__GetString data members, use only after _ns1__GetString::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetString
{ public:
/// Element "strJSON" of XSD type xs:string.
    std::string*                         strJSON                        0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://device.service.moresoft.com/":GetStringResponse
/// @brief "http://device.service.moresoft.com/":GetStringResponse is a complexType.
///
/// class _ns1__GetStringResponse operations:
/// - _ns1__GetStringResponse* soap_new__ns1__GetStringResponse(soap*) allocate and default initialize
/// - _ns1__GetStringResponse* soap_new__ns1__GetStringResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__GetStringResponse* soap_new_req__ns1__GetStringResponse(soap*, ...) allocate, set required members
/// - _ns1__GetStringResponse* soap_new_set__ns1__GetStringResponse(soap*, ...) allocate, set all public members
/// - _ns1__GetStringResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__GetStringResponse(soap*, _ns1__GetStringResponse*) deserialize from a stream
/// - int soap_write__ns1__GetStringResponse(soap*, _ns1__GetStringResponse*) serialize to a stream
/// - _ns1__GetStringResponse* _ns1__GetStringResponse::soap_dup(soap*) returns deep copy of _ns1__GetStringResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__GetStringResponse::soap_del() deep deletes _ns1__GetStringResponse data members, use only after _ns1__GetStringResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__GetStringResponse
{ public:
/// Element "GetStringResult" of XSD type xs:string.
    std::string*                         GetStringResult                0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://device.service.moresoft.com/":DxTestDataUpload
/// @brief "http://device.service.moresoft.com/":DxTestDataUpload is a complexType.
///
/// class _ns1__DxTestDataUpload operations:
/// - _ns1__DxTestDataUpload* soap_new__ns1__DxTestDataUpload(soap*) allocate and default initialize
/// - _ns1__DxTestDataUpload* soap_new__ns1__DxTestDataUpload(soap*, int num) allocate array and default initialize values
/// - _ns1__DxTestDataUpload* soap_new_req__ns1__DxTestDataUpload(soap*, ...) allocate, set required members
/// - _ns1__DxTestDataUpload* soap_new_set__ns1__DxTestDataUpload(soap*, ...) allocate, set all public members
/// - _ns1__DxTestDataUpload::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DxTestDataUpload(soap*, _ns1__DxTestDataUpload*) deserialize from a stream
/// - int soap_write__ns1__DxTestDataUpload(soap*, _ns1__DxTestDataUpload*) serialize to a stream
/// - _ns1__DxTestDataUpload* _ns1__DxTestDataUpload::soap_dup(soap*) returns deep copy of _ns1__DxTestDataUpload, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DxTestDataUpload::soap_del() deep deletes _ns1__DxTestDataUpload data members, use only after _ns1__DxTestDataUpload::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DxTestDataUpload
{ public:
/// Element "M_FLAG" of XSD type xs:int.
    int                                  M_USCOREFLAG                   1;	///< Required element.
/// Element "M_DEVICE_SN" of XSD type xs:string.
    std::string*                         M_USCOREDEVICE_USCORESN        0;	///< Optional element.
/// Element "M_WORKSTATION_SN" of XSD type xs:string.
    std::string*                         M_USCOREWORKSTATION_USCORESN   0;	///< Optional element.
/// Element "M_EMP_NO" of XSD type xs:string.
    std::string*                         M_USCOREEMP_USCORENO           0;	///< Optional element.
/// Element "M_MO" of XSD type xs:string.
    std::string*                         M_USCOREMO                     0;	///< Optional element.
/// Element "M_CONTAINER_SN" of XSD type xs:string.
    std::string*                         M_USCORECONTAINER_USCORESN     0;	///< Optional element.
/// Element "M_SN" of XSD type xs:string.
    std::string*                         M_USCORESN                     0;	///< Optional element.
/// Element "M_UNION_SN" of XSD type xs:string.
    std::string*                         M_USCOREUNION_USCORESN         0;	///< Optional element.
/// Element "M_LEVEL" of XSD type xs:string.
    std::string*                         M_USCORELEVEL                  0;	///< Optional element.
/// Element "M_EC_FLAG" of XSD type xs:string.
    std::string*                         M_USCOREEC_USCOREFLAG          0;	///< Optional element.
/// Element "M_ITEMVALUE" of XSD type xs:string.
    std::string*                         M_USCOREITEMVALUE              0;	///< Optional element.
/// Element "M_TEST_TIME" of XSD type xs:string.
    std::string*                         M_USCORETEST_USCORETIME        0;	///< Optional element.
/// Element "M_DECRIPTION" of XSD type xs:string.
    std::string*                         M_USCOREDECRIPTION             0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://device.service.moresoft.com/":DxTestDataUploadResponse
/// @brief "http://device.service.moresoft.com/":DxTestDataUploadResponse is a complexType.
///
/// class _ns1__DxTestDataUploadResponse operations:
/// - _ns1__DxTestDataUploadResponse* soap_new__ns1__DxTestDataUploadResponse(soap*) allocate and default initialize
/// - _ns1__DxTestDataUploadResponse* soap_new__ns1__DxTestDataUploadResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DxTestDataUploadResponse* soap_new_req__ns1__DxTestDataUploadResponse(soap*, ...) allocate, set required members
/// - _ns1__DxTestDataUploadResponse* soap_new_set__ns1__DxTestDataUploadResponse(soap*, ...) allocate, set all public members
/// - _ns1__DxTestDataUploadResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DxTestDataUploadResponse(soap*, _ns1__DxTestDataUploadResponse*) deserialize from a stream
/// - int soap_write__ns1__DxTestDataUploadResponse(soap*, _ns1__DxTestDataUploadResponse*) serialize to a stream
/// - _ns1__DxTestDataUploadResponse* _ns1__DxTestDataUploadResponse::soap_dup(soap*) returns deep copy of _ns1__DxTestDataUploadResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DxTestDataUploadResponse::soap_del() deep deletes _ns1__DxTestDataUploadResponse data members, use only after _ns1__DxTestDataUploadResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DxTestDataUploadResponse
{ public:
/// Element "DxTestDataUploadResult" of XSD type xs:string.
    std::string*                         DxTestDataUploadResult         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://device.service.moresoft.com/":Device_Parameters
/// @brief "http://device.service.moresoft.com/":Device_Parameters is a complexType.
///
/// class _ns1__Device_USCOREParameters operations:
/// - _ns1__Device_USCOREParameters* soap_new__ns1__Device_USCOREParameters(soap*) allocate and default initialize
/// - _ns1__Device_USCOREParameters* soap_new__ns1__Device_USCOREParameters(soap*, int num) allocate array and default initialize values
/// - _ns1__Device_USCOREParameters* soap_new_req__ns1__Device_USCOREParameters(soap*, ...) allocate, set required members
/// - _ns1__Device_USCOREParameters* soap_new_set__ns1__Device_USCOREParameters(soap*, ...) allocate, set all public members
/// - _ns1__Device_USCOREParameters::soap_default(soap*) default initialize members
/// - int soap_read__ns1__Device_USCOREParameters(soap*, _ns1__Device_USCOREParameters*) deserialize from a stream
/// - int soap_write__ns1__Device_USCOREParameters(soap*, _ns1__Device_USCOREParameters*) serialize to a stream
/// - _ns1__Device_USCOREParameters* _ns1__Device_USCOREParameters::soap_dup(soap*) returns deep copy of _ns1__Device_USCOREParameters, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Device_USCOREParameters::soap_del() deep deletes _ns1__Device_USCOREParameters data members, use only after _ns1__Device_USCOREParameters::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Device_USCOREParameters
{ public:
/// Element "M_DEVICE_SN" of XSD type xs:string.
    std::string*                         M_USCOREDEVICE_USCORESN        0;	///< Optional element.
/// Element "M_EMP_NO" of XSD type xs:string.
    std::string*                         M_USCOREEMP_USCORENO           0;	///< Optional element.
/// Element "M_MO" of XSD type xs:string.
    std::string*                         M_USCOREMO                     0;	///< Optional element.
/// Element "M_ITEM_VALUE" of XSD type xs:string.
    std::string*                         M_USCOREITEM_USCOREVALUE       0;	///< Optional element.
/// Element "M_Y_N" of XSD type xs:string.
    std::string*                         M_USCOREY_USCOREN              0;	///< Optional element.
/// Element "M_PROCDUCE_TIME" of XSD type xs:string.
    std::string*                         M_USCOREPROCDUCE_USCORETIME    0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://device.service.moresoft.com/":Device_ParametersResponse
/// @brief "http://device.service.moresoft.com/":Device_ParametersResponse is a complexType.
///
/// class _ns1__Device_USCOREParametersResponse operations:
/// - _ns1__Device_USCOREParametersResponse* soap_new__ns1__Device_USCOREParametersResponse(soap*) allocate and default initialize
/// - _ns1__Device_USCOREParametersResponse* soap_new__ns1__Device_USCOREParametersResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__Device_USCOREParametersResponse* soap_new_req__ns1__Device_USCOREParametersResponse(soap*, ...) allocate, set required members
/// - _ns1__Device_USCOREParametersResponse* soap_new_set__ns1__Device_USCOREParametersResponse(soap*, ...) allocate, set all public members
/// - _ns1__Device_USCOREParametersResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__Device_USCOREParametersResponse(soap*, _ns1__Device_USCOREParametersResponse*) deserialize from a stream
/// - int soap_write__ns1__Device_USCOREParametersResponse(soap*, _ns1__Device_USCOREParametersResponse*) serialize to a stream
/// - _ns1__Device_USCOREParametersResponse* _ns1__Device_USCOREParametersResponse::soap_dup(soap*) returns deep copy of _ns1__Device_USCOREParametersResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__Device_USCOREParametersResponse::soap_del() deep deletes _ns1__Device_USCOREParametersResponse data members, use only after _ns1__Device_USCOREParametersResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__Device_USCOREParametersResponse
{ public:
/// Element "Device_ParametersResult" of XSD type xs:string.
    std::string*                         Device_USCOREParametersResult  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://device.service.moresoft.com/":DSDataCreateJSON
/// @brief "http://device.service.moresoft.com/":DSDataCreateJSON is a complexType.
///
/// class _ns1__DSDataCreateJSON operations:
/// - _ns1__DSDataCreateJSON* soap_new__ns1__DSDataCreateJSON(soap*) allocate and default initialize
/// - _ns1__DSDataCreateJSON* soap_new__ns1__DSDataCreateJSON(soap*, int num) allocate array and default initialize values
/// - _ns1__DSDataCreateJSON* soap_new_req__ns1__DSDataCreateJSON(soap*, ...) allocate, set required members
/// - _ns1__DSDataCreateJSON* soap_new_set__ns1__DSDataCreateJSON(soap*, ...) allocate, set all public members
/// - _ns1__DSDataCreateJSON::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DSDataCreateJSON(soap*, _ns1__DSDataCreateJSON*) deserialize from a stream
/// - int soap_write__ns1__DSDataCreateJSON(soap*, _ns1__DSDataCreateJSON*) serialize to a stream
/// - _ns1__DSDataCreateJSON* _ns1__DSDataCreateJSON::soap_dup(soap*) returns deep copy of _ns1__DSDataCreateJSON, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DSDataCreateJSON::soap_del() deep deletes _ns1__DSDataCreateJSON data members, use only after _ns1__DSDataCreateJSON::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DSDataCreateJSON
{ public:
/// Element "M_FLAG" of XSD type xs:int.
    int                                  M_USCOREFLAG                   1;	///< Required element.
/// Element "M_DEVICE_SN" of XSD type xs:string.
    std::string*                         M_USCOREDEVICE_USCORESN        0;	///< Optional element.
/// Element "M_WORKSTATION_SN" of XSD type xs:string.
    std::string*                         M_USCOREWORKSTATION_USCORESN   0;	///< Optional element.
/// Element "M_EMP_NO" of XSD type xs:string.
    std::string*                         M_USCOREEMP_USCORENO           0;	///< Optional element.
/// Element "M_AREA" of XSD type xs:string.
    std::string*                         M_USCOREAREA                   0;	///< Optional element.
/// Element "M_MO" of XSD type xs:string.
    std::string*                         M_USCOREMO                     0;	///< Optional element.
/// Element "M_MODEL" of XSD type xs:string.
    std::string*                         M_USCOREMODEL                  0;	///< Optional element.
/// Element "M_CONTAINER_SN" of XSD type xs:string.
    std::string*                         M_USCORECONTAINER_USCORESN     0;	///< Optional element.
/// Element "M_SN" of XSD type xs:string.
    std::string*                         M_USCORESN                     0;	///< Optional element.
/// Element "M_UNION_SN" of XSD type xs:string.
    std::string*                         M_USCOREUNION_USCORESN         0;	///< Optional element.
/// Element "M_LEVEL" of XSD type xs:string.
    std::string*                         M_USCORELEVEL                  0;	///< Optional element.
/// Element "M_EC_FLAG" of XSD type xs:string.
    std::string*                         M_USCOREEC_USCOREFLAG          0;	///< Optional element.
/// Element "M_ITEMVALUE" of XSD type xs:string.
    std::string*                         M_USCOREITEMVALUE              0;	///< Optional element.
/// Element "M_TEST_TIME" of XSD type xs:string.
    std::string*                         M_USCORETEST_USCORETIME        0;	///< Optional element.
/// Element "M_DECRIPTION" of XSD type xs:string.
    std::string*                         M_USCOREDECRIPTION             0;	///< Optional element.
/// Element "M_ROUTE" of XSD type xs:string.
    std::string*                         M_USCOREROUTE                  0;	///< Optional element.
/// Element "M_GROUP" of XSD type xs:string.
    std::string*                         M_USCOREGROUP                  0;	///< Optional element.
/// Element "M_ERROR_CODE" of XSD type xs:string.
    std::string*                         M_USCOREERROR_USCORECODE       0;	///< Optional element.
/// Element "M_ERROR_LEVEL" of XSD type xs:string.
    std::string*                         M_USCOREERROR_USCORELEVEL      0;	///< Optional element.
/// Element "M_ERROR_STATUS" of XSD type xs:string.
    std::string*                         M_USCOREERROR_USCORESTATUS     0;	///< Optional element.
/// Element "M_ITEM_TYPE" of XSD type xs:string.
    std::string*                         M_USCOREITEM_USCORETYPE        0;	///< Optional element.
/// Element "M_POLAR" of XSD type xs:string.
    std::string*                         M_USCOREPOLAR                  0;	///< Optional element.
/// Element "CONTROL_TYPE" of XSD type xs:string.
    std::string*                         CONTROL_USCORETYPE             0;	///< Optional element.
/// Element "M_MARK1" of XSD type xs:string.
    std::string*                         M_USCOREMARK1                  0;	///< Optional element.
/// Element "M_MARK2" of XSD type xs:string.
    std::string*                         M_USCOREMARK2                  0;	///< Optional element.
/// Element "M_MARK3" of XSD type xs:string.
    std::string*                         M_USCOREMARK3                  0;	///< Optional element.
/// Element "M_MARK4" of XSD type xs:string.
    std::string*                         M_USCOREMARK4                  0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://device.service.moresoft.com/":DSDataCreateJSONResponse
/// @brief "http://device.service.moresoft.com/":DSDataCreateJSONResponse is a complexType.
///
/// class _ns1__DSDataCreateJSONResponse operations:
/// - _ns1__DSDataCreateJSONResponse* soap_new__ns1__DSDataCreateJSONResponse(soap*) allocate and default initialize
/// - _ns1__DSDataCreateJSONResponse* soap_new__ns1__DSDataCreateJSONResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DSDataCreateJSONResponse* soap_new_req__ns1__DSDataCreateJSONResponse(soap*, ...) allocate, set required members
/// - _ns1__DSDataCreateJSONResponse* soap_new_set__ns1__DSDataCreateJSONResponse(soap*, ...) allocate, set all public members
/// - _ns1__DSDataCreateJSONResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DSDataCreateJSONResponse(soap*, _ns1__DSDataCreateJSONResponse*) deserialize from a stream
/// - int soap_write__ns1__DSDataCreateJSONResponse(soap*, _ns1__DSDataCreateJSONResponse*) serialize to a stream
/// - _ns1__DSDataCreateJSONResponse* _ns1__DSDataCreateJSONResponse::soap_dup(soap*) returns deep copy of _ns1__DSDataCreateJSONResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DSDataCreateJSONResponse::soap_del() deep deletes _ns1__DSDataCreateJSONResponse data members, use only after _ns1__DSDataCreateJSONResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DSDataCreateJSONResponse
{ public:
/// Element "DSDataCreateJSONResult" of XSD type xs:string.
    std::string*                         DSDataCreateJSONResult         0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://device.service.moresoft.com/":DxDataUploadJson
/// @brief "http://device.service.moresoft.com/":DxDataUploadJson is a complexType.
///
/// class _ns1__DxDataUploadJson operations:
/// - _ns1__DxDataUploadJson* soap_new__ns1__DxDataUploadJson(soap*) allocate and default initialize
/// - _ns1__DxDataUploadJson* soap_new__ns1__DxDataUploadJson(soap*, int num) allocate array and default initialize values
/// - _ns1__DxDataUploadJson* soap_new_req__ns1__DxDataUploadJson(soap*, ...) allocate, set required members
/// - _ns1__DxDataUploadJson* soap_new_set__ns1__DxDataUploadJson(soap*, ...) allocate, set all public members
/// - _ns1__DxDataUploadJson::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DxDataUploadJson(soap*, _ns1__DxDataUploadJson*) deserialize from a stream
/// - int soap_write__ns1__DxDataUploadJson(soap*, _ns1__DxDataUploadJson*) serialize to a stream
/// - _ns1__DxDataUploadJson* _ns1__DxDataUploadJson::soap_dup(soap*) returns deep copy of _ns1__DxDataUploadJson, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DxDataUploadJson::soap_del() deep deletes _ns1__DxDataUploadJson data members, use only after _ns1__DxDataUploadJson::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DxDataUploadJson
{ public:
/// Element "jsonText" of XSD type xs:string.
    std::string*                         jsonText                       0;	///< Optional element.
    struct soap                         *soap                          ;
};

/// @brief Top-level root element "http://device.service.moresoft.com/":DxDataUploadJsonResponse
/// @brief "http://device.service.moresoft.com/":DxDataUploadJsonResponse is a complexType.
///
/// class _ns1__DxDataUploadJsonResponse operations:
/// - _ns1__DxDataUploadJsonResponse* soap_new__ns1__DxDataUploadJsonResponse(soap*) allocate and default initialize
/// - _ns1__DxDataUploadJsonResponse* soap_new__ns1__DxDataUploadJsonResponse(soap*, int num) allocate array and default initialize values
/// - _ns1__DxDataUploadJsonResponse* soap_new_req__ns1__DxDataUploadJsonResponse(soap*, ...) allocate, set required members
/// - _ns1__DxDataUploadJsonResponse* soap_new_set__ns1__DxDataUploadJsonResponse(soap*, ...) allocate, set all public members
/// - _ns1__DxDataUploadJsonResponse::soap_default(soap*) default initialize members
/// - int soap_read__ns1__DxDataUploadJsonResponse(soap*, _ns1__DxDataUploadJsonResponse*) deserialize from a stream
/// - int soap_write__ns1__DxDataUploadJsonResponse(soap*, _ns1__DxDataUploadJsonResponse*) serialize to a stream
/// - _ns1__DxDataUploadJsonResponse* _ns1__DxDataUploadJsonResponse::soap_dup(soap*) returns deep copy of _ns1__DxDataUploadJsonResponse, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - _ns1__DxDataUploadJsonResponse::soap_del() deep deletes _ns1__DxDataUploadJsonResponse data members, use only after _ns1__DxDataUploadJsonResponse::soap_dup(NULL) (use soapcpp2 -Ed)
class _ns1__DxDataUploadJsonResponse
{ public:
/// Element "DxDataUploadJsonResult" of XSD type xs:string.
    std::string*                         DxDataUploadJsonResult         0;	///< Optional element.
    struct soap                         *soap                          ;
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://device.service.moresoft.com/                                      *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://device.service.moresoft.com/":string of XSD type xs:string.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration and processing code.


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://device.service.moresoft.com/                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Services                                                                   *
 *                                                                            *
\******************************************************************************/

// This service supports SOAP 1.2 namespaces:
#import "soap12.h"

//gsoap ns1  service name:	MesFrameWorkSoap 
//gsoap ns1  service type:	MesFrameWorkSoap 
//gsoap ns1  service port:	http://172.20.1.7:9012/MesFrameWork.asmx 
//gsoap ns1  service namespace:	http://device.service.moresoft.com/ 
//gsoap ns1  service transport:	http://schemas.xmlsoap.org/soap/http 

/** @mainpage Service Definitions

@section Service_bindings Service Bindings

  - @ref MesFrameWorkSoap

@section Service_more More Information

  - @ref page_notes "Notes"

  - @ref page_XMLDataBinding "XML Data Binding"

  - @ref SOAP_ENV__Header "SOAP Header Content" (when applicable)

  - @ref SOAP_ENV__Detail "SOAP Fault Detail Content" (when applicable)


*/

/**

@page MesFrameWorkSoap Binding "MesFrameWorkSoap"

@section MesFrameWorkSoap_operations Operations of Binding "MesFrameWorkSoap"

  - @ref __ns1__GetString

  - @ref __ns1__DxTestDataUpload

  - @ref __ns1__Device_USCOREParameters

  - @ref __ns1__DSDataCreateJSON

  - @ref __ns1__DxDataUploadJson

  - @ref __ns1__GetString_

  - @ref __ns1__DxTestDataUpload_

  - @ref __ns1__Device_USCOREParameters_

  - @ref __ns1__DSDataCreateJSON_

  - @ref __ns1__DxDataUploadJson_

@section MesFrameWorkSoap_ports Default endpoints of Binding "MesFrameWorkSoap"

  - http://172.20.1.7:9012/MesFrameWork.asmx

@note Multiple service bindings collected as one, use wsdl2h option -Nname to produce a separate service for each binding


*/

/******************************************************************************\
 *                                                                            *
 * Service Binding                                                            *
 *   MesFrameWorkSoap                                                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetString                                                         *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetString" of service binding "MesFrameWorkSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://172.20.1.7:9012/MesFrameWork.asmx

  - Default SOAP action or REST location path:
    - "http://device.service.moresoft.com/GetString"

  - Addressing input action: "http://device.service.moresoft.com/GetString"

  - Addressing output action: "http://device.service.moresoft.com/GetStringResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetString(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetString*                    ns1__GetString,
    // output parameters:
    _ns1__GetStringResponse            &ns1__GetStringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetString(
    struct soap *soap,
    // input parameters:
    _ns1__GetString*                    ns1__GetString,
    // output parameters:
    _ns1__GetStringResponse            &ns1__GetStringResponse
  );
@endcode

C++ proxy class (defined in soapMesFrameWorkSoapProxy.h generated with soapcpp2):
@code
  class MesFrameWorkSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMesFrameWorkSoapService.h generated with soapcpp2):
@code
  class MesFrameWorkSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetString SOAP
//gsoap ns1  service method-style:	GetString document
//gsoap ns1  service method-encoding:	GetString literal
//gsoap ns1  service method-input-action:	GetString http://device.service.moresoft.com/GetString
//gsoap ns1  service method-output-action:	GetString http://device.service.moresoft.com/GetStringResponse
int __ns1__GetString(
    _ns1__GetString*                    ns1__GetString,	///< Input parameter
    _ns1__GetStringResponse            &ns1__GetStringResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DxTestDataUpload                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DxTestDataUpload" of service binding "MesFrameWorkSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://172.20.1.7:9012/MesFrameWork.asmx

  - Default SOAP action or REST location path:
    - "http://device.service.moresoft.com/DxTestDataUpload"

  - Addressing input action: "http://device.service.moresoft.com/DxTestDataUpload"

  - Addressing output action: "http://device.service.moresoft.com/DxTestDataUploadResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DxTestDataUpload(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DxTestDataUpload*             ns1__DxTestDataUpload,
    // output parameters:
    _ns1__DxTestDataUploadResponse     &ns1__DxTestDataUploadResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DxTestDataUpload(
    struct soap *soap,
    // input parameters:
    _ns1__DxTestDataUpload*             ns1__DxTestDataUpload,
    // output parameters:
    _ns1__DxTestDataUploadResponse     &ns1__DxTestDataUploadResponse
  );
@endcode

C++ proxy class (defined in soapMesFrameWorkSoapProxy.h generated with soapcpp2):
@code
  class MesFrameWorkSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMesFrameWorkSoapService.h generated with soapcpp2):
@code
  class MesFrameWorkSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DxTestDataUpload SOAP
//gsoap ns1  service method-style:	DxTestDataUpload document
//gsoap ns1  service method-encoding:	DxTestDataUpload literal
//gsoap ns1  service method-input-action:	DxTestDataUpload http://device.service.moresoft.com/DxTestDataUpload
//gsoap ns1  service method-output-action:	DxTestDataUpload http://device.service.moresoft.com/DxTestDataUploadResponse
int __ns1__DxTestDataUpload(
    _ns1__DxTestDataUpload*             ns1__DxTestDataUpload,	///< Input parameter
    _ns1__DxTestDataUploadResponse     &ns1__DxTestDataUploadResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Device_USCOREParameters                                           *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Device_USCOREParameters" of service binding "MesFrameWorkSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://172.20.1.7:9012/MesFrameWork.asmx

  - Default SOAP action or REST location path:
    - "http://device.service.moresoft.com/Device_Parameters"

  - Addressing input action: "http://device.service.moresoft.com/Device_Parameters"

  - Addressing output action: "http://device.service.moresoft.com/Device_ParametersResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Device_USCOREParameters(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Device_USCOREParameters*      ns1__Device_USCOREParameters,
    // output parameters:
    _ns1__Device_USCOREParametersResponse&ns1__Device_USCOREParametersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Device_USCOREParameters(
    struct soap *soap,
    // input parameters:
    _ns1__Device_USCOREParameters*      ns1__Device_USCOREParameters,
    // output parameters:
    _ns1__Device_USCOREParametersResponse&ns1__Device_USCOREParametersResponse
  );
@endcode

C++ proxy class (defined in soapMesFrameWorkSoapProxy.h generated with soapcpp2):
@code
  class MesFrameWorkSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMesFrameWorkSoapService.h generated with soapcpp2):
@code
  class MesFrameWorkSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Device_USCOREParameters SOAP
//gsoap ns1  service method-style:	Device_USCOREParameters document
//gsoap ns1  service method-encoding:	Device_USCOREParameters literal
//gsoap ns1  service method-input-action:	Device_USCOREParameters http://device.service.moresoft.com/Device_Parameters
//gsoap ns1  service method-output-action:	Device_USCOREParameters http://device.service.moresoft.com/Device_ParametersResponse
int __ns1__Device_USCOREParameters(
    _ns1__Device_USCOREParameters*      ns1__Device_USCOREParameters,	///< Input parameter
    _ns1__Device_USCOREParametersResponse&ns1__Device_USCOREParametersResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DSDataCreateJSON                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DSDataCreateJSON" of service binding "MesFrameWorkSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://172.20.1.7:9012/MesFrameWork.asmx

  - Default SOAP action or REST location path:
    - "http://device.service.moresoft.com/DSDataCreateJSON"

  - Addressing input action: "http://device.service.moresoft.com/DSDataCreateJSON"

  - Addressing output action: "http://device.service.moresoft.com/DSDataCreateJSONResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DSDataCreateJSON(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DSDataCreateJSON*             ns1__DSDataCreateJSON,
    // output parameters:
    _ns1__DSDataCreateJSONResponse     &ns1__DSDataCreateJSONResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DSDataCreateJSON(
    struct soap *soap,
    // input parameters:
    _ns1__DSDataCreateJSON*             ns1__DSDataCreateJSON,
    // output parameters:
    _ns1__DSDataCreateJSONResponse     &ns1__DSDataCreateJSONResponse
  );
@endcode

C++ proxy class (defined in soapMesFrameWorkSoapProxy.h generated with soapcpp2):
@code
  class MesFrameWorkSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMesFrameWorkSoapService.h generated with soapcpp2):
@code
  class MesFrameWorkSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DSDataCreateJSON SOAP
//gsoap ns1  service method-style:	DSDataCreateJSON document
//gsoap ns1  service method-encoding:	DSDataCreateJSON literal
//gsoap ns1  service method-input-action:	DSDataCreateJSON http://device.service.moresoft.com/DSDataCreateJSON
//gsoap ns1  service method-output-action:	DSDataCreateJSON http://device.service.moresoft.com/DSDataCreateJSONResponse
int __ns1__DSDataCreateJSON(
    _ns1__DSDataCreateJSON*             ns1__DSDataCreateJSON,	///< Input parameter
    _ns1__DSDataCreateJSONResponse     &ns1__DSDataCreateJSONResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DxDataUploadJson                                                  *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DxDataUploadJson" of service binding "MesFrameWorkSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://172.20.1.7:9012/MesFrameWork.asmx

  - Default SOAP action or REST location path:
    - "http://device.service.moresoft.com/DxDataUploadJson"

  - Addressing input action: "http://device.service.moresoft.com/DxDataUploadJson"

  - Addressing output action: "http://device.service.moresoft.com/DxDataUploadJsonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DxDataUploadJson(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DxDataUploadJson*             ns1__DxDataUploadJson,
    // output parameters:
    _ns1__DxDataUploadJsonResponse     &ns1__DxDataUploadJsonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DxDataUploadJson(
    struct soap *soap,
    // input parameters:
    _ns1__DxDataUploadJson*             ns1__DxDataUploadJson,
    // output parameters:
    _ns1__DxDataUploadJsonResponse     &ns1__DxDataUploadJsonResponse
  );
@endcode

C++ proxy class (defined in soapMesFrameWorkSoapProxy.h generated with soapcpp2):
@code
  class MesFrameWorkSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMesFrameWorkSoapService.h generated with soapcpp2):
@code
  class MesFrameWorkSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DxDataUploadJson SOAP
//gsoap ns1  service method-style:	DxDataUploadJson document
//gsoap ns1  service method-encoding:	DxDataUploadJson literal
//gsoap ns1  service method-input-action:	DxDataUploadJson http://device.service.moresoft.com/DxDataUploadJson
//gsoap ns1  service method-output-action:	DxDataUploadJson http://device.service.moresoft.com/DxDataUploadJsonResponse
int __ns1__DxDataUploadJson(
    _ns1__DxDataUploadJson*             ns1__DxDataUploadJson,	///< Input parameter
    _ns1__DxDataUploadJsonResponse     &ns1__DxDataUploadJsonResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__GetString_                                                        *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__GetString_" of service binding "MesFrameWorkSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://172.20.1.7:9012/MesFrameWork.asmx

  - Default SOAP action or REST location path:
    - "http://device.service.moresoft.com/GetString"

  - Addressing input action: "http://device.service.moresoft.com/GetString"

  - Addressing output action: "http://device.service.moresoft.com/GetStringResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__GetString_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__GetString*                    ns1__GetString,
    // output parameters:
    _ns1__GetStringResponse            &ns1__GetStringResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__GetString_(
    struct soap *soap,
    // input parameters:
    _ns1__GetString*                    ns1__GetString,
    // output parameters:
    _ns1__GetStringResponse            &ns1__GetStringResponse
  );
@endcode

C++ proxy class (defined in soapMesFrameWorkSoapProxy.h generated with soapcpp2):
@code
  class MesFrameWorkSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMesFrameWorkSoapService.h generated with soapcpp2):
@code
  class MesFrameWorkSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	GetString_ SOAP
//gsoap ns1  service method-style:	GetString_ document
//gsoap ns1  service method-encoding:	GetString_ literal
//gsoap ns1  service method-input-action:	GetString_ http://device.service.moresoft.com/GetString
//gsoap ns1  service method-output-action:	GetString_ http://device.service.moresoft.com/GetStringResponse
int __ns1__GetString_(
    _ns1__GetString*                    ns1__GetString,	///< Input parameter
    _ns1__GetStringResponse            &ns1__GetStringResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DxTestDataUpload_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DxTestDataUpload_" of service binding "MesFrameWorkSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://172.20.1.7:9012/MesFrameWork.asmx

  - Default SOAP action or REST location path:
    - "http://device.service.moresoft.com/DxTestDataUpload"

  - Addressing input action: "http://device.service.moresoft.com/DxTestDataUpload"

  - Addressing output action: "http://device.service.moresoft.com/DxTestDataUploadResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DxTestDataUpload_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DxTestDataUpload*             ns1__DxTestDataUpload,
    // output parameters:
    _ns1__DxTestDataUploadResponse     &ns1__DxTestDataUploadResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DxTestDataUpload_(
    struct soap *soap,
    // input parameters:
    _ns1__DxTestDataUpload*             ns1__DxTestDataUpload,
    // output parameters:
    _ns1__DxTestDataUploadResponse     &ns1__DxTestDataUploadResponse
  );
@endcode

C++ proxy class (defined in soapMesFrameWorkSoapProxy.h generated with soapcpp2):
@code
  class MesFrameWorkSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMesFrameWorkSoapService.h generated with soapcpp2):
@code
  class MesFrameWorkSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DxTestDataUpload_ SOAP
//gsoap ns1  service method-style:	DxTestDataUpload_ document
//gsoap ns1  service method-encoding:	DxTestDataUpload_ literal
//gsoap ns1  service method-input-action:	DxTestDataUpload_ http://device.service.moresoft.com/DxTestDataUpload
//gsoap ns1  service method-output-action:	DxTestDataUpload_ http://device.service.moresoft.com/DxTestDataUploadResponse
int __ns1__DxTestDataUpload_(
    _ns1__DxTestDataUpload*             ns1__DxTestDataUpload,	///< Input parameter
    _ns1__DxTestDataUploadResponse     &ns1__DxTestDataUploadResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__Device_USCOREParameters_                                          *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__Device_USCOREParameters_" of service binding "MesFrameWorkSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://172.20.1.7:9012/MesFrameWork.asmx

  - Default SOAP action or REST location path:
    - "http://device.service.moresoft.com/Device_Parameters"

  - Addressing input action: "http://device.service.moresoft.com/Device_Parameters"

  - Addressing output action: "http://device.service.moresoft.com/Device_ParametersResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__Device_USCOREParameters_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__Device_USCOREParameters*      ns1__Device_USCOREParameters,
    // output parameters:
    _ns1__Device_USCOREParametersResponse&ns1__Device_USCOREParametersResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__Device_USCOREParameters_(
    struct soap *soap,
    // input parameters:
    _ns1__Device_USCOREParameters*      ns1__Device_USCOREParameters,
    // output parameters:
    _ns1__Device_USCOREParametersResponse&ns1__Device_USCOREParametersResponse
  );
@endcode

C++ proxy class (defined in soapMesFrameWorkSoapProxy.h generated with soapcpp2):
@code
  class MesFrameWorkSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMesFrameWorkSoapService.h generated with soapcpp2):
@code
  class MesFrameWorkSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	Device_USCOREParameters_ SOAP
//gsoap ns1  service method-style:	Device_USCOREParameters_ document
//gsoap ns1  service method-encoding:	Device_USCOREParameters_ literal
//gsoap ns1  service method-input-action:	Device_USCOREParameters_ http://device.service.moresoft.com/Device_Parameters
//gsoap ns1  service method-output-action:	Device_USCOREParameters_ http://device.service.moresoft.com/Device_ParametersResponse
int __ns1__Device_USCOREParameters_(
    _ns1__Device_USCOREParameters*      ns1__Device_USCOREParameters,	///< Input parameter
    _ns1__Device_USCOREParametersResponse&ns1__Device_USCOREParametersResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DSDataCreateJSON_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DSDataCreateJSON_" of service binding "MesFrameWorkSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://172.20.1.7:9012/MesFrameWork.asmx

  - Default SOAP action or REST location path:
    - "http://device.service.moresoft.com/DSDataCreateJSON"

  - Addressing input action: "http://device.service.moresoft.com/DSDataCreateJSON"

  - Addressing output action: "http://device.service.moresoft.com/DSDataCreateJSONResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DSDataCreateJSON_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DSDataCreateJSON*             ns1__DSDataCreateJSON,
    // output parameters:
    _ns1__DSDataCreateJSONResponse     &ns1__DSDataCreateJSONResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DSDataCreateJSON_(
    struct soap *soap,
    // input parameters:
    _ns1__DSDataCreateJSON*             ns1__DSDataCreateJSON,
    // output parameters:
    _ns1__DSDataCreateJSONResponse     &ns1__DSDataCreateJSONResponse
  );
@endcode

C++ proxy class (defined in soapMesFrameWorkSoapProxy.h generated with soapcpp2):
@code
  class MesFrameWorkSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMesFrameWorkSoapService.h generated with soapcpp2):
@code
  class MesFrameWorkSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DSDataCreateJSON_ SOAP
//gsoap ns1  service method-style:	DSDataCreateJSON_ document
//gsoap ns1  service method-encoding:	DSDataCreateJSON_ literal
//gsoap ns1  service method-input-action:	DSDataCreateJSON_ http://device.service.moresoft.com/DSDataCreateJSON
//gsoap ns1  service method-output-action:	DSDataCreateJSON_ http://device.service.moresoft.com/DSDataCreateJSONResponse
int __ns1__DSDataCreateJSON_(
    _ns1__DSDataCreateJSON*             ns1__DSDataCreateJSON,	///< Input parameter
    _ns1__DSDataCreateJSONResponse     &ns1__DSDataCreateJSONResponse	///< Output parameter
);

/******************************************************************************\
 *                                                                            *
 * Service Operation                                                          *
 *   __ns1__DxDataUploadJson_                                                 *
 *                                                                            *
\******************************************************************************/


/** Operation "__ns1__DxDataUploadJson_" of service binding "MesFrameWorkSoap".

  - SOAP document/literal style messaging

  - Default endpoints:
    - http://172.20.1.7:9012/MesFrameWork.asmx

  - Default SOAP action or REST location path:
    - "http://device.service.moresoft.com/DxDataUploadJson"

  - Addressing input action: "http://device.service.moresoft.com/DxDataUploadJson"

  - Addressing output action: "http://device.service.moresoft.com/DxDataUploadJsonResponse"

C stub function (defined in soapClient.c[pp] generated by soapcpp2):
@code
  int soap_call___ns1__DxDataUploadJson_(
    struct soap *soap,
    NULL, // char *endpoint = NULL selects default endpoint for this operation
    NULL, // char *action = NULL selects default action for this operation
    // input parameters:
    _ns1__DxDataUploadJson*             ns1__DxDataUploadJson,
    // output parameters:
    _ns1__DxDataUploadJsonResponse     &ns1__DxDataUploadJsonResponse
  );
@endcode

C server function (called from the service dispatcher defined in soapServer.c[pp]):
@code
  int __ns1__DxDataUploadJson_(
    struct soap *soap,
    // input parameters:
    _ns1__DxDataUploadJson*             ns1__DxDataUploadJson,
    // output parameters:
    _ns1__DxDataUploadJsonResponse     &ns1__DxDataUploadJsonResponse
  );
@endcode

C++ proxy class (defined in soapMesFrameWorkSoapProxy.h generated with soapcpp2):
@code
  class MesFrameWorkSoapProxy;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use proxy classes;

C++ service class (defined in soapMesFrameWorkSoapService.h generated with soapcpp2):
@code
  class MesFrameWorkSoapService;
@endcode
Important: use soapcpp2 option '-j' (or '-i') to generate improved and easy-to-use service classes;

*/

//gsoap ns1  service method-protocol:	DxDataUploadJson_ SOAP
//gsoap ns1  service method-style:	DxDataUploadJson_ document
//gsoap ns1  service method-encoding:	DxDataUploadJson_ literal
//gsoap ns1  service method-input-action:	DxDataUploadJson_ http://device.service.moresoft.com/DxDataUploadJson
//gsoap ns1  service method-output-action:	DxDataUploadJson_ http://device.service.moresoft.com/DxDataUploadJsonResponse
int __ns1__DxDataUploadJson_(
    _ns1__DxDataUploadJson*             ns1__DxDataUploadJson,	///< Input parameter
    _ns1__DxDataUploadJsonResponse     &ns1__DxDataUploadJsonResponse	///< Output parameter
);

/**

@page MesFrameWorkSoap Binding "MesFrameWorkSoap"

@section MesFrameWorkSoap_policy_enablers Policy Enablers of Binding "MesFrameWorkSoap"

None specified.

*/

/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/**

@page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings contractually bound by WSDL and auto-
generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data bindings
are adopted from XML schemas as part of the WSDL types section or when running
wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

The following readers and writers are C/C++ data type (de)serializers auto-
generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


@section ns1 Top-level root elements of schema "http://device.service.moresoft.com/"

  - <ns1:GetString> @ref _ns1__GetString
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetString(struct soap*, _ns1__GetString*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetString(struct soap*, _ns1__GetString*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetString(struct soap*, const char *URL, _ns1__GetString*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetString(struct soap*, const char *URL, _ns1__GetString*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetString(struct soap*, const char *URL, _ns1__GetString*);
    soap_POST_recv__ns1__GetString(struct soap*, _ns1__GetString*);
    @endcode

  - <ns1:GetStringResponse> @ref _ns1__GetStringResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__GetStringResponse(struct soap*, _ns1__GetStringResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__GetStringResponse(struct soap*, _ns1__GetStringResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__GetStringResponse(struct soap*, const char *URL, _ns1__GetStringResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__GetStringResponse(struct soap*, const char *URL, _ns1__GetStringResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__GetStringResponse(struct soap*, const char *URL, _ns1__GetStringResponse*);
    soap_POST_recv__ns1__GetStringResponse(struct soap*, _ns1__GetStringResponse*);
    @endcode

  - <ns1:DxTestDataUpload> @ref _ns1__DxTestDataUpload
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DxTestDataUpload(struct soap*, _ns1__DxTestDataUpload*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DxTestDataUpload(struct soap*, _ns1__DxTestDataUpload*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DxTestDataUpload(struct soap*, const char *URL, _ns1__DxTestDataUpload*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DxTestDataUpload(struct soap*, const char *URL, _ns1__DxTestDataUpload*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DxTestDataUpload(struct soap*, const char *URL, _ns1__DxTestDataUpload*);
    soap_POST_recv__ns1__DxTestDataUpload(struct soap*, _ns1__DxTestDataUpload*);
    @endcode

  - <ns1:DxTestDataUploadResponse> @ref _ns1__DxTestDataUploadResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DxTestDataUploadResponse(struct soap*, _ns1__DxTestDataUploadResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DxTestDataUploadResponse(struct soap*, _ns1__DxTestDataUploadResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DxTestDataUploadResponse(struct soap*, const char *URL, _ns1__DxTestDataUploadResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DxTestDataUploadResponse(struct soap*, const char *URL, _ns1__DxTestDataUploadResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DxTestDataUploadResponse(struct soap*, const char *URL, _ns1__DxTestDataUploadResponse*);
    soap_POST_recv__ns1__DxTestDataUploadResponse(struct soap*, _ns1__DxTestDataUploadResponse*);
    @endcode

  - <ns1:Device_Parameters> @ref _ns1__Device_USCOREParameters
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Device_USCOREParameters(struct soap*, _ns1__Device_USCOREParameters*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Device_USCOREParameters(struct soap*, _ns1__Device_USCOREParameters*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__Device_USCOREParameters(struct soap*, const char *URL, _ns1__Device_USCOREParameters*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__Device_USCOREParameters(struct soap*, const char *URL, _ns1__Device_USCOREParameters*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__Device_USCOREParameters(struct soap*, const char *URL, _ns1__Device_USCOREParameters*);
    soap_POST_recv__ns1__Device_USCOREParameters(struct soap*, _ns1__Device_USCOREParameters*);
    @endcode

  - <ns1:Device_ParametersResponse> @ref _ns1__Device_USCOREParametersResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__Device_USCOREParametersResponse(struct soap*, _ns1__Device_USCOREParametersResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__Device_USCOREParametersResponse(struct soap*, _ns1__Device_USCOREParametersResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__Device_USCOREParametersResponse(struct soap*, const char *URL, _ns1__Device_USCOREParametersResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__Device_USCOREParametersResponse(struct soap*, const char *URL, _ns1__Device_USCOREParametersResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__Device_USCOREParametersResponse(struct soap*, const char *URL, _ns1__Device_USCOREParametersResponse*);
    soap_POST_recv__ns1__Device_USCOREParametersResponse(struct soap*, _ns1__Device_USCOREParametersResponse*);
    @endcode

  - <ns1:DSDataCreateJSON> @ref _ns1__DSDataCreateJSON
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DSDataCreateJSON(struct soap*, _ns1__DSDataCreateJSON*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DSDataCreateJSON(struct soap*, _ns1__DSDataCreateJSON*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DSDataCreateJSON(struct soap*, const char *URL, _ns1__DSDataCreateJSON*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DSDataCreateJSON(struct soap*, const char *URL, _ns1__DSDataCreateJSON*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DSDataCreateJSON(struct soap*, const char *URL, _ns1__DSDataCreateJSON*);
    soap_POST_recv__ns1__DSDataCreateJSON(struct soap*, _ns1__DSDataCreateJSON*);
    @endcode

  - <ns1:DSDataCreateJSONResponse> @ref _ns1__DSDataCreateJSONResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DSDataCreateJSONResponse(struct soap*, _ns1__DSDataCreateJSONResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DSDataCreateJSONResponse(struct soap*, _ns1__DSDataCreateJSONResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DSDataCreateJSONResponse(struct soap*, const char *URL, _ns1__DSDataCreateJSONResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DSDataCreateJSONResponse(struct soap*, const char *URL, _ns1__DSDataCreateJSONResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DSDataCreateJSONResponse(struct soap*, const char *URL, _ns1__DSDataCreateJSONResponse*);
    soap_POST_recv__ns1__DSDataCreateJSONResponse(struct soap*, _ns1__DSDataCreateJSONResponse*);
    @endcode

  - <ns1:DxDataUploadJson> @ref _ns1__DxDataUploadJson
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DxDataUploadJson(struct soap*, _ns1__DxDataUploadJson*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DxDataUploadJson(struct soap*, _ns1__DxDataUploadJson*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DxDataUploadJson(struct soap*, const char *URL, _ns1__DxDataUploadJson*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DxDataUploadJson(struct soap*, const char *URL, _ns1__DxDataUploadJson*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DxDataUploadJson(struct soap*, const char *URL, _ns1__DxDataUploadJson*);
    soap_POST_recv__ns1__DxDataUploadJson(struct soap*, _ns1__DxDataUploadJson*);
    @endcode

  - <ns1:DxDataUploadJsonResponse> @ref _ns1__DxDataUploadJsonResponse
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__ns1__DxDataUploadJsonResponse(struct soap*, _ns1__DxDataUploadJsonResponse*);
    // Writer (returns SOAP_OK on success):
    soap_write__ns1__DxDataUploadJsonResponse(struct soap*, _ns1__DxDataUploadJsonResponse*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__ns1__DxDataUploadJsonResponse(struct soap*, const char *URL, _ns1__DxDataUploadJsonResponse*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__ns1__DxDataUploadJsonResponse(struct soap*, const char *URL, _ns1__DxDataUploadJsonResponse*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__ns1__DxDataUploadJsonResponse(struct soap*, const char *URL, _ns1__DxDataUploadJsonResponse*);
    soap_POST_recv__ns1__DxDataUploadJsonResponse(struct soap*, _ns1__DxDataUploadJsonResponse*);
    @endcode

  - <ns1:string> (use wsdl2h option -g to auto-generate type _ns1__string)

*/

/* End of MesFrameWork.h */
